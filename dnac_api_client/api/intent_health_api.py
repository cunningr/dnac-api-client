# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dnac_api_client.api_client import ApiClient


class IntentHealthApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def dna_intent_api_v1_client_health_get(self, start_time, end_time, **kwargs):  # noqa: E501
        """Client Health  # noqa: E501

        Get overall Client Health along with beak down on categories of wired and wireless  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dna_intent_api_v1_client_health_get(start_time, end_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_time: Start Time (required)
        :param str end_time: End Time (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: ClientHealthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dna_intent_api_v1_client_health_get_with_http_info(start_time, end_time, **kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_client_health_get_with_http_info(start_time, end_time, **kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_client_health_get_with_http_info(self, start_time, end_time, **kwargs):  # noqa: E501
        """Client Health  # noqa: E501

        Get overall Client Health along with beak down on categories of wired and wireless  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dna_intent_api_v1_client_health_get_with_http_info(start_time, end_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_time: Start Time (required)
        :param str end_time: End Time (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: ClientHealthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['start_time', 'end_time', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_client_health_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'start_time' is set
        if ('start_time' not in local_var_params or
                local_var_params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `dna_intent_api_v1_client_health_get`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in local_var_params or
                local_var_params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `dna_intent_api_v1_client_health_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_time' in local_var_params:
            query_params.append(('startTime', local_var_params['start_time']))  # noqa: E501
        if 'end_time' in local_var_params:
            query_params.append(('endTime', local_var_params['end_time']))  # noqa: E501

        header_params = {}
        if 'runsync' in local_var_params:
            header_params['__runsync'] = local_var_params['runsync']  # noqa: E501
        if 'timeout' in local_var_params:
            header_params['__timeout'] = local_var_params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/client-health', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientHealthResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dna_intent_api_v1_network_health_get(self, start_time, end_time, **kwargs):  # noqa: E501
        """Network Health  # noqa: E501

        Network Devices and their health by category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dna_intent_api_v1_network_health_get(start_time, end_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_time: Start Time (required)
        :param str end_time: End Time (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dna_intent_api_v1_network_health_get_with_http_info(start_time, end_time, **kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_network_health_get_with_http_info(start_time, end_time, **kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_network_health_get_with_http_info(self, start_time, end_time, **kwargs):  # noqa: E501
        """Network Health  # noqa: E501

        Network Devices and their health by category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dna_intent_api_v1_network_health_get_with_http_info(start_time, end_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_time: Start Time (required)
        :param str end_time: End Time (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['start_time', 'end_time', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_network_health_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'start_time' is set
        if ('start_time' not in local_var_params or
                local_var_params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `dna_intent_api_v1_network_health_get`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in local_var_params or
                local_var_params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `dna_intent_api_v1_network_health_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_time' in local_var_params:
            query_params.append(('startTime', local_var_params['start_time']))  # noqa: E501
        if 'end_time' in local_var_params:
            query_params.append(('endTime', local_var_params['end_time']))  # noqa: E501

        header_params = {}
        if 'runsync' in local_var_params:
            header_params['__runsync'] = local_var_params['runsync']  # noqa: E501
        if 'timeout' in local_var_params:
            header_params['__timeout'] = local_var_params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/network-health', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dna_intent_api_v1_site_hierarchy_get(self, timestamp, **kwargs):  # noqa: E501
        """Site Hierarchy  # noqa: E501

        Site Hierarchy along with health Info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dna_intent_api_v1_site_hierarchy_get(timestamp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str timestamp: Timestamp  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: SiteHierarchyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dna_intent_api_v1_site_hierarchy_get_with_http_info(timestamp, **kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_site_hierarchy_get_with_http_info(timestamp, **kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_site_hierarchy_get_with_http_info(self, timestamp, **kwargs):  # noqa: E501
        """Site Hierarchy  # noqa: E501

        Site Hierarchy along with health Info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dna_intent_api_v1_site_hierarchy_get_with_http_info(timestamp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str timestamp: Timestamp  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: SiteHierarchyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['timestamp', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_site_hierarchy_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in local_var_params or
                local_var_params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `dna_intent_api_v1_site_hierarchy_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'timestamp' in local_var_params:
            query_params.append(('timestamp', local_var_params['timestamp']))  # noqa: E501

        header_params = {}
        if 'runsync' in local_var_params:
            header_params['__runsync'] = local_var_params['runsync']  # noqa: E501
        if 'timeout' in local_var_params:
            header_params['__timeout'] = local_var_params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/site-hierarchy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteHierarchyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
