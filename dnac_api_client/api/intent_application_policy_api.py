# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dnac_api_client.api_client import ApiClient


class IntentApplicationPolicyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def dna_intent_api_v1_application_count_get(self, count, **kwargs):  # noqa: E501
        """Get Applications Count  # noqa: E501

        Invoke the API to return the number of defined applications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_application_count_get(count, async=True)
        >>> result = thread.get()

        :param async bool
        :param str count:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dna_intent_api_v1_application_count_get_with_http_info(count, **kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_application_count_get_with_http_info(count, **kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_application_count_get_with_http_info(self, count, **kwargs):  # noqa: E501
        """Get Applications Count  # noqa: E501

        Invoke the API to return the number of defined applications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_application_count_get_with_http_info(count, async=True)
        >>> result = thread.get()

        :param async bool
        :param str count:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_application_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'count' is set
        if ('count' not in params or
                params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `dna_intent_api_v1_application_count_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'count' in params:
            path_params['count'] = params['count']  # noqa: E501

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/application/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dna_intent_api_v1_application_policy_get(self, **kwargs):  # noqa: E501
        """Get Application Policies  # noqa: E501

        Invoke the API to return all (or specific) application-policy(ies)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_application_policy_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :param float offset: 
        :param float limit: 
        :param str application_policy_namespace: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dna_intent_api_v1_application_policy_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_application_policy_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_application_policy_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Application Policies  # noqa: E501

        Invoke the API to return all (or specific) application-policy(ies)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_application_policy_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :param float offset: 
        :param float limit: 
        :param str application_policy_namespace: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runsync', 'timeout', 'offset', 'limit', 'application_policy_namespace']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_application_policy_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501
        if 'offset' in params:
            header_params['offset'] = params['offset']  # noqa: E501
        if 'limit' in params:
            header_params['limit'] = params['limit']  # noqa: E501
        if 'application_policy_namespace' in params:
            header_params['applicationPolicyNamespace'] = params['application_policy_namespace']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/application-policy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dna_intent_api_v1_application_set_count_get(self, count, **kwargs):  # noqa: E501
        """Get Application Sets Count  # noqa: E501

        Invoke the API to return the number of defined application sets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_application_set_count_get(count, async=True)
        >>> result = thread.get()

        :param async bool
        :param str count:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dna_intent_api_v1_application_set_count_get_with_http_info(count, **kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_application_set_count_get_with_http_info(count, **kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_application_set_count_get_with_http_info(self, count, **kwargs):  # noqa: E501
        """Get Application Sets Count  # noqa: E501

        Invoke the API to return the number of defined application sets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_application_set_count_get_with_http_info(count, async=True)
        >>> result = thread.get()

        :param async bool
        :param str count:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_application_set_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'count' is set
        if ('count' not in params or
                params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `dna_intent_api_v1_application_set_count_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'count' in params:
            path_params['count'] = params['count']  # noqa: E501

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/application-set/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dna_intent_api_v1_application_sets_get(self, **kwargs):  # noqa: E501
        """Get Application Sets  # noqa: E501

        Invoke the API to return all (or specific) defined application-set(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_application_sets_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :param float offset: 
        :param float limit: 
        :param str application_set_name: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dna_intent_api_v1_application_sets_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_application_sets_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_application_sets_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Application Sets  # noqa: E501

        Invoke the API to return all (or specific) defined application-set(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_application_sets_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :param float offset: 
        :param float limit: 
        :param str application_set_name: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runsync', 'timeout', 'offset', 'limit', 'application_set_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_application_sets_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501
        if 'offset' in params:
            header_params['offset'] = params['offset']  # noqa: E501
        if 'limit' in params:
            header_params['limit'] = params['limit']  # noqa: E501
        if 'application_set_name' in params:
            header_params['applicationSetName'] = params['application_set_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/application-sets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dna_intent_api_v1_applications_get(self, **kwargs):  # noqa: E501
        """Get Applications  # noqa: E501

        Invoke the API to return the list of all (or specific) defined application(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_applications_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :param float offset: 
        :param float limit: 
        :param str application_name: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dna_intent_api_v1_applications_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_applications_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_applications_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Applications  # noqa: E501

        Invoke the API to return the list of all (or specific) defined application(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_applications_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :param float offset: 
        :param float limit: 
        :param str application_name: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runsync', 'timeout', 'offset', 'limit', 'application_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_applications_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501
        if 'offset' in params:
            header_params['offset'] = params['offset']  # noqa: E501
        if 'limit' in params:
            header_params['limit'] = params['limit']  # noqa: E501
        if 'application_name' in params:
            header_params['applicationName'] = params['application_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dna_intent_api_v1_create_application_policy_post(self, **kwargs):  # noqa: E501
        """Post Application Policy Intent  # noqa: E501

        Invoke the API to create, modify or delete an application-policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_create_application_policy_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dna_intent_api_v1_create_application_policy_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_create_application_policy_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_create_application_policy_post_with_http_info(self, **kwargs):  # noqa: E501
        """Post Application Policy Intent  # noqa: E501

        Invoke the API to create, modify or delete an application-policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_create_application_policy_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_create_application_policy_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/create-application-policy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dna_intent_api_v1_create_application_post(self, **kwargs):  # noqa: E501
        """Post Application  # noqa: E501

        Invoke the API to create a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_create_application_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dna_intent_api_v1_create_application_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_create_application_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_create_application_post_with_http_info(self, **kwargs):  # noqa: E501
        """Post Application  # noqa: E501

        Invoke the API to create a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_create_application_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_create_application_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/create-application', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dna_intent_api_v1_create_application_set_post(self, **kwargs):  # noqa: E501
        """Post Application Set  # noqa: E501

        Invoke the API to create a custom application set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_create_application_set_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dna_intent_api_v1_create_application_set_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_create_application_set_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_create_application_set_post_with_http_info(self, **kwargs):  # noqa: E501
        """Post Application Set  # noqa: E501

        Invoke the API to create a custom application set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_create_application_set_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_create_application_set_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/create-application-set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dna_intent_api_v1_delete_application_delete(self, application_id, **kwargs):  # noqa: E501
        """Delete Application  # noqa: E501

        Invoke the API to delete a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_delete_application_delete(application_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str application_id:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dna_intent_api_v1_delete_application_delete_with_http_info(application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_delete_application_delete_with_http_info(application_id, **kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_delete_application_delete_with_http_info(self, application_id, **kwargs):  # noqa: E501
        """Delete Application  # noqa: E501

        Invoke the API to delete a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_delete_application_delete_with_http_info(application_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str application_id:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_id', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_delete_application_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `dna_intent_api_v1_delete_application_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501
        if 'application_id' in params:
            header_params['applicationId'] = params['application_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/delete-application', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dna_intent_api_v1_delete_application_set_delete(self, application_set_id, **kwargs):  # noqa: E501
        """Delete Application Set  # noqa: E501

        Invoke the API to delete a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_delete_application_set_delete(application_set_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str application_set_id:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dna_intent_api_v1_delete_application_set_delete_with_http_info(application_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_delete_application_set_delete_with_http_info(application_set_id, **kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_delete_application_set_delete_with_http_info(self, application_set_id, **kwargs):  # noqa: E501
        """Delete Application Set  # noqa: E501

        Invoke the API to delete a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_delete_application_set_delete_with_http_info(application_set_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str application_set_id:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_set_id', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_delete_application_set_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_set_id' is set
        if ('application_set_id' not in params or
                params['application_set_id'] is None):
            raise ValueError("Missing the required parameter `application_set_id` when calling `dna_intent_api_v1_delete_application_set_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501
        if 'application_set_id' in params:
            header_params['applicationSetId'] = params['application_set_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/delete-application-set', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dna_intent_api_v1_update_application_put(self, **kwargs):  # noqa: E501
        """Edit Application  # noqa: E501

        Invoke the API to create a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_update_application_put(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dna_intent_api_v1_update_application_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_update_application_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_update_application_put_with_http_info(self, **kwargs):  # noqa: E501
        """Edit Application  # noqa: E501

        Invoke the API to create a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_update_application_put_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_update_application_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/update-application', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
