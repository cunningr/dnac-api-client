# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dnac_api_client.api_client import ApiClient


class PnPApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_onboarding_pnp_device_claim_post(self, request, **kwargs):  # noqa: E501
        """Claim Device(s)  # noqa: E501

        This API is used to assign a project & workflow (i.e. claim) one of more devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_claim_post(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ClaimDeviceRequest request: request (required)
        :return: ClaimDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_device_claim_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_device_claim_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_device_claim_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Claim Device(s)  # noqa: E501

        This API is used to assign a project & workflow (i.e. claim) one of more devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_claim_post_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ClaimDeviceRequest request: request (required)
        :return: ClaimDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_device_claim_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `api_v1_onboarding_pnp_device_claim_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-device/claim', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClaimDevicesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_device_count_get(self, **kwargs):  # noqa: E501
        """Get Device Count  # noqa: E501

        This API is used to get the number of the devices matching provided filters. This is useful for pageination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_count_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] serial_number: Device Serial Number
        :param list[str] state: Device State
        :param list[str] onb_state: Device Onboarding State
        :param list[str] cm_state: Device Connection Manager State
        :param list[str] name: Device Name
        :param list[str] pid: Device ProductId
        :param list[str] source: Device Source
        :param list[str] project_id: Device Project Id
        :param list[str] workflow_id: Device Workflow Id
        :param list[str] project_name: Device Project Name
        :param list[str] workflow_name: Device Workflow Name
        :param list[str] smart_account_id: Device Smart Account
        :param list[str] virtual_account_id: Device Virtual Account
        :param bool last_contact: Device Has Contacted lastContact > 0
        :return: GetDeviceCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_device_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_device_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_device_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Device Count  # noqa: E501

        This API is used to get the number of the devices matching provided filters. This is useful for pageination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_count_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] serial_number: Device Serial Number
        :param list[str] state: Device State
        :param list[str] onb_state: Device Onboarding State
        :param list[str] cm_state: Device Connection Manager State
        :param list[str] name: Device Name
        :param list[str] pid: Device ProductId
        :param list[str] source: Device Source
        :param list[str] project_id: Device Project Id
        :param list[str] workflow_id: Device Workflow Id
        :param list[str] project_name: Device Project Name
        :param list[str] workflow_name: Device Workflow Name
        :param list[str] smart_account_id: Device Smart Account
        :param list[str] virtual_account_id: Device Virtual Account
        :param bool last_contact: Device Has Contacted lastContact > 0
        :return: GetDeviceCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['serial_number', 'state', 'onb_state', 'cm_state', 'name', 'pid', 'source', 'project_id', 'workflow_id', 'project_name', 'workflow_name', 'smart_account_id', 'virtual_account_id', 'last_contact']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_device_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'serial_number' in params:
            query_params.append(('serialNumber', params['serial_number']))  # noqa: E501
            collection_formats['serialNumber'] = 'csv'  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
            collection_formats['state'] = 'csv'  # noqa: E501
        if 'onb_state' in params:
            query_params.append(('onbState', params['onb_state']))  # noqa: E501
            collection_formats['onbState'] = 'csv'  # noqa: E501
        if 'cm_state' in params:
            query_params.append(('cmState', params['cm_state']))  # noqa: E501
            collection_formats['cmState'] = 'csv'  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
            collection_formats['name'] = 'csv'  # noqa: E501
        if 'pid' in params:
            query_params.append(('pid', params['pid']))  # noqa: E501
            collection_formats['pid'] = 'csv'  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
            collection_formats['source'] = 'csv'  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
            collection_formats['projectId'] = 'csv'  # noqa: E501
        if 'workflow_id' in params:
            query_params.append(('workflowId', params['workflow_id']))  # noqa: E501
            collection_formats['workflowId'] = 'csv'  # noqa: E501
        if 'project_name' in params:
            query_params.append(('projectName', params['project_name']))  # noqa: E501
            collection_formats['projectName'] = 'csv'  # noqa: E501
        if 'workflow_name' in params:
            query_params.append(('workflowName', params['workflow_name']))  # noqa: E501
            collection_formats['workflowName'] = 'csv'  # noqa: E501
        if 'smart_account_id' in params:
            query_params.append(('smartAccountId', params['smart_account_id']))  # noqa: E501
            collection_formats['smartAccountId'] = 'csv'  # noqa: E501
        if 'virtual_account_id' in params:
            query_params.append(('virtualAccountId', params['virtual_account_id']))  # noqa: E501
            collection_formats['virtualAccountId'] = 'csv'  # noqa: E501
        if 'last_contact' in params:
            query_params.append(('lastContact', params['last_contact']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-device/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDeviceCountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_device_dashboard_count_get(self, category, **kwargs):  # noqa: E501
        """Get Categorized Device Count  # noqa: E501

        Get Categorized Device Count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_dashboard_count_get(category, async=True)
        >>> result = thread.get()

        :param async bool
        :param str category: Valid Values: state, errorState, onbState or source (required)
        :return: GetCategorizedDeviceCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_device_dashboard_count_get_with_http_info(category, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_device_dashboard_count_get_with_http_info(category, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_device_dashboard_count_get_with_http_info(self, category, **kwargs):  # noqa: E501
        """Get Categorized Device Count  # noqa: E501

        Get Categorized Device Count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_dashboard_count_get_with_http_info(category, async=True)
        >>> result = thread.get()

        :param async bool
        :param str category: Valid Values: state, errorState, onbState or source (required)
        :return: GetCategorizedDeviceCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_device_dashboard_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category' is set
        if ('category' not in params or
                params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `api_v1_onboarding_pnp_device_dashboard_count_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-device/dashboard/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCategorizedDeviceCountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_device_get(self, **kwargs):  # noqa: E501
        """List devices  # noqa: E501

        This API is used to get the list of devices that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Limits number of results
        :param int offset: Index of first result
        :param list[str] sort: Comma seperated list of fields to sort on
        :param str sort_order: Sort Order Ascending (asc) or Descending (des)
        :param list[str] serial_number: Device Serial Number
        :param list[str] state: Device State
        :param list[str] onb_state: Device Onboarding State
        :param list[str] cm_state: Device Connection Manager State
        :param list[str] name: Device Name
        :param list[str] pid: Device ProductId
        :param list[str] source: Device Source
        :param list[str] project_id: Device Project Id
        :param list[str] workflow_id: Device Workflow Id
        :param list[str] project_name: Device Project Name
        :param list[str] workflow_name: Device Workflow Name
        :param list[str] smart_account_id: Device Smart Account
        :param list[str] virtual_account_id: Device Virtual Account
        :param bool last_contact: Device Has Contacted lastContact > 0
        :return: ListDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_device_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_device_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_device_get_with_http_info(self, **kwargs):  # noqa: E501
        """List devices  # noqa: E501

        This API is used to get the list of devices that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Limits number of results
        :param int offset: Index of first result
        :param list[str] sort: Comma seperated list of fields to sort on
        :param str sort_order: Sort Order Ascending (asc) or Descending (des)
        :param list[str] serial_number: Device Serial Number
        :param list[str] state: Device State
        :param list[str] onb_state: Device Onboarding State
        :param list[str] cm_state: Device Connection Manager State
        :param list[str] name: Device Name
        :param list[str] pid: Device ProductId
        :param list[str] source: Device Source
        :param list[str] project_id: Device Project Id
        :param list[str] workflow_id: Device Workflow Id
        :param list[str] project_name: Device Project Name
        :param list[str] workflow_name: Device Workflow Name
        :param list[str] smart_account_id: Device Smart Account
        :param list[str] virtual_account_id: Device Virtual Account
        :param bool last_contact: Device Has Contacted lastContact > 0
        :return: ListDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'sort', 'sort_order', 'serial_number', 'state', 'onb_state', 'cm_state', 'name', 'pid', 'source', 'project_id', 'workflow_id', 'project_name', 'workflow_name', 'smart_account_id', 'virtual_account_id', 'last_contact']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_device_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'serial_number' in params:
            query_params.append(('serialNumber', params['serial_number']))  # noqa: E501
            collection_formats['serialNumber'] = 'csv'  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
            collection_formats['state'] = 'csv'  # noqa: E501
        if 'onb_state' in params:
            query_params.append(('onbState', params['onb_state']))  # noqa: E501
            collection_formats['onbState'] = 'csv'  # noqa: E501
        if 'cm_state' in params:
            query_params.append(('cmState', params['cm_state']))  # noqa: E501
            collection_formats['cmState'] = 'csv'  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
            collection_formats['name'] = 'csv'  # noqa: E501
        if 'pid' in params:
            query_params.append(('pid', params['pid']))  # noqa: E501
            collection_formats['pid'] = 'csv'  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
            collection_formats['source'] = 'csv'  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
            collection_formats['projectId'] = 'csv'  # noqa: E501
        if 'workflow_id' in params:
            query_params.append(('workflowId', params['workflow_id']))  # noqa: E501
            collection_formats['workflowId'] = 'csv'  # noqa: E501
        if 'project_name' in params:
            query_params.append(('projectName', params['project_name']))  # noqa: E501
            collection_formats['projectName'] = 'csv'  # noqa: E501
        if 'workflow_name' in params:
            query_params.append(('workflowName', params['workflow_name']))  # noqa: E501
            collection_formats['workflowName'] = 'csv'  # noqa: E501
        if 'smart_account_id' in params:
            query_params.append(('smartAccountId', params['smart_account_id']))  # noqa: E501
            collection_formats['smartAccountId'] = 'csv'  # noqa: E501
        if 'virtual_account_id' in params:
            query_params.append(('virtualAccountId', params['virtual_account_id']))  # noqa: E501
            collection_formats['virtualAccountId'] = 'csv'  # noqa: E501
        if 'last_contact' in params:
            query_params.append(('lastContact', params['last_contact']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-device', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListDevicesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_device_history_get(self, serial_number, **kwargs):  # noqa: E501
        """Get Device History  # noqa: E501

        Retrieves history for a specific device. Serial Number is a required parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_history_get(serial_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str serial_number: Device Serial Number (required)
        :param list[str] sort: Comma seperated list of fields to sort on
        :param str sort_order: Sort Order Ascending (asc) or Descending (des)
        :return: GetDeviceHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_device_history_get_with_http_info(serial_number, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_device_history_get_with_http_info(serial_number, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_device_history_get_with_http_info(self, serial_number, **kwargs):  # noqa: E501
        """Get Device History  # noqa: E501

        Retrieves history for a specific device. Serial Number is a required parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_history_get_with_http_info(serial_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str serial_number: Device Serial Number (required)
        :param list[str] sort: Comma seperated list of fields to sort on
        :param str sort_order: Sort Order Ascending (asc) or Descending (des)
        :return: GetDeviceHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['serial_number', 'sort', 'sort_order']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_device_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'serial_number' is set
        if ('serial_number' not in params or
                params['serial_number'] is None):
            raise ValueError("Missing the required parameter `serial_number` when calling `api_v1_onboarding_pnp_device_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'serial_number' in params:
            query_params.append(('serialNumber', params['serial_number']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-device/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDeviceHistoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_device_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete Device  # noqa: E501

        This API is used to delete the specified device from the database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_id_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :return: DeleteDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_device_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_device_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_device_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete Device  # noqa: E501

        This API is used to delete the specified device from the database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_id_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :return: DeleteDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_device_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v1_onboarding_pnp_device_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-device/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteDeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_device_id_get(self, id, **kwargs):  # noqa: E501
        """Get Device by ID  # noqa: E501

        Get device details of the device with input device id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :return: GetDeviceByIDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_device_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_device_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_device_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Device by ID  # noqa: E501

        Get device details of the device with input device id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :return: GetDeviceByIDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_device_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v1_onboarding_pnp_device_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-device/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDeviceByIDResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_device_id_put(self, request, id, **kwargs):  # noqa: E501
        """Update Device  # noqa: E501

        This API is used to update device details of a device that exists in the PnP database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_id_put(request, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Device request: request (required)
        :param str id: id (required)
        :return: UpdateDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_device_id_put_with_http_info(request, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_device_id_put_with_http_info(request, id, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_device_id_put_with_http_info(self, request, id, **kwargs):  # noqa: E501
        """Update Device  # noqa: E501

        This API is used to update device details of a device that exists in the PnP database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_id_put_with_http_info(request, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Device request: request (required)
        :param str id: id (required)
        :return: UpdateDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_device_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `api_v1_onboarding_pnp_device_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v1_onboarding_pnp_device_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-device/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateDeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_device_import_post(self, request, **kwargs):  # noqa: E501
        """Import Many Devices  # noqa: E501

        This API is used to import a list of Planned devices to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_import_post(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param Device request: request (required)
        :return: ImportManyDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_device_import_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_device_import_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_device_import_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Import Many Devices  # noqa: E501

        This API is used to import a list of Planned devices to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_import_post_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param Device request: request (required)
        :return: ImportManyDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_device_import_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `api_v1_onboarding_pnp_device_import_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-device/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImportManyDevicesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_device_post(self, request, **kwargs):  # noqa: E501
        """Create Device  # noqa: E501

        This API is used to add a Planned device to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_post(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param Device request: request (required)
        :return: CreateDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_device_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_device_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_device_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create Device  # noqa: E501

        This API is used to add a Planned device to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_post_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param Device request: request (required)
        :return: CreateDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_device_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `api_v1_onboarding_pnp_device_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-device', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateDeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_device_provision_post(self, request, **kwargs):  # noqa: E501
        """Provision Device  # noqa: E501

        This API is used push one or more devices to Provisoned state and add them to inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_provision_post(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param PushProvisionRequest request: request (required)
        :return: ProvisionDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_device_provision_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_device_provision_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_device_provision_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Provision Device  # noqa: E501

        This API is used push one or more devices to Provisoned state and add them to inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_provision_post_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param PushProvisionRequest request: request (required)
        :return: ProvisionDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_device_provision_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `api_v1_onboarding_pnp_device_provision_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-device/provision', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProvisionDeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_device_reset_post(self, request, **kwargs):  # noqa: E501
        """Reset Device  # noqa: E501

        This API is used to recover a device from a Workflow Execution Error state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_reset_post(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ResetRequest request: request (required)
        :return: ResetDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_device_reset_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_device_reset_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_device_reset_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Reset Device  # noqa: E501

        This API is used to recover a device from a Workflow Execution Error state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_reset_post_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ResetRequest request: request (required)
        :return: ResetDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_device_reset_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `api_v1_onboarding_pnp_device_reset_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-device/reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResetDeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_device_sacct_domain_vacct_name_sync_result_get(self, domain, name, **kwargs):  # noqa: E501
        """Get Sync Result for Virtual Account  # noqa: E501

        This API is used to get the device sync info from the given smart account & virtual account with the PnP database. The SAVAMapping object which has the list of devices synced since the last sync is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_sacct_domain_vacct_name_sync_result_get(domain, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain: Smart Account Domain (required)
        :param str name: Virtual Account Name (required)
        :return: GetSyncResultForVirtualAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_device_sacct_domain_vacct_name_sync_result_get_with_http_info(domain, name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_device_sacct_domain_vacct_name_sync_result_get_with_http_info(domain, name, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_device_sacct_domain_vacct_name_sync_result_get_with_http_info(self, domain, name, **kwargs):  # noqa: E501
        """Get Sync Result for Virtual Account  # noqa: E501

        This API is used to get the device sync info from the given smart account & virtual account with the PnP database. The SAVAMapping object which has the list of devices synced since the last sync is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_sacct_domain_vacct_name_sync_result_get_with_http_info(domain, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain: Smart Account Domain (required)
        :param str name: Virtual Account Name (required)
        :return: GetSyncResultForVirtualAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_device_sacct_domain_vacct_name_sync_result_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `api_v1_onboarding_pnp_device_sacct_domain_vacct_name_sync_result_get`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_v1_onboarding_pnp_device_sacct_domain_vacct_name_sync_result_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-device/sacct/{domain}/vacct/{name}/sync-result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSyncResultForVirtualAccountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_device_unclaim_post(self, request, **kwargs):  # noqa: E501
        """Un-Claim Device  # noqa: E501

        This API is used to unassign the project and workflow from one or more device.A device can only be unclaimed if it has not begun provisioning.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_unclaim_post(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param UnclaimRequest request: request (required)
        :return: UnClaimDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_device_unclaim_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_device_unclaim_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_device_unclaim_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Un-Claim Device  # noqa: E501

        This API is used to unassign the project and workflow from one or more device.A device can only be unclaimed if it has not begun provisioning.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_unclaim_post_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param UnclaimRequest request: request (required)
        :return: UnClaimDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_device_unclaim_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `api_v1_onboarding_pnp_device_unclaim_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-device/unclaim', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UnClaimDeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_device_vacct_sync_post(self, request, **kwargs):  # noqa: E501
        """Sync Virtual Account Devices  # noqa: E501

        This API is used to sync the device info from the given smart account & virtual account with the PnP database. The list of synced devices is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_vacct_sync_post(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SAVAMapping request: request (required)
        :return: SyncVirtualAccountDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_device_vacct_sync_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_device_vacct_sync_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_device_vacct_sync_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Sync Virtual Account Devices  # noqa: E501

        This API is used to sync the device info from the given smart account & virtual account with the PnP database. The list of synced devices is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_device_vacct_sync_post_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SAVAMapping request: request (required)
        :return: SyncVirtualAccountDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_device_vacct_sync_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `api_v1_onboarding_pnp_device_vacct_sync_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-device/vacct-sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SyncVirtualAccountDevicesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_settings_get(self, **kwargs):  # noqa: E501
        """View Settings  # noqa: E501

        Get this user's list of global PnP settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_settings_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ViewSettingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_settings_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_settings_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_settings_get_with_http_info(self, **kwargs):  # noqa: E501
        """View Settings  # noqa: E501

        Get this user's list of global PnP settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_settings_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ViewSettingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_settings_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ViewSettingsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_settings_put(self, request, **kwargs):  # noqa: E501
        """Update Settings  # noqa: E501

        Change this user's list of global PnP settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_settings_put(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param Settings request: request (required)
        :return: UpdateSettingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_settings_put_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_settings_put_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_settings_put_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update Settings  # noqa: E501

        Change this user's list of global PnP settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_settings_put_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param Settings request: request (required)
        :return: UpdateSettingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_settings_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `api_v1_onboarding_pnp_settings_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateSettingsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_settings_sacct_domain_vacct_get(self, domain, **kwargs):  # noqa: E501
        """Get Virtual Account List  # noqa: E501

        This API is used to get list of Virtual Accounts associated with the specified Smart Account. The list of virtual account names is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_settings_sacct_domain_vacct_get(domain, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain: Smart Account Domain (required)
        :return: GetVirtualAccountListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_settings_sacct_domain_vacct_get_with_http_info(domain, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_settings_sacct_domain_vacct_get_with_http_info(domain, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_settings_sacct_domain_vacct_get_with_http_info(self, domain, **kwargs):  # noqa: E501
        """Get Virtual Account List  # noqa: E501

        This API is used to get list of Virtual Accounts associated with the specified Smart Account. The list of virtual account names is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_settings_sacct_domain_vacct_get_with_http_info(domain, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain: Smart Account Domain (required)
        :return: GetVirtualAccountListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_settings_sacct_domain_vacct_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `api_v1_onboarding_pnp_settings_sacct_domain_vacct_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-settings/sacct/{domain}/vacct', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVirtualAccountListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_settings_sacct_get(self, **kwargs):  # noqa: E501
        """Get Smart Account List  # noqa: E501

        This API is used to get list of Smart Accounts. The list of smart account domains is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_settings_sacct_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetSmartAccountListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_settings_sacct_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_settings_sacct_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_settings_sacct_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Smart Account List  # noqa: E501

        This API is used to get list of Smart Accounts. The list of smart account domains is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_settings_sacct_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetSmartAccountListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_settings_sacct_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-settings/sacct', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSmartAccountListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_settings_savacct_post(self, request, **kwargs):  # noqa: E501
        """Add Virtual Account  # noqa: E501

        This API is used to register a Smart Account, Virtual Account and the relevant server profile info with the PnP System & database. The devices present in the registered virtual account are synced with the PnP database as well. The new profile is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_settings_savacct_post(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SAVAMapping request: request (required)
        :return: AddVirtualAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_settings_savacct_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_settings_savacct_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_settings_savacct_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Add Virtual Account  # noqa: E501

        This API is used to register a Smart Account, Virtual Account and the relevant server profile info with the PnP System & database. The devices present in the registered virtual account are synced with the PnP database as well. The new profile is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_settings_savacct_post_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SAVAMapping request: request (required)
        :return: AddVirtualAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_settings_savacct_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `api_v1_onboarding_pnp_settings_savacct_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-settings/savacct', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddVirtualAccountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_settings_savacct_put(self, request, **kwargs):  # noqa: E501
        """Edit PnP Server Profile  # noqa: E501

        This API is used to edit the PnP Server profile in a registered Virtual Account in the PnP database.The edited smart & virtual account info is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_settings_savacct_put(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SAVAMapping request: request (required)
        :return: EditPnPServerProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_settings_savacct_put_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_settings_savacct_put_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_settings_savacct_put_with_http_info(self, request, **kwargs):  # noqa: E501
        """Edit PnP Server Profile  # noqa: E501

        This API is used to edit the PnP Server profile in a registered Virtual Account in the PnP database.The edited smart & virtual account info is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_settings_savacct_put_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SAVAMapping request: request (required)
        :return: EditPnPServerProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_settings_savacct_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `api_v1_onboarding_pnp_settings_savacct_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-settings/savacct', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditPnPServerProfileResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_settings_vacct_delete(self, domain, name, **kwargs):  # noqa: E501
        """Deregister Virtual Account  # noqa: E501

        This API is used to deregister the specified smart account & virtual account info and the associated device information from the PnP System & database. The devices associated with the deregistered virtual account are removed from the PnP database as well. The deregistered smart & virtual account info is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_settings_vacct_delete(domain, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain: Smart Account Domain (required)
        :param str name: Virtual Account Name (required)
        :return: DeregisterVirtualAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_settings_vacct_delete_with_http_info(domain, name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_settings_vacct_delete_with_http_info(domain, name, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_settings_vacct_delete_with_http_info(self, domain, name, **kwargs):  # noqa: E501
        """Deregister Virtual Account  # noqa: E501

        This API is used to deregister the specified smart account & virtual account info and the associated device information from the PnP System & database. The devices associated with the deregistered virtual account are removed from the PnP database as well. The deregistered smart & virtual account info is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_settings_vacct_delete_with_http_info(domain, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain: Smart Account Domain (required)
        :param str name: Virtual Account Name (required)
        :return: DeregisterVirtualAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_settings_vacct_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `api_v1_onboarding_pnp_settings_vacct_delete`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_v1_onboarding_pnp_settings_vacct_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'domain' in params:
            query_params.append(('domain', params['domain']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-settings/vacct', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeregisterVirtualAccountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_workflow_count_get(self, **kwargs):  # noqa: E501
        """Get Workflow Count  # noqa: E501

        This API is used to get the number of the workflows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_workflow_count_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] name: Workflow Name
        :return: GetWorkflowCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_workflow_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_workflow_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_workflow_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Workflow Count  # noqa: E501

        This API is used to get the number of the workflows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_workflow_count_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] name: Workflow Name
        :return: GetWorkflowCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_workflow_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
            collection_formats['name'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-workflow/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWorkflowCountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_workflow_get(self, **kwargs):  # noqa: E501
        """List Workflows  # noqa: E501

        This API is used to get the list of workflows that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 workflows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_workflow_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Limits number of results
        :param int offset: Index of first result
        :param list[str] sort: Comma seperated lost of fields to sort on
        :param str sort_order: Sort Order Ascending (asc) or Descending (des)
        :param list[str] type: Workflow Type
        :param list[str] name: Workflow Name
        :return: ListWorkflowsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_workflow_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_workflow_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_workflow_get_with_http_info(self, **kwargs):  # noqa: E501
        """List Workflows  # noqa: E501

        This API is used to get the list of workflows that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 workflows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_workflow_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Limits number of results
        :param int offset: Index of first result
        :param list[str] sort: Comma seperated lost of fields to sort on
        :param str sort_order: Sort Order Ascending (asc) or Descending (des)
        :param list[str] type: Workflow Type
        :param list[str] name: Workflow Name
        :return: ListWorkflowsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'sort', 'sort_order', 'type', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_workflow_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
            collection_formats['type'] = 'csv'  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
            collection_formats['name'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-workflow', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListWorkflowsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_workflow_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete Workflow  # noqa: E501

        Delete a workflow given its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_workflow_id_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :return: DeleteWorkflowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_workflow_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_workflow_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_workflow_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete Workflow  # noqa: E501

        Delete a workflow given its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_workflow_id_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :return: DeleteWorkflowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_workflow_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v1_onboarding_pnp_workflow_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-workflow/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteWorkflowResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_workflow_id_get(self, id, **kwargs):  # noqa: E501
        """Get Workflow  # noqa: E501

        Get a workflow given its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_workflow_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :return: GetWorkflowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_workflow_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_workflow_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_workflow_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Workflow  # noqa: E501

        Get a workflow given its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_workflow_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :return: GetWorkflowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_workflow_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v1_onboarding_pnp_workflow_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-workflow/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWorkflowResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_workflow_id_put(self, request, id, **kwargs):  # noqa: E501
        """Update Workflow  # noqa: E501

        Update an existing workflow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_workflow_id_put(request, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Workflow request: request (required)
        :param str id: id (required)
        :return: UpdateWorkflowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_workflow_id_put_with_http_info(request, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_workflow_id_put_with_http_info(request, id, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_workflow_id_put_with_http_info(self, request, id, **kwargs):  # noqa: E501
        """Update Workflow  # noqa: E501

        Update an existing workflow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_workflow_id_put_with_http_info(request, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Workflow request: request (required)
        :param str id: id (required)
        :return: UpdateWorkflowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_workflow_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `api_v1_onboarding_pnp_workflow_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v1_onboarding_pnp_workflow_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-workflow/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateWorkflowResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_onboarding_pnp_workflow_post(self, request, **kwargs):  # noqa: E501
        """Create Workflow  # noqa: E501

        This API is used to add a PnP Workflow along with the relevant tasks in the workflow into the PnP database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_workflow_post(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param Workflow request: request (required)
        :return: CreateWorkflowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_onboarding_pnp_workflow_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_onboarding_pnp_workflow_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def api_v1_onboarding_pnp_workflow_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create Workflow  # noqa: E501

        This API is used to add a PnP Workflow along with the relevant tasks in the workflow into the PnP database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_onboarding_pnp_workflow_post_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param Workflow request: request (required)
        :return: CreateWorkflowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_onboarding_pnp_workflow_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `api_v1_onboarding_pnp_workflow_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/onboarding/pnp-workflow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateWorkflowResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
