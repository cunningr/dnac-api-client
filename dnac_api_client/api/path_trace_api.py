# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dnac_api_client.api_client import ApiClient


class PathTraceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_flow_analysis_flow_analysis_id_delete(self, flow_analysis_id, **kwargs):  # noqa: E501
        """Deletes a flow analysis request  # noqa: E501

        Deletes a flow analysis request by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_flow_analysis_flow_analysis_id_delete(flow_analysis_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str flow_analysis_id: Flow analysis request id (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_flow_analysis_flow_analysis_id_delete_with_http_info(flow_analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_flow_analysis_flow_analysis_id_delete_with_http_info(flow_analysis_id, **kwargs)  # noqa: E501
            return data

    def api_v1_flow_analysis_flow_analysis_id_delete_with_http_info(self, flow_analysis_id, **kwargs):  # noqa: E501
        """Deletes a flow analysis request  # noqa: E501

        Deletes a flow analysis request by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_flow_analysis_flow_analysis_id_delete_with_http_info(flow_analysis_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str flow_analysis_id: Flow analysis request id (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow_analysis_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_flow_analysis_flow_analysis_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flow_analysis_id' is set
        if ('flow_analysis_id' not in params or
                params['flow_analysis_id'] is None):
            raise ValueError("Missing the required parameter `flow_analysis_id` when calling `api_v1_flow_analysis_flow_analysis_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'flow_analysis_id' in params:
            path_params['flowAnalysisId'] = params['flow_analysis_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/flow-analysis/{flowAnalysisId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_flow_analysis_flow_analysis_id_get(self, flow_analysis_id, **kwargs):  # noqa: E501
        """Retrieves result of a previously requested flow analysis  # noqa: E501

        Retrieves result of a previously requested flow analysis by its Flow Analysis id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_flow_analysis_flow_analysis_id_get(flow_analysis_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str flow_analysis_id: Flow analysis request id (required)
        :return: PathResponseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_flow_analysis_flow_analysis_id_get_with_http_info(flow_analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_flow_analysis_flow_analysis_id_get_with_http_info(flow_analysis_id, **kwargs)  # noqa: E501
            return data

    def api_v1_flow_analysis_flow_analysis_id_get_with_http_info(self, flow_analysis_id, **kwargs):  # noqa: E501
        """Retrieves result of a previously requested flow analysis  # noqa: E501

        Retrieves result of a previously requested flow analysis by its Flow Analysis id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_flow_analysis_flow_analysis_id_get_with_http_info(flow_analysis_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str flow_analysis_id: Flow analysis request id (required)
        :return: PathResponseResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow_analysis_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_flow_analysis_flow_analysis_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flow_analysis_id' is set
        if ('flow_analysis_id' not in params or
                params['flow_analysis_id'] is None):
            raise ValueError("Missing the required parameter `flow_analysis_id` when calling `api_v1_flow_analysis_flow_analysis_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'flow_analysis_id' in params:
            path_params['flowAnalysisId'] = params['flow_analysis_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/flow-analysis/{flowAnalysisId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PathResponseResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_flow_analysis_get(self, **kwargs):  # noqa: E501
        """Retrieves a summary of all flow analyses stored  # noqa: E501

        Retrieves a summary of all flow analyses stored. Filters the results by given parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_flow_analysis_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool periodic_refresh: Is analysis periodically refreshed?
        :param str source_ip: Source IP address
        :param str dest_ip: Destination IP adress
        :param str source_port: Source port
        :param str dest_port: Destination port
        :param str gt_create_time: Analyses requested after this time
        :param str lt_create_time: Analyses requested before this time
        :param str protocol: Protocol
        :param str status: Status
        :param str task_id: Task ID
        :param str last_update_time: Last update time
        :param str limit: Number of resources returned
        :param str offset: Start index of resources returned (1-based)
        :param str order: Order by this field
        :param str sort_by: Sort by this field
        :return: FlowAnalysisListOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_flow_analysis_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_flow_analysis_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_flow_analysis_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves a summary of all flow analyses stored  # noqa: E501

        Retrieves a summary of all flow analyses stored. Filters the results by given parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_flow_analysis_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool periodic_refresh: Is analysis periodically refreshed?
        :param str source_ip: Source IP address
        :param str dest_ip: Destination IP adress
        :param str source_port: Source port
        :param str dest_port: Destination port
        :param str gt_create_time: Analyses requested after this time
        :param str lt_create_time: Analyses requested before this time
        :param str protocol: Protocol
        :param str status: Status
        :param str task_id: Task ID
        :param str last_update_time: Last update time
        :param str limit: Number of resources returned
        :param str offset: Start index of resources returned (1-based)
        :param str order: Order by this field
        :param str sort_by: Sort by this field
        :return: FlowAnalysisListOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['periodic_refresh', 'source_ip', 'dest_ip', 'source_port', 'dest_port', 'gt_create_time', 'lt_create_time', 'protocol', 'status', 'task_id', 'last_update_time', 'limit', 'offset', 'order', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_flow_analysis_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'periodic_refresh' in params:
            query_params.append(('periodicRefresh', params['periodic_refresh']))  # noqa: E501
        if 'source_ip' in params:
            query_params.append(('sourceIP', params['source_ip']))  # noqa: E501
        if 'dest_ip' in params:
            query_params.append(('destIP', params['dest_ip']))  # noqa: E501
        if 'source_port' in params:
            query_params.append(('sourcePort', params['source_port']))  # noqa: E501
        if 'dest_port' in params:
            query_params.append(('destPort', params['dest_port']))  # noqa: E501
        if 'gt_create_time' in params:
            query_params.append(('gtCreateTime', params['gt_create_time']))  # noqa: E501
        if 'lt_create_time' in params:
            query_params.append(('ltCreateTime', params['lt_create_time']))  # noqa: E501
        if 'protocol' in params:
            query_params.append(('protocol', params['protocol']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'task_id' in params:
            query_params.append(('taskId', params['task_id']))  # noqa: E501
        if 'last_update_time' in params:
            query_params.append(('lastUpdateTime', params['last_update_time']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/flow-analysis', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FlowAnalysisListOutput',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_flow_analysis_post(self, request, **kwargs):  # noqa: E501
        """Initiates a new flow analysis  # noqa: E501

        Initiates a new flow analysis with periodic refresh and stat collection options. Returns a request id and a task id to get results and follow progress.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_flow_analysis_post(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param FlowAnalysisRequest request: request (required)
        :return: FlowAnalysisRequestResultOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_flow_analysis_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_flow_analysis_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def api_v1_flow_analysis_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Initiates a new flow analysis  # noqa: E501

        Initiates a new flow analysis with periodic refresh and stat collection options. Returns a request id and a task id to get results and follow progress.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_flow_analysis_post_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param FlowAnalysisRequest request: request (required)
        :return: FlowAnalysisRequestResultOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_flow_analysis_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `api_v1_flow_analysis_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/flow-analysis', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FlowAnalysisRequestResultOutput',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
