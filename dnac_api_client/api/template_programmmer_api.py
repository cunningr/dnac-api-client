# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dnac_api_client.api_client import ApiClient


class TemplateProgrammmerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_template_programmer_project_get(self, **kwargs):  # noqa: E501
        """Gets a list of projects  # noqa: E501

        List the projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_project_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of project to be searched
        :return: CollectionProjectDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_template_programmer_project_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_template_programmer_project_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_template_programmer_project_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of projects  # noqa: E501

        List the projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_project_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of project to be searched
        :return: CollectionProjectDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_template_programmer_project_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/project', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionProjectDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_template_programmer_project_post(self, project_dto, **kwargs):  # noqa: E501
        """Create Project  # noqa: E501

        This API is used to create a new project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_project_post(project_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectDTO project_dto: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_template_programmer_project_post_with_http_info(project_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_template_programmer_project_post_with_http_info(project_dto, **kwargs)  # noqa: E501
            return data

    def api_v1_template_programmer_project_post_with_http_info(self, project_dto, **kwargs):  # noqa: E501
        """Create Project  # noqa: E501

        This API is used to create a new project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_project_post_with_http_info(project_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectDTO project_dto: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_template_programmer_project_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_dto' is set
        if ('project_dto' not in local_var_params or
                local_var_params['project_dto'] is None):
            raise ValueError("Missing the required parameter `project_dto` when calling `api_v1_template_programmer_project_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'project_dto' in local_var_params:
            body_params = local_var_params['project_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/project', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_template_programmer_project_project_id_delete(self, project_id, **kwargs):  # noqa: E501
        """Deletes the project  # noqa: E501

        Deletes the project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_project_project_id_delete(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: projectId (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_template_programmer_project_project_id_delete_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_template_programmer_project_project_id_delete_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_template_programmer_project_project_id_delete_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Deletes the project  # noqa: E501

        Deletes the project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_project_project_id_delete_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: projectId (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_template_programmer_project_project_id_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_template_programmer_project_project_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in local_var_params:
            path_params['projectId'] = local_var_params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/project/{projectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_template_programmer_project_project_id_template_post(self, project_id, template_dto, **kwargs):  # noqa: E501
        """Create Template  # noqa: E501

        API to create a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_project_project_id_template_post(project_id, template_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: projectId (required)
        :param TemplateDTO template_dto: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_template_programmer_project_project_id_template_post_with_http_info(project_id, template_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_template_programmer_project_project_id_template_post_with_http_info(project_id, template_dto, **kwargs)  # noqa: E501
            return data

    def api_v1_template_programmer_project_project_id_template_post_with_http_info(self, project_id, template_dto, **kwargs):  # noqa: E501
        """Create Template  # noqa: E501

        API to create a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_project_project_id_template_post_with_http_info(project_id, template_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: projectId (required)
        :param TemplateDTO template_dto: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'template_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_template_programmer_project_project_id_template_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in local_var_params or
                local_var_params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_template_programmer_project_project_id_template_post`")  # noqa: E501
        # verify the required parameter 'template_dto' is set
        if ('template_dto' not in local_var_params or
                local_var_params['template_dto'] is None):
            raise ValueError("Missing the required parameter `template_dto` when calling `api_v1_template_programmer_project_project_id_template_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in local_var_params:
            path_params['projectId'] = local_var_params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template_dto' in local_var_params:
            body_params = local_var_params['template_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/project/{projectId}/template', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_template_programmer_project_put(self, project_dto, **kwargs):  # noqa: E501
        """Update Project  # noqa: E501

        This API is used to update an existing project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_project_put(project_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectDTO project_dto: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_template_programmer_project_put_with_http_info(project_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_template_programmer_project_put_with_http_info(project_dto, **kwargs)  # noqa: E501
            return data

    def api_v1_template_programmer_project_put_with_http_info(self, project_dto, **kwargs):  # noqa: E501
        """Update Project  # noqa: E501

        This API is used to update an existing project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_project_put_with_http_info(project_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectDTO project_dto: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_template_programmer_project_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_dto' is set
        if ('project_dto' not in local_var_params or
                local_var_params['project_dto'] is None):
            raise ValueError("Missing the required parameter `project_dto` when calling `api_v1_template_programmer_project_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'project_dto' in local_var_params:
            body_params = local_var_params['project_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/project', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_template_programmer_template_deploy_post(self, template_deployment_info, **kwargs):  # noqa: E501
        """Deploy Template  # noqa: E501

        API to deploy a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_deploy_post(template_deployment_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateDeploymentInfo template_deployment_info: request (required)
        :return: TemplateDeploymentStatusDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_template_programmer_template_deploy_post_with_http_info(template_deployment_info, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_template_programmer_template_deploy_post_with_http_info(template_deployment_info, **kwargs)  # noqa: E501
            return data

    def api_v1_template_programmer_template_deploy_post_with_http_info(self, template_deployment_info, **kwargs):  # noqa: E501
        """Deploy Template  # noqa: E501

        API to deploy a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_deploy_post_with_http_info(template_deployment_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateDeploymentInfo template_deployment_info: request (required)
        :return: TemplateDeploymentStatusDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_deployment_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_template_programmer_template_deploy_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_deployment_info' is set
        if ('template_deployment_info' not in local_var_params or
                local_var_params['template_deployment_info'] is None):
            raise ValueError("Missing the required parameter `template_deployment_info` when calling `api_v1_template_programmer_template_deploy_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template_deployment_info' in local_var_params:
            body_params = local_var_params['template_deployment_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template/deploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateDeploymentStatusDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_template_programmer_template_deploy_status_deployment_id_get(self, deployment_id, **kwargs):  # noqa: E501
        """Status of template deployment  # noqa: E501

        API to retrieve the status of template deployment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_deploy_status_deployment_id_get(deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_id: deploymentId (required)
        :return: TemplateDeploymentStatusDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_template_programmer_template_deploy_status_deployment_id_get_with_http_info(deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_template_programmer_template_deploy_status_deployment_id_get_with_http_info(deployment_id, **kwargs)  # noqa: E501
            return data

    def api_v1_template_programmer_template_deploy_status_deployment_id_get_with_http_info(self, deployment_id, **kwargs):  # noqa: E501
        """Status of template deployment  # noqa: E501

        API to retrieve the status of template deployment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_deploy_status_deployment_id_get_with_http_info(deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_id: deploymentId (required)
        :return: TemplateDeploymentStatusDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['deployment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_template_programmer_template_deploy_status_deployment_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in local_var_params or
                local_var_params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `api_v1_template_programmer_template_deploy_status_deployment_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_id' in local_var_params:
            path_params['deploymentId'] = local_var_params['deployment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template/deploy/status/{deploymentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateDeploymentStatusDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_template_programmer_template_get(self, **kwargs):  # noqa: E501
        """Gets the templates available depending on the criteria  # noqa: E501

        Gets the templates available depending on the criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: projectId
        :param str software_type: softwareType
        :param str software_version: softwareVersion
        :param str product_family: productFamily
        :param str product_series: productSeries
        :param str product_type: productType
        :param bool include_head: includeHead
        :param bool filter_conflicting_templates: filterConflictingTemplates
        :return: CollectionTemplateInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_template_programmer_template_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_template_programmer_template_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_template_programmer_template_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the templates available depending on the criteria  # noqa: E501

        Gets the templates available depending on the criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: projectId
        :param str software_type: softwareType
        :param str software_version: softwareVersion
        :param str product_family: productFamily
        :param str product_series: productSeries
        :param str product_type: productType
        :param bool include_head: includeHead
        :param bool filter_conflicting_templates: filterConflictingTemplates
        :return: CollectionTemplateInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_id', 'software_type', 'software_version', 'product_family', 'product_series', 'product_type', 'include_head', 'filter_conflicting_templates']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_template_programmer_template_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in local_var_params:
            query_params.append(('projectId', local_var_params['project_id']))  # noqa: E501
        if 'software_type' in local_var_params:
            query_params.append(('softwareType', local_var_params['software_type']))  # noqa: E501
        if 'software_version' in local_var_params:
            query_params.append(('softwareVersion', local_var_params['software_version']))  # noqa: E501
        if 'product_family' in local_var_params:
            query_params.append(('productFamily', local_var_params['product_family']))  # noqa: E501
        if 'product_series' in local_var_params:
            query_params.append(('productSeries', local_var_params['product_series']))  # noqa: E501
        if 'product_type' in local_var_params:
            query_params.append(('productType', local_var_params['product_type']))  # noqa: E501
        if 'include_head' in local_var_params:
            query_params.append(('includeHead', local_var_params['include_head']))  # noqa: E501
        if 'filter_conflicting_templates' in local_var_params:
            query_params.append(('filterConflictingTemplates', local_var_params['filter_conflicting_templates']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionTemplateInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_template_programmer_template_preview_put(self, template_preview_request_dto, **kwargs):  # noqa: E501
        """Preview Template  # noqa: E501

        API to preview a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_preview_put(template_preview_request_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplatePreviewRequestDTO template_preview_request_dto: request (required)
        :return: TemplatePreviewResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_template_programmer_template_preview_put_with_http_info(template_preview_request_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_template_programmer_template_preview_put_with_http_info(template_preview_request_dto, **kwargs)  # noqa: E501
            return data

    def api_v1_template_programmer_template_preview_put_with_http_info(self, template_preview_request_dto, **kwargs):  # noqa: E501
        """Preview Template  # noqa: E501

        API to preview a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_preview_put_with_http_info(template_preview_request_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplatePreviewRequestDTO template_preview_request_dto: request (required)
        :return: TemplatePreviewResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_preview_request_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_template_programmer_template_preview_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_preview_request_dto' is set
        if ('template_preview_request_dto' not in local_var_params or
                local_var_params['template_preview_request_dto'] is None):
            raise ValueError("Missing the required parameter `template_preview_request_dto` when calling `api_v1_template_programmer_template_preview_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template_preview_request_dto' in local_var_params:
            body_params = local_var_params['template_preview_request_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template/preview', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplatePreviewResponseDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_template_programmer_template_put(self, template_dto, **kwargs):  # noqa: E501
        """Update Template  # noqa: E501

        API to update a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_put(template_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateDTO template_dto: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_template_programmer_template_put_with_http_info(template_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_template_programmer_template_put_with_http_info(template_dto, **kwargs)  # noqa: E501
            return data

    def api_v1_template_programmer_template_put_with_http_info(self, template_dto, **kwargs):  # noqa: E501
        """Update Template  # noqa: E501

        API to update a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_put_with_http_info(template_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateDTO template_dto: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_template_programmer_template_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_dto' is set
        if ('template_dto' not in local_var_params or
                local_var_params['template_dto'] is None):
            raise ValueError("Missing the required parameter `template_dto` when calling `api_v1_template_programmer_template_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template_dto' in local_var_params:
            body_params = local_var_params['template_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_template_programmer_template_template_id_delete(self, template_id, **kwargs):  # noqa: E501
        """Deletes the template  # noqa: E501

        Deletes the template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_template_id_delete(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: templateId (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_template_programmer_template_template_id_delete_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_template_programmer_template_template_id_delete_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def api_v1_template_programmer_template_template_id_delete_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Deletes the template  # noqa: E501

        Deletes the template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_template_id_delete_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: templateId (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_template_programmer_template_template_id_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in local_var_params or
                local_var_params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `api_v1_template_programmer_template_template_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in local_var_params:
            path_params['templateId'] = local_var_params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template/{templateId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_template_programmer_template_template_id_get(self, template_id, **kwargs):  # noqa: E501
        """Gets details of a given template  # noqa: E501

        Details of the template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_template_id_get(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: templateId (required)
        :return: TemplateDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_template_programmer_template_template_id_get_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_template_programmer_template_template_id_get_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def api_v1_template_programmer_template_template_id_get_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Gets details of a given template  # noqa: E501

        Details of the template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_template_id_get_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: templateId (required)
        :return: TemplateDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_template_programmer_template_template_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in local_var_params or
                local_var_params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `api_v1_template_programmer_template_template_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in local_var_params:
            path_params['templateId'] = local_var_params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template/{templateId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_template_programmer_template_version_post(self, template_version_request_dto, **kwargs):  # noqa: E501
        """Version Template  # noqa: E501

        API to version the current contents of the template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_version_post(template_version_request_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateVersionRequestDTO template_version_request_dto: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_template_programmer_template_version_post_with_http_info(template_version_request_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_template_programmer_template_version_post_with_http_info(template_version_request_dto, **kwargs)  # noqa: E501
            return data

    def api_v1_template_programmer_template_version_post_with_http_info(self, template_version_request_dto, **kwargs):  # noqa: E501
        """Version Template  # noqa: E501

        API to version the current contents of the template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_version_post_with_http_info(template_version_request_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TemplateVersionRequestDTO template_version_request_dto: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_version_request_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_template_programmer_template_version_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_version_request_dto' is set
        if ('template_version_request_dto' not in local_var_params or
                local_var_params['template_version_request_dto'] is None):
            raise ValueError("Missing the required parameter `template_version_request_dto` when calling `api_v1_template_programmer_template_version_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template_version_request_dto' in local_var_params:
            body_params = local_var_params['template_version_request_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template/version', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_template_programmer_template_version_template_id_get(self, template_id, **kwargs):  # noqa: E501
        """Gets all the versions of a given template  # noqa: E501

        Get all the versions of template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_version_template_id_get(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: templateId (required)
        :return: CollectionTemplateInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_template_programmer_template_version_template_id_get_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_template_programmer_template_version_template_id_get_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def api_v1_template_programmer_template_version_template_id_get_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Gets all the versions of a given template  # noqa: E501

        Get all the versions of template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_template_programmer_template_version_template_id_get_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: templateId (required)
        :return: CollectionTemplateInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_template_programmer_template_version_template_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in local_var_params or
                local_var_params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `api_v1_template_programmer_template_version_template_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in local_var_params:
            path_params['templateId'] = local_var_params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template/version/{templateId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionTemplateInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
