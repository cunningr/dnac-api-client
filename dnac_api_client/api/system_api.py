# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dnac_api_client.api_client import ApiClient


class SystemApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_file_file_id_get(self, file_id, **kwargs):  # noqa: E501
        """Downloads a file referred by the fileId  # noqa: E501

        This method is used to download a file referred by the fileId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_file_file_id_get(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_id: File Identification number (required)
        :return: DownloadsAFileReferredByTheFileIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_file_file_id_get_with_http_info(file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_file_file_id_get_with_http_info(file_id, **kwargs)  # noqa: E501
            return data

    def api_v1_file_file_id_get_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """Downloads a file referred by the fileId  # noqa: E501

        This method is used to download a file referred by the fileId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_file_file_id_get_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_id: File Identification number (required)
        :return: DownloadsAFileReferredByTheFileIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_file_file_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'file_id' is set
        if ('file_id' not in local_var_params or
                local_var_params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `api_v1_file_file_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in local_var_params:
            path_params['fileId'] = local_var_params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/file/{fileId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DownloadsAFileReferredByTheFileIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_file_namespace_get(self, **kwargs):  # noqa: E501
        """Returns list of available namespaces  # noqa: E501

        This method is used to obtain a list of available namespaces  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_file_namespace_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NameSpaceListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_file_namespace_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_file_namespace_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_file_namespace_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns list of available namespaces  # noqa: E501

        This method is used to obtain a list of available namespaces  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_file_namespace_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NameSpaceListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_file_namespace_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/file/namespace', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NameSpaceListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_file_namespace_name_space_get(self, name_space, **kwargs):  # noqa: E501
        """Returns list of files under a specific namespace  # noqa: E501

        This method is used to obtain a list of files under a specific namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_file_namespace_name_space_get(name_space, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name_space: A listing of fileId's (required)
        :return: FileObjectListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_file_namespace_name_space_get_with_http_info(name_space, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_file_namespace_name_space_get_with_http_info(name_space, **kwargs)  # noqa: E501
            return data

    def api_v1_file_namespace_name_space_get_with_http_info(self, name_space, **kwargs):  # noqa: E501
        """Returns list of files under a specific namespace  # noqa: E501

        This method is used to obtain a list of files under a specific namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_file_namespace_name_space_get_with_http_info(name_space, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name_space: A listing of fileId's (required)
        :return: FileObjectListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['name_space']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_file_namespace_name_space_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name_space' is set
        if ('name_space' not in local_var_params or
                local_var_params['name_space'] is None):
            raise ValueError("Missing the required parameter `name_space` when calling `api_v1_file_namespace_name_space_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name_space' in local_var_params:
            path_params['nameSpace'] = local_var_params['name_space']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/file/namespace/{nameSpace}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileObjectListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
