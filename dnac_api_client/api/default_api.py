# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dnac_api_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_system_v1_maglev_backup_backup_id_delete(self, backup_id, **kwargs):  # noqa: E501
        """Delete a restore point  # noqa: E501

        Delete the restore point with given BackupId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_backup_backup_id_delete(backup_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backup_id: UUID of Backup to restore (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_system_v1_maglev_backup_backup_id_delete_with_http_info(backup_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_system_v1_maglev_backup_backup_id_delete_with_http_info(backup_id, **kwargs)  # noqa: E501
            return data

    def api_system_v1_maglev_backup_backup_id_delete_with_http_info(self, backup_id, **kwargs):  # noqa: E501
        """Delete a restore point  # noqa: E501

        Delete the restore point with given BackupId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_backup_backup_id_delete_with_http_info(backup_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backup_id: UUID of Backup to restore (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['backup_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_system_v1_maglev_backup_backup_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'backup_id' is set
        if ('backup_id' not in params or
                params['backup_id'] is None):
            raise ValueError("Missing the required parameter `backup_id` when calling `api_system_v1_maglev_backup_backup_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'backup_id' in params:
            path_params['BackupId'] = params['backup_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/system/v1/maglev/backup/{BackupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_system_v1_maglev_backup_get(self, **kwargs):  # noqa: E501
        """Configured Backup Destination  # noqa: E501

        Fetches the configured backup destination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_backup_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: BackupDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_system_v1_maglev_backup_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_system_v1_maglev_backup_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_system_v1_maglev_backup_get_with_http_info(self, **kwargs):  # noqa: E501
        """Configured Backup Destination  # noqa: E501

        Fetches the configured backup destination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_backup_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: BackupDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_system_v1_maglev_backup_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/system/v1/maglev/backup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BackupDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_system_v1_maglev_backup_history_get(self, **kwargs):  # noqa: E501
        """Backup History  # noqa: E501

        Fetches the backup history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_backup_history_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_system_v1_maglev_backup_history_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_system_v1_maglev_backup_history_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_system_v1_maglev_backup_history_get_with_http_info(self, **kwargs):  # noqa: E501
        """Backup History  # noqa: E501

        Fetches the backup history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_backup_history_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_system_v1_maglev_backup_history_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/system/v1/maglev/backup/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_system_v1_maglev_backup_post(self, backup, **kwargs):  # noqa: E501
        """Creates a new Backup Point  # noqa: E501

        Initiates a new backup job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_backup_post(backup, async=True)
        >>> result = thread.get()

        :param async bool
        :param Backup backup: Description of Backup point (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_system_v1_maglev_backup_post_with_http_info(backup, **kwargs)  # noqa: E501
        else:
            (data) = self.api_system_v1_maglev_backup_post_with_http_info(backup, **kwargs)  # noqa: E501
            return data

    def api_system_v1_maglev_backup_post_with_http_info(self, backup, **kwargs):  # noqa: E501
        """Creates a new Backup Point  # noqa: E501

        Initiates a new backup job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_backup_post_with_http_info(backup, async=True)
        >>> result = thread.get()

        :param async bool
        :param Backup backup: Description of Backup point (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['backup']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_system_v1_maglev_backup_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'backup' is set
        if ('backup' not in params or
                params['backup'] is None):
            raise ValueError("Missing the required parameter `backup` when calling `api_system_v1_maglev_backup_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'backup' in params:
            body_params = params['backup']
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/system/v1/maglev/backup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_system_v1_maglev_backup_progress_get(self, **kwargs):  # noqa: E501
        """Backup Progress  # noqa: E501

        Fetches the backup progress  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_backup_progress_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_system_v1_maglev_backup_progress_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_system_v1_maglev_backup_progress_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_system_v1_maglev_backup_progress_get_with_http_info(self, **kwargs):  # noqa: E501
        """Backup Progress  # noqa: E501

        Fetches the backup progress  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_backup_progress_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_system_v1_maglev_backup_progress_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/system/v1/maglev/backup/progress', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_system_v1_maglev_backup_remote_settings_get(self, **kwargs):  # noqa: E501
        """Configured Backup Destination  # noqa: E501

        Fetches the configured backup destination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_backup_remote_settings_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: BackupRemote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_system_v1_maglev_backup_remote_settings_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_system_v1_maglev_backup_remote_settings_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_system_v1_maglev_backup_remote_settings_get_with_http_info(self, **kwargs):  # noqa: E501
        """Configured Backup Destination  # noqa: E501

        Fetches the configured backup destination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_backup_remote_settings_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: BackupRemote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_system_v1_maglev_backup_remote_settings_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/system/v1/maglev/backup/remote/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BackupRemote',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_system_v1_maglev_backup_remote_settings_put(self, backup_remote, **kwargs):  # noqa: E501
        """Updates Backup Server details  # noqa: E501

        Updates the remote backup server details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_backup_remote_settings_put(backup_remote, async=True)
        >>> result = thread.get()

        :param async bool
        :param BackupRemote backup_remote: Bacup Remote Detais (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_system_v1_maglev_backup_remote_settings_put_with_http_info(backup_remote, **kwargs)  # noqa: E501
        else:
            (data) = self.api_system_v1_maglev_backup_remote_settings_put_with_http_info(backup_remote, **kwargs)  # noqa: E501
            return data

    def api_system_v1_maglev_backup_remote_settings_put_with_http_info(self, backup_remote, **kwargs):  # noqa: E501
        """Updates Backup Server details  # noqa: E501

        Updates the remote backup server details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_backup_remote_settings_put_with_http_info(backup_remote, async=True)
        >>> result = thread.get()

        :param async bool
        :param BackupRemote backup_remote: Bacup Remote Detais (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['backup_remote']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_system_v1_maglev_backup_remote_settings_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'backup_remote' is set
        if ('backup_remote' not in params or
                params['backup_remote'] is None):
            raise ValueError("Missing the required parameter `backup_remote` when calling `api_system_v1_maglev_backup_remote_settings_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'backup_remote' in params:
            body_params = params['backup_remote']
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/system/v1/maglev/backup/remote/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_system_v1_maglev_restore_backup_id_post(self, backup_id, **kwargs):  # noqa: E501
        """Initiate Restore  # noqa: E501

        Initiate Restore of given BackupId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_restore_backup_id_post(backup_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backup_id: UUID of Backup to restore (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_system_v1_maglev_restore_backup_id_post_with_http_info(backup_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_system_v1_maglev_restore_backup_id_post_with_http_info(backup_id, **kwargs)  # noqa: E501
            return data

    def api_system_v1_maglev_restore_backup_id_post_with_http_info(self, backup_id, **kwargs):  # noqa: E501
        """Initiate Restore  # noqa: E501

        Initiate Restore of given BackupId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_system_v1_maglev_restore_backup_id_post_with_http_info(backup_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backup_id: UUID of Backup to restore (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['backup_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_system_v1_maglev_restore_backup_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'backup_id' is set
        if ('backup_id' not in params or
                params['backup_id'] is None):
            raise ValueError("Missing the required parameter `backup_id` when calling `api_system_v1_maglev_restore_backup_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'backup_id' in params:
            path_params['BackupId'] = params['backup_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/system/v1/maglev/restore/{BackupId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_group_count_get(self, **kwargs):  # noqa: E501
        """Returns the Site groups  # noqa: E501

        Returns the Site groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_group_count_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_type: groupName (Optional)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_group_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_group_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_group_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the Site groups  # noqa: E501

        Returns the Site groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_group_count_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_type: groupName (Optional)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_group_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group_type' in params:
            query_params.append(('groupType', params['group_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/group/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_group_get(self, **kwargs):  # noqa: E501
        """Returns the Site groups  # noqa: E501

        Returns the Site groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_group_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_name: groupName (Optional)
        :param str group_type: groupType (Optional)
        :param str field: field (Optional)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_group_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_group_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_group_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the Site groups  # noqa: E501

        Returns the Site groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_group_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_name: groupName (Optional)
        :param str group_type: groupType (Optional)
        :param str field: field (Optional)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_name', 'group_type', 'field']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_group_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group_name' in params:
            query_params.append(('groupName', params['group_name']))  # noqa: E501
        if 'group_type' in params:
            query_params.append(('groupType', params['group_type']))  # noqa: E501
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_groupgroup_id_delete(self, group_id, **kwargs):  # noqa: E501
        """Deletes a group from DNAC  # noqa: E501

        Deletes a group from DNAC  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_groupgroup_id_delete(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: UID of group to delete (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v1_groupgroup_id_delete_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_groupgroup_id_delete_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def api_v1_groupgroup_id_delete_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """Deletes a group from DNAC  # noqa: E501

        Deletes a group from DNAC  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v1_groupgroup_id_delete_with_http_info(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: UID of group to delete (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_groupgroup_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `api_v1_groupgroup_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/group{groupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_ippool_get(self, **kwargs):  # noqa: E501
        """Fetches a list of configured IP Pools  # noqa: E501

        Fetches all IP Pools.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v2_ippool_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v2_ippool_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_ippool_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_ippool_get_with_http_info(self, **kwargs):  # noqa: E501
        """Fetches a list of configured IP Pools  # noqa: E501

        Fetches all IP Pools.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v2_ippool_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_ippool_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/ippool', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_ippool_pool_id_delete(self, pool_id, **kwargs):  # noqa: E501
        """Deletes an IP pool to DNAC  # noqa: E501

        Deletes an IP Pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v2_ippool_pool_id_delete(pool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str pool_id: UID of IP Pool to delete (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v2_ippool_pool_id_delete_with_http_info(pool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_ippool_pool_id_delete_with_http_info(pool_id, **kwargs)  # noqa: E501
            return data

    def api_v2_ippool_pool_id_delete_with_http_info(self, pool_id, **kwargs):  # noqa: E501
        """Deletes an IP pool to DNAC  # noqa: E501

        Deletes an IP Pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v2_ippool_pool_id_delete_with_http_info(pool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str pool_id: UID of IP Pool to delete (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_ippool_pool_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_id' is set
        if ('pool_id' not in params or
                params['pool_id'] is None):
            raise ValueError("Missing the required parameter `pool_id` when calling `api_v2_ippool_pool_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pool_id' in params:
            path_params['poolId'] = params['pool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/ippool/{poolId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_ippool_post(self, ippool, **kwargs):  # noqa: E501
        """Adds an IP pool to DNAC  # noqa: E501

        Creates an IP Pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v2_ippool_post(ippool, async=True)
        >>> result = thread.get()

        :param async bool
        :param Ippool ippool: IP pool object (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_v2_ippool_post_with_http_info(ippool, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_ippool_post_with_http_info(ippool, **kwargs)  # noqa: E501
            return data

    def api_v2_ippool_post_with_http_info(self, ippool, **kwargs):  # noqa: E501
        """Adds an IP pool to DNAC  # noqa: E501

        Creates an IP Pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_v2_ippool_post_with_http_info(ippool, async=True)
        >>> result = thread.get()

        :param async bool
        :param Ippool ippool: IP pool object (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ippool']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_ippool_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ippool' is set
        if ('ippool' not in params or
                params['ippool'] is None):
            raise ValueError("Missing the required parameter `ippool` when calling `api_v2_ippool_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ippool' in params:
            body_params = params['ippool']
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/ippool', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
