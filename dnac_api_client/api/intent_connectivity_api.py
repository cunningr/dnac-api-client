# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dnac_api_client.api_client import ApiClient


class IntentConnectivityApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def dna_intent_api_v1_create_ssid_post(self, request, **kwargs):  # noqa: E501
        """Create SSID  # noqa: E501

        Creates non fabric enterprise SSID, dynamic interface, Wireless Network Profile and provisions WLC and AP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_create_ssid_post(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateSSIDRequest request: request (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: CreateSSIDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dna_intent_api_v1_create_ssid_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_create_ssid_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_create_ssid_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create SSID  # noqa: E501

        Creates non fabric enterprise SSID, dynamic interface, Wireless Network Profile and provisions WLC and AP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_create_ssid_post_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateSSIDRequest request: request (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: CreateSSIDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_create_ssid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `dna_intent_api_v1_create_ssid_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/create-ssid', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateSSIDResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dna_intent_api_v1_delete_ssid_device_name_wireless_network_profile_name_ssid_name_interface_name_delete(self, device_name, wireless_network_profile_name, ssid_name, interface_name, **kwargs):  # noqa: E501
        """Delete SSID  # noqa: E501

        De-provision WLC, also removes wireless network profile, SSID and dynamic interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_delete_ssid_device_name_wireless_network_profile_name_ssid_name_interface_name_delete(device_name, wireless_network_profile_name, ssid_name, interface_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_name:  (required)
        :param str wireless_network_profile_name:  (required)
        :param str ssid_name:  (required)
        :param str interface_name:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: DeleteSSIDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dna_intent_api_v1_delete_ssid_device_name_wireless_network_profile_name_ssid_name_interface_name_delete_with_http_info(device_name, wireless_network_profile_name, ssid_name, interface_name, **kwargs)  # noqa: E501
        else:
            (data) = self.dna_intent_api_v1_delete_ssid_device_name_wireless_network_profile_name_ssid_name_interface_name_delete_with_http_info(device_name, wireless_network_profile_name, ssid_name, interface_name, **kwargs)  # noqa: E501
            return data

    def dna_intent_api_v1_delete_ssid_device_name_wireless_network_profile_name_ssid_name_interface_name_delete_with_http_info(self, device_name, wireless_network_profile_name, ssid_name, interface_name, **kwargs):  # noqa: E501
        """Delete SSID  # noqa: E501

        De-provision WLC, also removes wireless network profile, SSID and dynamic interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dna_intent_api_v1_delete_ssid_device_name_wireless_network_profile_name_ssid_name_interface_name_delete_with_http_info(device_name, wireless_network_profile_name, ssid_name, interface_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_name:  (required)
        :param str wireless_network_profile_name:  (required)
        :param str ssid_name:  (required)
        :param str interface_name:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: DeleteSSIDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_name', 'wireless_network_profile_name', 'ssid_name', 'interface_name', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dna_intent_api_v1_delete_ssid_device_name_wireless_network_profile_name_ssid_name_interface_name_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_name' is set
        if ('device_name' not in params or
                params['device_name'] is None):
            raise ValueError("Missing the required parameter `device_name` when calling `dna_intent_api_v1_delete_ssid_device_name_wireless_network_profile_name_ssid_name_interface_name_delete`")  # noqa: E501
        # verify the required parameter 'wireless_network_profile_name' is set
        if ('wireless_network_profile_name' not in params or
                params['wireless_network_profile_name'] is None):
            raise ValueError("Missing the required parameter `wireless_network_profile_name` when calling `dna_intent_api_v1_delete_ssid_device_name_wireless_network_profile_name_ssid_name_interface_name_delete`")  # noqa: E501
        # verify the required parameter 'ssid_name' is set
        if ('ssid_name' not in params or
                params['ssid_name'] is None):
            raise ValueError("Missing the required parameter `ssid_name` when calling `dna_intent_api_v1_delete_ssid_device_name_wireless_network_profile_name_ssid_name_interface_name_delete`")  # noqa: E501
        # verify the required parameter 'interface_name' is set
        if ('interface_name' not in params or
                params['interface_name'] is None):
            raise ValueError("Missing the required parameter `interface_name` when calling `dna_intent_api_v1_delete_ssid_device_name_wireless_network_profile_name_ssid_name_interface_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_name' in params:
            path_params['deviceName'] = params['device_name']  # noqa: E501
        if 'wireless_network_profile_name' in params:
            path_params['wirelessNetworkProfileName'] = params['wireless_network_profile_name']  # noqa: E501
        if 'ssid_name' in params:
            path_params['ssidName'] = params['ssid_name']  # noqa: E501
        if 'interface_name' in params:
            path_params['interfaceName'] = params['interface_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/delete-ssid/{deviceName}/{wirelessNetworkProfileName}/{ssidName}/{interfaceName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteSSIDResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
