# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dnac_api_client.models.discovery_nio_http_read_credential import DiscoveryNIOHttpReadCredential  # noqa: F401,E501


class DiscoveryNIOListResultResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_info': 'object',
        'cdp_level': 'int',
        'device_ids': 'str',
        'discovery_condition': 'str',
        'discovery_status': 'str',
        'discovery_type': 'str',
        'enable_password_list': 'str',
        'global_credential_id_list': 'list[str]',
        'http_read_credential': 'DiscoveryNIOHttpReadCredential',
        'http_write_credential': 'DiscoveryNIOHttpReadCredential',
        'id': 'str',
        'ip_address_list': 'str',
        'ip_filter_list': 'str',
        'is_auto_cdp': 'bool',
        'lldp_level': 'int',
        'name': 'str',
        'netconf_port': 'str',
        'num_devices': 'int',
        'parent_discovery_id': 'str',
        'password_list': 'str',
        'preferred_mgmt_ip_method': 'str',
        'protocol_order': 'str',
        'retry_count': 'int',
        'snmp_auth_passphrase': 'str',
        'snmp_auth_protocol': 'str',
        'snmp_mode': 'str',
        'snmp_priv_passphrase': 'str',
        'snmp_priv_protocol': 'str',
        'snmp_ro_community': 'str',
        'snmp_ro_community_desc': 'str',
        'snmp_rw_community': 'str',
        'snmp_rw_community_desc': 'str',
        'snmp_user_name': 'str',
        'time_out': 'int',
        'update_mgmt_ip': 'bool',
        'user_name_list': 'str'
    }

    attribute_map = {
        'attribute_info': 'attributeInfo',
        'cdp_level': 'cdpLevel',
        'device_ids': 'deviceIds',
        'discovery_condition': 'discoveryCondition',
        'discovery_status': 'discoveryStatus',
        'discovery_type': 'discoveryType',
        'enable_password_list': 'enablePasswordList',
        'global_credential_id_list': 'globalCredentialIdList',
        'http_read_credential': 'httpReadCredential',
        'http_write_credential': 'httpWriteCredential',
        'id': 'id',
        'ip_address_list': 'ipAddressList',
        'ip_filter_list': 'ipFilterList',
        'is_auto_cdp': 'isAutoCdp',
        'lldp_level': 'lldpLevel',
        'name': 'name',
        'netconf_port': 'netconfPort',
        'num_devices': 'numDevices',
        'parent_discovery_id': 'parentDiscoveryId',
        'password_list': 'passwordList',
        'preferred_mgmt_ip_method': 'preferredMgmtIPMethod',
        'protocol_order': 'protocolOrder',
        'retry_count': 'retryCount',
        'snmp_auth_passphrase': 'snmpAuthPassphrase',
        'snmp_auth_protocol': 'snmpAuthProtocol',
        'snmp_mode': 'snmpMode',
        'snmp_priv_passphrase': 'snmpPrivPassphrase',
        'snmp_priv_protocol': 'snmpPrivProtocol',
        'snmp_ro_community': 'snmpRoCommunity',
        'snmp_ro_community_desc': 'snmpRoCommunityDesc',
        'snmp_rw_community': 'snmpRwCommunity',
        'snmp_rw_community_desc': 'snmpRwCommunityDesc',
        'snmp_user_name': 'snmpUserName',
        'time_out': 'timeOut',
        'update_mgmt_ip': 'updateMgmtIp',
        'user_name_list': 'userNameList'
    }

    def __init__(self, attribute_info=None, cdp_level=None, device_ids=None, discovery_condition=None, discovery_status=None, discovery_type=None, enable_password_list=None, global_credential_id_list=None, http_read_credential=None, http_write_credential=None, id=None, ip_address_list=None, ip_filter_list=None, is_auto_cdp=None, lldp_level=None, name=None, netconf_port=None, num_devices=None, parent_discovery_id=None, password_list=None, preferred_mgmt_ip_method=None, protocol_order=None, retry_count=None, snmp_auth_passphrase=None, snmp_auth_protocol=None, snmp_mode=None, snmp_priv_passphrase=None, snmp_priv_protocol=None, snmp_ro_community=None, snmp_ro_community_desc=None, snmp_rw_community=None, snmp_rw_community_desc=None, snmp_user_name=None, time_out=None, update_mgmt_ip=None, user_name_list=None):  # noqa: E501
        """DiscoveryNIOListResultResponse - a model defined in Swagger"""  # noqa: E501

        self._attribute_info = None
        self._cdp_level = None
        self._device_ids = None
        self._discovery_condition = None
        self._discovery_status = None
        self._discovery_type = None
        self._enable_password_list = None
        self._global_credential_id_list = None
        self._http_read_credential = None
        self._http_write_credential = None
        self._id = None
        self._ip_address_list = None
        self._ip_filter_list = None
        self._is_auto_cdp = None
        self._lldp_level = None
        self._name = None
        self._netconf_port = None
        self._num_devices = None
        self._parent_discovery_id = None
        self._password_list = None
        self._preferred_mgmt_ip_method = None
        self._protocol_order = None
        self._retry_count = None
        self._snmp_auth_passphrase = None
        self._snmp_auth_protocol = None
        self._snmp_mode = None
        self._snmp_priv_passphrase = None
        self._snmp_priv_protocol = None
        self._snmp_ro_community = None
        self._snmp_ro_community_desc = None
        self._snmp_rw_community = None
        self._snmp_rw_community_desc = None
        self._snmp_user_name = None
        self._time_out = None
        self._update_mgmt_ip = None
        self._user_name_list = None
        self.discriminator = None

        if attribute_info is not None:
            self.attribute_info = attribute_info
        if cdp_level is not None:
            self.cdp_level = cdp_level
        if device_ids is not None:
            self.device_ids = device_ids
        if discovery_condition is not None:
            self.discovery_condition = discovery_condition
        if discovery_status is not None:
            self.discovery_status = discovery_status
        if discovery_type is not None:
            self.discovery_type = discovery_type
        if enable_password_list is not None:
            self.enable_password_list = enable_password_list
        if global_credential_id_list is not None:
            self.global_credential_id_list = global_credential_id_list
        if http_read_credential is not None:
            self.http_read_credential = http_read_credential
        if http_write_credential is not None:
            self.http_write_credential = http_write_credential
        if id is not None:
            self.id = id
        if ip_address_list is not None:
            self.ip_address_list = ip_address_list
        if ip_filter_list is not None:
            self.ip_filter_list = ip_filter_list
        if is_auto_cdp is not None:
            self.is_auto_cdp = is_auto_cdp
        if lldp_level is not None:
            self.lldp_level = lldp_level
        if name is not None:
            self.name = name
        if netconf_port is not None:
            self.netconf_port = netconf_port
        if num_devices is not None:
            self.num_devices = num_devices
        if parent_discovery_id is not None:
            self.parent_discovery_id = parent_discovery_id
        if password_list is not None:
            self.password_list = password_list
        if preferred_mgmt_ip_method is not None:
            self.preferred_mgmt_ip_method = preferred_mgmt_ip_method
        if protocol_order is not None:
            self.protocol_order = protocol_order
        if retry_count is not None:
            self.retry_count = retry_count
        if snmp_auth_passphrase is not None:
            self.snmp_auth_passphrase = snmp_auth_passphrase
        if snmp_auth_protocol is not None:
            self.snmp_auth_protocol = snmp_auth_protocol
        if snmp_mode is not None:
            self.snmp_mode = snmp_mode
        if snmp_priv_passphrase is not None:
            self.snmp_priv_passphrase = snmp_priv_passphrase
        if snmp_priv_protocol is not None:
            self.snmp_priv_protocol = snmp_priv_protocol
        if snmp_ro_community is not None:
            self.snmp_ro_community = snmp_ro_community
        if snmp_ro_community_desc is not None:
            self.snmp_ro_community_desc = snmp_ro_community_desc
        if snmp_rw_community is not None:
            self.snmp_rw_community = snmp_rw_community
        if snmp_rw_community_desc is not None:
            self.snmp_rw_community_desc = snmp_rw_community_desc
        if snmp_user_name is not None:
            self.snmp_user_name = snmp_user_name
        if time_out is not None:
            self.time_out = time_out
        if update_mgmt_ip is not None:
            self.update_mgmt_ip = update_mgmt_ip
        if user_name_list is not None:
            self.user_name_list = user_name_list

    @property
    def attribute_info(self):
        """Gets the attribute_info of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The attribute_info of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: object
        """
        return self._attribute_info

    @attribute_info.setter
    def attribute_info(self, attribute_info):
        """Sets the attribute_info of this DiscoveryNIOListResultResponse.


        :param attribute_info: The attribute_info of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: object
        """

        self._attribute_info = attribute_info

    @property
    def cdp_level(self):
        """Gets the cdp_level of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The cdp_level of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._cdp_level

    @cdp_level.setter
    def cdp_level(self, cdp_level):
        """Sets the cdp_level of this DiscoveryNIOListResultResponse.


        :param cdp_level: The cdp_level of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: int
        """

        self._cdp_level = cdp_level

    @property
    def device_ids(self):
        """Gets the device_ids of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The device_ids of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._device_ids

    @device_ids.setter
    def device_ids(self, device_ids):
        """Sets the device_ids of this DiscoveryNIOListResultResponse.


        :param device_ids: The device_ids of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._device_ids = device_ids

    @property
    def discovery_condition(self):
        """Gets the discovery_condition of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The discovery_condition of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._discovery_condition

    @discovery_condition.setter
    def discovery_condition(self, discovery_condition):
        """Sets the discovery_condition of this DiscoveryNIOListResultResponse.


        :param discovery_condition: The discovery_condition of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._discovery_condition = discovery_condition

    @property
    def discovery_status(self):
        """Gets the discovery_status of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The discovery_status of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._discovery_status

    @discovery_status.setter
    def discovery_status(self, discovery_status):
        """Sets the discovery_status of this DiscoveryNIOListResultResponse.


        :param discovery_status: The discovery_status of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._discovery_status = discovery_status

    @property
    def discovery_type(self):
        """Gets the discovery_type of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The discovery_type of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._discovery_type

    @discovery_type.setter
    def discovery_type(self, discovery_type):
        """Sets the discovery_type of this DiscoveryNIOListResultResponse.


        :param discovery_type: The discovery_type of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._discovery_type = discovery_type

    @property
    def enable_password_list(self):
        """Gets the enable_password_list of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The enable_password_list of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._enable_password_list

    @enable_password_list.setter
    def enable_password_list(self, enable_password_list):
        """Sets the enable_password_list of this DiscoveryNIOListResultResponse.


        :param enable_password_list: The enable_password_list of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._enable_password_list = enable_password_list

    @property
    def global_credential_id_list(self):
        """Gets the global_credential_id_list of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The global_credential_id_list of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._global_credential_id_list

    @global_credential_id_list.setter
    def global_credential_id_list(self, global_credential_id_list):
        """Sets the global_credential_id_list of this DiscoveryNIOListResultResponse.


        :param global_credential_id_list: The global_credential_id_list of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: list[str]
        """

        self._global_credential_id_list = global_credential_id_list

    @property
    def http_read_credential(self):
        """Gets the http_read_credential of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The http_read_credential of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: DiscoveryNIOHttpReadCredential
        """
        return self._http_read_credential

    @http_read_credential.setter
    def http_read_credential(self, http_read_credential):
        """Sets the http_read_credential of this DiscoveryNIOListResultResponse.


        :param http_read_credential: The http_read_credential of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: DiscoveryNIOHttpReadCredential
        """

        self._http_read_credential = http_read_credential

    @property
    def http_write_credential(self):
        """Gets the http_write_credential of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The http_write_credential of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: DiscoveryNIOHttpReadCredential
        """
        return self._http_write_credential

    @http_write_credential.setter
    def http_write_credential(self, http_write_credential):
        """Sets the http_write_credential of this DiscoveryNIOListResultResponse.


        :param http_write_credential: The http_write_credential of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: DiscoveryNIOHttpReadCredential
        """

        self._http_write_credential = http_write_credential

    @property
    def id(self):
        """Gets the id of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The id of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiscoveryNIOListResultResponse.


        :param id: The id of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip_address_list(self):
        """Gets the ip_address_list of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The ip_address_list of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._ip_address_list

    @ip_address_list.setter
    def ip_address_list(self, ip_address_list):
        """Sets the ip_address_list of this DiscoveryNIOListResultResponse.


        :param ip_address_list: The ip_address_list of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._ip_address_list = ip_address_list

    @property
    def ip_filter_list(self):
        """Gets the ip_filter_list of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The ip_filter_list of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._ip_filter_list

    @ip_filter_list.setter
    def ip_filter_list(self, ip_filter_list):
        """Sets the ip_filter_list of this DiscoveryNIOListResultResponse.


        :param ip_filter_list: The ip_filter_list of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._ip_filter_list = ip_filter_list

    @property
    def is_auto_cdp(self):
        """Gets the is_auto_cdp of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The is_auto_cdp of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_cdp

    @is_auto_cdp.setter
    def is_auto_cdp(self, is_auto_cdp):
        """Sets the is_auto_cdp of this DiscoveryNIOListResultResponse.


        :param is_auto_cdp: The is_auto_cdp of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: bool
        """

        self._is_auto_cdp = is_auto_cdp

    @property
    def lldp_level(self):
        """Gets the lldp_level of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The lldp_level of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._lldp_level

    @lldp_level.setter
    def lldp_level(self, lldp_level):
        """Sets the lldp_level of this DiscoveryNIOListResultResponse.


        :param lldp_level: The lldp_level of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: int
        """

        self._lldp_level = lldp_level

    @property
    def name(self):
        """Gets the name of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The name of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DiscoveryNIOListResultResponse.


        :param name: The name of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def netconf_port(self):
        """Gets the netconf_port of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The netconf_port of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._netconf_port

    @netconf_port.setter
    def netconf_port(self, netconf_port):
        """Sets the netconf_port of this DiscoveryNIOListResultResponse.


        :param netconf_port: The netconf_port of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._netconf_port = netconf_port

    @property
    def num_devices(self):
        """Gets the num_devices of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The num_devices of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_devices

    @num_devices.setter
    def num_devices(self, num_devices):
        """Sets the num_devices of this DiscoveryNIOListResultResponse.


        :param num_devices: The num_devices of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: int
        """

        self._num_devices = num_devices

    @property
    def parent_discovery_id(self):
        """Gets the parent_discovery_id of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The parent_discovery_id of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._parent_discovery_id

    @parent_discovery_id.setter
    def parent_discovery_id(self, parent_discovery_id):
        """Sets the parent_discovery_id of this DiscoveryNIOListResultResponse.


        :param parent_discovery_id: The parent_discovery_id of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._parent_discovery_id = parent_discovery_id

    @property
    def password_list(self):
        """Gets the password_list of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The password_list of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._password_list

    @password_list.setter
    def password_list(self, password_list):
        """Sets the password_list of this DiscoveryNIOListResultResponse.


        :param password_list: The password_list of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._password_list = password_list

    @property
    def preferred_mgmt_ip_method(self):
        """Gets the preferred_mgmt_ip_method of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The preferred_mgmt_ip_method of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._preferred_mgmt_ip_method

    @preferred_mgmt_ip_method.setter
    def preferred_mgmt_ip_method(self, preferred_mgmt_ip_method):
        """Sets the preferred_mgmt_ip_method of this DiscoveryNIOListResultResponse.


        :param preferred_mgmt_ip_method: The preferred_mgmt_ip_method of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._preferred_mgmt_ip_method = preferred_mgmt_ip_method

    @property
    def protocol_order(self):
        """Gets the protocol_order of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The protocol_order of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._protocol_order

    @protocol_order.setter
    def protocol_order(self, protocol_order):
        """Sets the protocol_order of this DiscoveryNIOListResultResponse.


        :param protocol_order: The protocol_order of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._protocol_order = protocol_order

    @property
    def retry_count(self):
        """Gets the retry_count of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The retry_count of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this DiscoveryNIOListResultResponse.


        :param retry_count: The retry_count of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: int
        """

        self._retry_count = retry_count

    @property
    def snmp_auth_passphrase(self):
        """Gets the snmp_auth_passphrase of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The snmp_auth_passphrase of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._snmp_auth_passphrase

    @snmp_auth_passphrase.setter
    def snmp_auth_passphrase(self, snmp_auth_passphrase):
        """Sets the snmp_auth_passphrase of this DiscoveryNIOListResultResponse.


        :param snmp_auth_passphrase: The snmp_auth_passphrase of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._snmp_auth_passphrase = snmp_auth_passphrase

    @property
    def snmp_auth_protocol(self):
        """Gets the snmp_auth_protocol of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The snmp_auth_protocol of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._snmp_auth_protocol

    @snmp_auth_protocol.setter
    def snmp_auth_protocol(self, snmp_auth_protocol):
        """Sets the snmp_auth_protocol of this DiscoveryNIOListResultResponse.


        :param snmp_auth_protocol: The snmp_auth_protocol of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._snmp_auth_protocol = snmp_auth_protocol

    @property
    def snmp_mode(self):
        """Gets the snmp_mode of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The snmp_mode of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._snmp_mode

    @snmp_mode.setter
    def snmp_mode(self, snmp_mode):
        """Sets the snmp_mode of this DiscoveryNIOListResultResponse.


        :param snmp_mode: The snmp_mode of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._snmp_mode = snmp_mode

    @property
    def snmp_priv_passphrase(self):
        """Gets the snmp_priv_passphrase of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The snmp_priv_passphrase of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._snmp_priv_passphrase

    @snmp_priv_passphrase.setter
    def snmp_priv_passphrase(self, snmp_priv_passphrase):
        """Sets the snmp_priv_passphrase of this DiscoveryNIOListResultResponse.


        :param snmp_priv_passphrase: The snmp_priv_passphrase of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._snmp_priv_passphrase = snmp_priv_passphrase

    @property
    def snmp_priv_protocol(self):
        """Gets the snmp_priv_protocol of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The snmp_priv_protocol of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._snmp_priv_protocol

    @snmp_priv_protocol.setter
    def snmp_priv_protocol(self, snmp_priv_protocol):
        """Sets the snmp_priv_protocol of this DiscoveryNIOListResultResponse.


        :param snmp_priv_protocol: The snmp_priv_protocol of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._snmp_priv_protocol = snmp_priv_protocol

    @property
    def snmp_ro_community(self):
        """Gets the snmp_ro_community of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The snmp_ro_community of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._snmp_ro_community

    @snmp_ro_community.setter
    def snmp_ro_community(self, snmp_ro_community):
        """Sets the snmp_ro_community of this DiscoveryNIOListResultResponse.


        :param snmp_ro_community: The snmp_ro_community of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._snmp_ro_community = snmp_ro_community

    @property
    def snmp_ro_community_desc(self):
        """Gets the snmp_ro_community_desc of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The snmp_ro_community_desc of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._snmp_ro_community_desc

    @snmp_ro_community_desc.setter
    def snmp_ro_community_desc(self, snmp_ro_community_desc):
        """Sets the snmp_ro_community_desc of this DiscoveryNIOListResultResponse.


        :param snmp_ro_community_desc: The snmp_ro_community_desc of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._snmp_ro_community_desc = snmp_ro_community_desc

    @property
    def snmp_rw_community(self):
        """Gets the snmp_rw_community of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The snmp_rw_community of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._snmp_rw_community

    @snmp_rw_community.setter
    def snmp_rw_community(self, snmp_rw_community):
        """Sets the snmp_rw_community of this DiscoveryNIOListResultResponse.


        :param snmp_rw_community: The snmp_rw_community of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._snmp_rw_community = snmp_rw_community

    @property
    def snmp_rw_community_desc(self):
        """Gets the snmp_rw_community_desc of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The snmp_rw_community_desc of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._snmp_rw_community_desc

    @snmp_rw_community_desc.setter
    def snmp_rw_community_desc(self, snmp_rw_community_desc):
        """Sets the snmp_rw_community_desc of this DiscoveryNIOListResultResponse.


        :param snmp_rw_community_desc: The snmp_rw_community_desc of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._snmp_rw_community_desc = snmp_rw_community_desc

    @property
    def snmp_user_name(self):
        """Gets the snmp_user_name of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The snmp_user_name of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._snmp_user_name

    @snmp_user_name.setter
    def snmp_user_name(self, snmp_user_name):
        """Sets the snmp_user_name of this DiscoveryNIOListResultResponse.


        :param snmp_user_name: The snmp_user_name of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._snmp_user_name = snmp_user_name

    @property
    def time_out(self):
        """Gets the time_out of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The time_out of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._time_out

    @time_out.setter
    def time_out(self, time_out):
        """Sets the time_out of this DiscoveryNIOListResultResponse.


        :param time_out: The time_out of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: int
        """

        self._time_out = time_out

    @property
    def update_mgmt_ip(self):
        """Gets the update_mgmt_ip of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The update_mgmt_ip of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: bool
        """
        return self._update_mgmt_ip

    @update_mgmt_ip.setter
    def update_mgmt_ip(self, update_mgmt_ip):
        """Sets the update_mgmt_ip of this DiscoveryNIOListResultResponse.


        :param update_mgmt_ip: The update_mgmt_ip of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: bool
        """

        self._update_mgmt_ip = update_mgmt_ip

    @property
    def user_name_list(self):
        """Gets the user_name_list of this DiscoveryNIOListResultResponse.  # noqa: E501


        :return: The user_name_list of this DiscoveryNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_name_list

    @user_name_list.setter
    def user_name_list(self, user_name_list):
        """Sets the user_name_list of this DiscoveryNIOListResultResponse.


        :param user_name_list: The user_name_list of this DiscoveryNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._user_name_list = user_name_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveryNIOListResultResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
