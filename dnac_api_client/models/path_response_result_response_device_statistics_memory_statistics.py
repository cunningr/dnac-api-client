# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PathResponseResultResponseDeviceStatisticsMemoryStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'memory_usage': 'int',
        'total_memory': 'int',
        'refreshed_at': 'int'
    }

    attribute_map = {
        'memory_usage': 'memoryUsage',
        'total_memory': 'totalMemory',
        'refreshed_at': 'refreshedAt'
    }

    def __init__(self, memory_usage=None, total_memory=None, refreshed_at=None):  # noqa: E501
        """PathResponseResultResponseDeviceStatisticsMemoryStatistics - a model defined in OpenAPI"""  # noqa: E501

        self._memory_usage = None
        self._total_memory = None
        self._refreshed_at = None
        self.discriminator = None

        if memory_usage is not None:
            self.memory_usage = memory_usage
        if total_memory is not None:
            self.total_memory = total_memory
        if refreshed_at is not None:
            self.refreshed_at = refreshed_at

    @property
    def memory_usage(self):
        """Gets the memory_usage of this PathResponseResultResponseDeviceStatisticsMemoryStatistics.  # noqa: E501


        :return: The memory_usage of this PathResponseResultResponseDeviceStatisticsMemoryStatistics.  # noqa: E501
        :rtype: int
        """
        return self._memory_usage

    @memory_usage.setter
    def memory_usage(self, memory_usage):
        """Sets the memory_usage of this PathResponseResultResponseDeviceStatisticsMemoryStatistics.


        :param memory_usage: The memory_usage of this PathResponseResultResponseDeviceStatisticsMemoryStatistics.  # noqa: E501
        :type: int
        """

        self._memory_usage = memory_usage

    @property
    def total_memory(self):
        """Gets the total_memory of this PathResponseResultResponseDeviceStatisticsMemoryStatistics.  # noqa: E501


        :return: The total_memory of this PathResponseResultResponseDeviceStatisticsMemoryStatistics.  # noqa: E501
        :rtype: int
        """
        return self._total_memory

    @total_memory.setter
    def total_memory(self, total_memory):
        """Sets the total_memory of this PathResponseResultResponseDeviceStatisticsMemoryStatistics.


        :param total_memory: The total_memory of this PathResponseResultResponseDeviceStatisticsMemoryStatistics.  # noqa: E501
        :type: int
        """

        self._total_memory = total_memory

    @property
    def refreshed_at(self):
        """Gets the refreshed_at of this PathResponseResultResponseDeviceStatisticsMemoryStatistics.  # noqa: E501


        :return: The refreshed_at of this PathResponseResultResponseDeviceStatisticsMemoryStatistics.  # noqa: E501
        :rtype: int
        """
        return self._refreshed_at

    @refreshed_at.setter
    def refreshed_at(self, refreshed_at):
        """Sets the refreshed_at of this PathResponseResultResponseDeviceStatisticsMemoryStatistics.


        :param refreshed_at: The refreshed_at of this PathResponseResultResponseDeviceStatisticsMemoryStatistics.  # noqa: E501
        :type: int
        """

        self._refreshed_at = refreshed_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PathResponseResultResponseDeviceStatisticsMemoryStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
