# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class WorkflowTasks(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'work_item_list': 'list[WorkflowWorkItemList]',
        'time_taken': 'int',
        'task_seq_no': 'int',
        'name': 'str',
        'curr_work_item_idx': 'int',
        'start_time': 'int',
        'end_time': 'int',
        'state': 'str',
        'type': 'str'
    }

    attribute_map = {
        'work_item_list': 'workItemList',
        'time_taken': 'timeTaken',
        'task_seq_no': 'taskSeqNo',
        'name': 'name',
        'curr_work_item_idx': 'currWorkItemIdx',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'state': 'state',
        'type': 'type'
    }

    def __init__(self, work_item_list=None, time_taken=None, task_seq_no=None, name=None, curr_work_item_idx=None, start_time=None, end_time=None, state=None, type=None):  # noqa: E501
        """WorkflowTasks - a model defined in OpenAPI"""  # noqa: E501

        self._work_item_list = None
        self._time_taken = None
        self._task_seq_no = None
        self._name = None
        self._curr_work_item_idx = None
        self._start_time = None
        self._end_time = None
        self._state = None
        self._type = None
        self.discriminator = None

        if work_item_list is not None:
            self.work_item_list = work_item_list
        if time_taken is not None:
            self.time_taken = time_taken
        if task_seq_no is not None:
            self.task_seq_no = task_seq_no
        if name is not None:
            self.name = name
        if curr_work_item_idx is not None:
            self.curr_work_item_idx = curr_work_item_idx
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if state is not None:
            self.state = state
        if type is not None:
            self.type = type

    @property
    def work_item_list(self):
        """Gets the work_item_list of this WorkflowTasks.  # noqa: E501


        :return: The work_item_list of this WorkflowTasks.  # noqa: E501
        :rtype: list[WorkflowWorkItemList]
        """
        return self._work_item_list

    @work_item_list.setter
    def work_item_list(self, work_item_list):
        """Sets the work_item_list of this WorkflowTasks.


        :param work_item_list: The work_item_list of this WorkflowTasks.  # noqa: E501
        :type: list[WorkflowWorkItemList]
        """

        self._work_item_list = work_item_list

    @property
    def time_taken(self):
        """Gets the time_taken of this WorkflowTasks.  # noqa: E501


        :return: The time_taken of this WorkflowTasks.  # noqa: E501
        :rtype: int
        """
        return self._time_taken

    @time_taken.setter
    def time_taken(self, time_taken):
        """Sets the time_taken of this WorkflowTasks.


        :param time_taken: The time_taken of this WorkflowTasks.  # noqa: E501
        :type: int
        """

        self._time_taken = time_taken

    @property
    def task_seq_no(self):
        """Gets the task_seq_no of this WorkflowTasks.  # noqa: E501


        :return: The task_seq_no of this WorkflowTasks.  # noqa: E501
        :rtype: int
        """
        return self._task_seq_no

    @task_seq_no.setter
    def task_seq_no(self, task_seq_no):
        """Sets the task_seq_no of this WorkflowTasks.


        :param task_seq_no: The task_seq_no of this WorkflowTasks.  # noqa: E501
        :type: int
        """

        self._task_seq_no = task_seq_no

    @property
    def name(self):
        """Gets the name of this WorkflowTasks.  # noqa: E501


        :return: The name of this WorkflowTasks.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowTasks.


        :param name: The name of this WorkflowTasks.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def curr_work_item_idx(self):
        """Gets the curr_work_item_idx of this WorkflowTasks.  # noqa: E501


        :return: The curr_work_item_idx of this WorkflowTasks.  # noqa: E501
        :rtype: int
        """
        return self._curr_work_item_idx

    @curr_work_item_idx.setter
    def curr_work_item_idx(self, curr_work_item_idx):
        """Sets the curr_work_item_idx of this WorkflowTasks.


        :param curr_work_item_idx: The curr_work_item_idx of this WorkflowTasks.  # noqa: E501
        :type: int
        """

        self._curr_work_item_idx = curr_work_item_idx

    @property
    def start_time(self):
        """Gets the start_time of this WorkflowTasks.  # noqa: E501


        :return: The start_time of this WorkflowTasks.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this WorkflowTasks.


        :param start_time: The start_time of this WorkflowTasks.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this WorkflowTasks.  # noqa: E501


        :return: The end_time of this WorkflowTasks.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this WorkflowTasks.


        :param end_time: The end_time of this WorkflowTasks.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def state(self):
        """Gets the state of this WorkflowTasks.  # noqa: E501


        :return: The state of this WorkflowTasks.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this WorkflowTasks.


        :param state: The state of this WorkflowTasks.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this WorkflowTasks.  # noqa: E501


        :return: The type of this WorkflowTasks.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WorkflowTasks.


        :param type: The type of this WorkflowTasks.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowTasks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
