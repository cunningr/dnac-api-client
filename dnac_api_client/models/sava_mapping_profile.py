# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SAVAMappingProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_fqdn': 'str',
        'address_ip_v4': 'str',
        'cert': 'str',
        'make_default': 'bool',
        'name': 'str',
        'port': 'int',
        'profile_id': 'str',
        'proxy': 'bool'
    }

    attribute_map = {
        'address_fqdn': 'addressFqdn',
        'address_ip_v4': 'addressIpV4',
        'cert': 'cert',
        'make_default': 'makeDefault',
        'name': 'name',
        'port': 'port',
        'profile_id': 'profileId',
        'proxy': 'proxy'
    }

    def __init__(self, address_fqdn=None, address_ip_v4=None, cert=None, make_default=None, name=None, port=None, profile_id=None, proxy=None):  # noqa: E501
        """SAVAMappingProfile - a model defined in Swagger"""  # noqa: E501

        self._address_fqdn = None
        self._address_ip_v4 = None
        self._cert = None
        self._make_default = None
        self._name = None
        self._port = None
        self._profile_id = None
        self._proxy = None
        self.discriminator = None

        if address_fqdn is not None:
            self.address_fqdn = address_fqdn
        if address_ip_v4 is not None:
            self.address_ip_v4 = address_ip_v4
        if cert is not None:
            self.cert = cert
        if make_default is not None:
            self.make_default = make_default
        if name is not None:
            self.name = name
        if port is not None:
            self.port = port
        if profile_id is not None:
            self.profile_id = profile_id
        if proxy is not None:
            self.proxy = proxy

    @property
    def address_fqdn(self):
        """Gets the address_fqdn of this SAVAMappingProfile.  # noqa: E501


        :return: The address_fqdn of this SAVAMappingProfile.  # noqa: E501
        :rtype: str
        """
        return self._address_fqdn

    @address_fqdn.setter
    def address_fqdn(self, address_fqdn):
        """Sets the address_fqdn of this SAVAMappingProfile.


        :param address_fqdn: The address_fqdn of this SAVAMappingProfile.  # noqa: E501
        :type: str
        """

        self._address_fqdn = address_fqdn

    @property
    def address_ip_v4(self):
        """Gets the address_ip_v4 of this SAVAMappingProfile.  # noqa: E501


        :return: The address_ip_v4 of this SAVAMappingProfile.  # noqa: E501
        :rtype: str
        """
        return self._address_ip_v4

    @address_ip_v4.setter
    def address_ip_v4(self, address_ip_v4):
        """Sets the address_ip_v4 of this SAVAMappingProfile.


        :param address_ip_v4: The address_ip_v4 of this SAVAMappingProfile.  # noqa: E501
        :type: str
        """

        self._address_ip_v4 = address_ip_v4

    @property
    def cert(self):
        """Gets the cert of this SAVAMappingProfile.  # noqa: E501


        :return: The cert of this SAVAMappingProfile.  # noqa: E501
        :rtype: str
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this SAVAMappingProfile.


        :param cert: The cert of this SAVAMappingProfile.  # noqa: E501
        :type: str
        """

        self._cert = cert

    @property
    def make_default(self):
        """Gets the make_default of this SAVAMappingProfile.  # noqa: E501


        :return: The make_default of this SAVAMappingProfile.  # noqa: E501
        :rtype: bool
        """
        return self._make_default

    @make_default.setter
    def make_default(self, make_default):
        """Sets the make_default of this SAVAMappingProfile.


        :param make_default: The make_default of this SAVAMappingProfile.  # noqa: E501
        :type: bool
        """

        self._make_default = make_default

    @property
    def name(self):
        """Gets the name of this SAVAMappingProfile.  # noqa: E501


        :return: The name of this SAVAMappingProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SAVAMappingProfile.


        :param name: The name of this SAVAMappingProfile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def port(self):
        """Gets the port of this SAVAMappingProfile.  # noqa: E501


        :return: The port of this SAVAMappingProfile.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this SAVAMappingProfile.


        :param port: The port of this SAVAMappingProfile.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def profile_id(self):
        """Gets the profile_id of this SAVAMappingProfile.  # noqa: E501


        :return: The profile_id of this SAVAMappingProfile.  # noqa: E501
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this SAVAMappingProfile.


        :param profile_id: The profile_id of this SAVAMappingProfile.  # noqa: E501
        :type: str
        """

        self._profile_id = profile_id

    @property
    def proxy(self):
        """Gets the proxy of this SAVAMappingProfile.  # noqa: E501


        :return: The proxy of this SAVAMappingProfile.  # noqa: E501
        :rtype: bool
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this SAVAMappingProfile.


        :param proxy: The proxy of this SAVAMappingProfile.  # noqa: E501
        :type: bool
        """

        self._proxy = proxy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SAVAMappingProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
