# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RawCliInfoNIOListResultResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_info': 'object',
        'cdp_neighbors': 'str',
        'health_monitor': 'str',
        'id': 'str',
        'intf_description': 'str',
        'inventory': 'str',
        'ip_intf_brief': 'str',
        'mac_address_table': 'str',
        'running_config': 'str',
        'snmp': 'str',
        'version': 'str'
    }

    attribute_map = {
        'attribute_info': 'attributeInfo',
        'cdp_neighbors': 'cdpNeighbors',
        'health_monitor': 'healthMonitor',
        'id': 'id',
        'intf_description': 'intfDescription',
        'inventory': 'inventory',
        'ip_intf_brief': 'ipIntfBrief',
        'mac_address_table': 'macAddressTable',
        'running_config': 'runningConfig',
        'snmp': 'snmp',
        'version': 'version'
    }

    def __init__(self, attribute_info=None, cdp_neighbors=None, health_monitor=None, id=None, intf_description=None, inventory=None, ip_intf_brief=None, mac_address_table=None, running_config=None, snmp=None, version=None):  # noqa: E501
        """RawCliInfoNIOListResultResponse - a model defined in Swagger"""  # noqa: E501

        self._attribute_info = None
        self._cdp_neighbors = None
        self._health_monitor = None
        self._id = None
        self._intf_description = None
        self._inventory = None
        self._ip_intf_brief = None
        self._mac_address_table = None
        self._running_config = None
        self._snmp = None
        self._version = None
        self.discriminator = None

        if attribute_info is not None:
            self.attribute_info = attribute_info
        if cdp_neighbors is not None:
            self.cdp_neighbors = cdp_neighbors
        if health_monitor is not None:
            self.health_monitor = health_monitor
        if id is not None:
            self.id = id
        if intf_description is not None:
            self.intf_description = intf_description
        if inventory is not None:
            self.inventory = inventory
        if ip_intf_brief is not None:
            self.ip_intf_brief = ip_intf_brief
        if mac_address_table is not None:
            self.mac_address_table = mac_address_table
        if running_config is not None:
            self.running_config = running_config
        if snmp is not None:
            self.snmp = snmp
        if version is not None:
            self.version = version

    @property
    def attribute_info(self):
        """Gets the attribute_info of this RawCliInfoNIOListResultResponse.  # noqa: E501


        :return: The attribute_info of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :rtype: object
        """
        return self._attribute_info

    @attribute_info.setter
    def attribute_info(self, attribute_info):
        """Sets the attribute_info of this RawCliInfoNIOListResultResponse.


        :param attribute_info: The attribute_info of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :type: object
        """

        self._attribute_info = attribute_info

    @property
    def cdp_neighbors(self):
        """Gets the cdp_neighbors of this RawCliInfoNIOListResultResponse.  # noqa: E501


        :return: The cdp_neighbors of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._cdp_neighbors

    @cdp_neighbors.setter
    def cdp_neighbors(self, cdp_neighbors):
        """Sets the cdp_neighbors of this RawCliInfoNIOListResultResponse.


        :param cdp_neighbors: The cdp_neighbors of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._cdp_neighbors = cdp_neighbors

    @property
    def health_monitor(self):
        """Gets the health_monitor of this RawCliInfoNIOListResultResponse.  # noqa: E501


        :return: The health_monitor of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._health_monitor

    @health_monitor.setter
    def health_monitor(self, health_monitor):
        """Sets the health_monitor of this RawCliInfoNIOListResultResponse.


        :param health_monitor: The health_monitor of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._health_monitor = health_monitor

    @property
    def id(self):
        """Gets the id of this RawCliInfoNIOListResultResponse.  # noqa: E501


        :return: The id of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RawCliInfoNIOListResultResponse.


        :param id: The id of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def intf_description(self):
        """Gets the intf_description of this RawCliInfoNIOListResultResponse.  # noqa: E501


        :return: The intf_description of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._intf_description

    @intf_description.setter
    def intf_description(self, intf_description):
        """Sets the intf_description of this RawCliInfoNIOListResultResponse.


        :param intf_description: The intf_description of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._intf_description = intf_description

    @property
    def inventory(self):
        """Gets the inventory of this RawCliInfoNIOListResultResponse.  # noqa: E501


        :return: The inventory of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this RawCliInfoNIOListResultResponse.


        :param inventory: The inventory of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._inventory = inventory

    @property
    def ip_intf_brief(self):
        """Gets the ip_intf_brief of this RawCliInfoNIOListResultResponse.  # noqa: E501


        :return: The ip_intf_brief of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._ip_intf_brief

    @ip_intf_brief.setter
    def ip_intf_brief(self, ip_intf_brief):
        """Sets the ip_intf_brief of this RawCliInfoNIOListResultResponse.


        :param ip_intf_brief: The ip_intf_brief of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._ip_intf_brief = ip_intf_brief

    @property
    def mac_address_table(self):
        """Gets the mac_address_table of this RawCliInfoNIOListResultResponse.  # noqa: E501


        :return: The mac_address_table of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._mac_address_table

    @mac_address_table.setter
    def mac_address_table(self, mac_address_table):
        """Sets the mac_address_table of this RawCliInfoNIOListResultResponse.


        :param mac_address_table: The mac_address_table of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._mac_address_table = mac_address_table

    @property
    def running_config(self):
        """Gets the running_config of this RawCliInfoNIOListResultResponse.  # noqa: E501


        :return: The running_config of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._running_config

    @running_config.setter
    def running_config(self, running_config):
        """Sets the running_config of this RawCliInfoNIOListResultResponse.


        :param running_config: The running_config of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._running_config = running_config

    @property
    def snmp(self):
        """Gets the snmp of this RawCliInfoNIOListResultResponse.  # noqa: E501


        :return: The snmp of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._snmp

    @snmp.setter
    def snmp(self, snmp):
        """Sets the snmp of this RawCliInfoNIOListResultResponse.


        :param snmp: The snmp of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._snmp = snmp

    @property
    def version(self):
        """Gets the version of this RawCliInfoNIOListResultResponse.  # noqa: E501


        :return: The version of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RawCliInfoNIOListResultResponse.


        :param version: The version of this RawCliInfoNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RawCliInfoNIOListResultResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
