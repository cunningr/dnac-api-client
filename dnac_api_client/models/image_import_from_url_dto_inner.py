# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ImageImportFromUrlDTOInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_type': 'str',
        'image_family': 'str',
        'source_url': 'str',
        'third_party': 'bool',
        'vendor': 'str'
    }

    attribute_map = {
        'application_type': 'applicationType',
        'image_family': 'imageFamily',
        'source_url': 'sourceURL',
        'third_party': 'thirdParty',
        'vendor': 'vendor'
    }

    def __init__(self, application_type=None, image_family=None, source_url=None, third_party=None, vendor=None):  # noqa: E501
        """ImageImportFromUrlDTOInner - a model defined in Swagger"""  # noqa: E501

        self._application_type = None
        self._image_family = None
        self._source_url = None
        self._third_party = None
        self._vendor = None
        self.discriminator = None

        if application_type is not None:
            self.application_type = application_type
        if image_family is not None:
            self.image_family = image_family
        if source_url is not None:
            self.source_url = source_url
        if third_party is not None:
            self.third_party = third_party
        if vendor is not None:
            self.vendor = vendor

    @property
    def application_type(self):
        """Gets the application_type of this ImageImportFromUrlDTOInner.  # noqa: E501


        :return: The application_type of this ImageImportFromUrlDTOInner.  # noqa: E501
        :rtype: str
        """
        return self._application_type

    @application_type.setter
    def application_type(self, application_type):
        """Sets the application_type of this ImageImportFromUrlDTOInner.


        :param application_type: The application_type of this ImageImportFromUrlDTOInner.  # noqa: E501
        :type: str
        """

        self._application_type = application_type

    @property
    def image_family(self):
        """Gets the image_family of this ImageImportFromUrlDTOInner.  # noqa: E501


        :return: The image_family of this ImageImportFromUrlDTOInner.  # noqa: E501
        :rtype: str
        """
        return self._image_family

    @image_family.setter
    def image_family(self, image_family):
        """Sets the image_family of this ImageImportFromUrlDTOInner.


        :param image_family: The image_family of this ImageImportFromUrlDTOInner.  # noqa: E501
        :type: str
        """

        self._image_family = image_family

    @property
    def source_url(self):
        """Gets the source_url of this ImageImportFromUrlDTOInner.  # noqa: E501


        :return: The source_url of this ImageImportFromUrlDTOInner.  # noqa: E501
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this ImageImportFromUrlDTOInner.


        :param source_url: The source_url of this ImageImportFromUrlDTOInner.  # noqa: E501
        :type: str
        """

        self._source_url = source_url

    @property
    def third_party(self):
        """Gets the third_party of this ImageImportFromUrlDTOInner.  # noqa: E501


        :return: The third_party of this ImageImportFromUrlDTOInner.  # noqa: E501
        :rtype: bool
        """
        return self._third_party

    @third_party.setter
    def third_party(self, third_party):
        """Sets the third_party of this ImageImportFromUrlDTOInner.


        :param third_party: The third_party of this ImageImportFromUrlDTOInner.  # noqa: E501
        :type: bool
        """

        self._third_party = third_party

    @property
    def vendor(self):
        """Gets the vendor of this ImageImportFromUrlDTOInner.  # noqa: E501


        :return: The vendor of this ImageImportFromUrlDTOInner.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this ImageImportFromUrlDTOInner.


        :param vendor: The vendor of this ImageImportFromUrlDTOInner.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageImportFromUrlDTOInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
