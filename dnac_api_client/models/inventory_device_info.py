# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InventoryDeviceInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cli_transport': 'str',
        'compute_device': 'bool',
        'enable_password': 'str',
        'extended_discovery_info': 'str',
        'http_password': 'str',
        'http_port': 'str',
        'http_secure': 'bool',
        'http_user_name': 'str',
        'ip_address': 'list[str]',
        'meraki_org_id': 'list[str]',
        'netconf_port': 'str',
        'password': 'str',
        'serial_number': 'str',
        'snmp_auth_passphrase': 'str',
        'snmp_auth_protocol': 'str',
        'snmp_mode': 'str',
        'snmp_priv_passphrase': 'str',
        'snmp_priv_protocol': 'str',
        'snmp_ro_community': 'str',
        'snmp_rw_community': 'str',
        'snmp_retry': 'int',
        'snmp_timeout': 'int',
        'snmp_user_name': 'str',
        'snmp_version': 'str',
        'type': 'str',
        'update_mgmt_i_paddress_list': 'list[InventoryDeviceInfoUpdateMgmtIPaddressList]',
        'user_name': 'str'
    }

    attribute_map = {
        'cli_transport': 'cliTransport',
        'compute_device': 'computeDevice',
        'enable_password': 'enablePassword',
        'extended_discovery_info': 'extendedDiscoveryInfo',
        'http_password': 'httpPassword',
        'http_port': 'httpPort',
        'http_secure': 'httpSecure',
        'http_user_name': 'httpUserName',
        'ip_address': 'ipAddress',
        'meraki_org_id': 'merakiOrgId',
        'netconf_port': 'netconfPort',
        'password': 'password',
        'serial_number': 'serialNumber',
        'snmp_auth_passphrase': 'snmpAuthPassphrase',
        'snmp_auth_protocol': 'snmpAuthProtocol',
        'snmp_mode': 'snmpMode',
        'snmp_priv_passphrase': 'snmpPrivPassphrase',
        'snmp_priv_protocol': 'snmpPrivProtocol',
        'snmp_ro_community': 'snmpROCommunity',
        'snmp_rw_community': 'snmpRWCommunity',
        'snmp_retry': 'snmpRetry',
        'snmp_timeout': 'snmpTimeout',
        'snmp_user_name': 'snmpUserName',
        'snmp_version': 'snmpVersion',
        'type': 'type',
        'update_mgmt_i_paddress_list': 'updateMgmtIPaddressList',
        'user_name': 'userName'
    }

    def __init__(self, cli_transport=None, compute_device=None, enable_password=None, extended_discovery_info=None, http_password=None, http_port=None, http_secure=None, http_user_name=None, ip_address=None, meraki_org_id=None, netconf_port=None, password=None, serial_number=None, snmp_auth_passphrase=None, snmp_auth_protocol=None, snmp_mode=None, snmp_priv_passphrase=None, snmp_priv_protocol=None, snmp_ro_community=None, snmp_rw_community=None, snmp_retry=None, snmp_timeout=None, snmp_user_name=None, snmp_version=None, type=None, update_mgmt_i_paddress_list=None, user_name=None):  # noqa: E501
        """InventoryDeviceInfo - a model defined in OpenAPI"""  # noqa: E501

        self._cli_transport = None
        self._compute_device = None
        self._enable_password = None
        self._extended_discovery_info = None
        self._http_password = None
        self._http_port = None
        self._http_secure = None
        self._http_user_name = None
        self._ip_address = None
        self._meraki_org_id = None
        self._netconf_port = None
        self._password = None
        self._serial_number = None
        self._snmp_auth_passphrase = None
        self._snmp_auth_protocol = None
        self._snmp_mode = None
        self._snmp_priv_passphrase = None
        self._snmp_priv_protocol = None
        self._snmp_ro_community = None
        self._snmp_rw_community = None
        self._snmp_retry = None
        self._snmp_timeout = None
        self._snmp_user_name = None
        self._snmp_version = None
        self._type = None
        self._update_mgmt_i_paddress_list = None
        self._user_name = None
        self.discriminator = None

        if cli_transport is not None:
            self.cli_transport = cli_transport
        if compute_device is not None:
            self.compute_device = compute_device
        if enable_password is not None:
            self.enable_password = enable_password
        if extended_discovery_info is not None:
            self.extended_discovery_info = extended_discovery_info
        if http_password is not None:
            self.http_password = http_password
        if http_port is not None:
            self.http_port = http_port
        if http_secure is not None:
            self.http_secure = http_secure
        if http_user_name is not None:
            self.http_user_name = http_user_name
        if ip_address is not None:
            self.ip_address = ip_address
        if meraki_org_id is not None:
            self.meraki_org_id = meraki_org_id
        if netconf_port is not None:
            self.netconf_port = netconf_port
        if password is not None:
            self.password = password
        if serial_number is not None:
            self.serial_number = serial_number
        if snmp_auth_passphrase is not None:
            self.snmp_auth_passphrase = snmp_auth_passphrase
        if snmp_auth_protocol is not None:
            self.snmp_auth_protocol = snmp_auth_protocol
        if snmp_mode is not None:
            self.snmp_mode = snmp_mode
        if snmp_priv_passphrase is not None:
            self.snmp_priv_passphrase = snmp_priv_passphrase
        if snmp_priv_protocol is not None:
            self.snmp_priv_protocol = snmp_priv_protocol
        if snmp_ro_community is not None:
            self.snmp_ro_community = snmp_ro_community
        if snmp_rw_community is not None:
            self.snmp_rw_community = snmp_rw_community
        if snmp_retry is not None:
            self.snmp_retry = snmp_retry
        if snmp_timeout is not None:
            self.snmp_timeout = snmp_timeout
        if snmp_user_name is not None:
            self.snmp_user_name = snmp_user_name
        if snmp_version is not None:
            self.snmp_version = snmp_version
        if type is not None:
            self.type = type
        if update_mgmt_i_paddress_list is not None:
            self.update_mgmt_i_paddress_list = update_mgmt_i_paddress_list
        if user_name is not None:
            self.user_name = user_name

    @property
    def cli_transport(self):
        """Gets the cli_transport of this InventoryDeviceInfo.  # noqa: E501


        :return: The cli_transport of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._cli_transport

    @cli_transport.setter
    def cli_transport(self, cli_transport):
        """Sets the cli_transport of this InventoryDeviceInfo.


        :param cli_transport: The cli_transport of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._cli_transport = cli_transport

    @property
    def compute_device(self):
        """Gets the compute_device of this InventoryDeviceInfo.  # noqa: E501


        :return: The compute_device of this InventoryDeviceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._compute_device

    @compute_device.setter
    def compute_device(self, compute_device):
        """Sets the compute_device of this InventoryDeviceInfo.


        :param compute_device: The compute_device of this InventoryDeviceInfo.  # noqa: E501
        :type: bool
        """

        self._compute_device = compute_device

    @property
    def enable_password(self):
        """Gets the enable_password of this InventoryDeviceInfo.  # noqa: E501


        :return: The enable_password of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._enable_password

    @enable_password.setter
    def enable_password(self, enable_password):
        """Sets the enable_password of this InventoryDeviceInfo.


        :param enable_password: The enable_password of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._enable_password = enable_password

    @property
    def extended_discovery_info(self):
        """Gets the extended_discovery_info of this InventoryDeviceInfo.  # noqa: E501


        :return: The extended_discovery_info of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._extended_discovery_info

    @extended_discovery_info.setter
    def extended_discovery_info(self, extended_discovery_info):
        """Sets the extended_discovery_info of this InventoryDeviceInfo.


        :param extended_discovery_info: The extended_discovery_info of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._extended_discovery_info = extended_discovery_info

    @property
    def http_password(self):
        """Gets the http_password of this InventoryDeviceInfo.  # noqa: E501


        :return: The http_password of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._http_password

    @http_password.setter
    def http_password(self, http_password):
        """Sets the http_password of this InventoryDeviceInfo.


        :param http_password: The http_password of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._http_password = http_password

    @property
    def http_port(self):
        """Gets the http_port of this InventoryDeviceInfo.  # noqa: E501


        :return: The http_port of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._http_port

    @http_port.setter
    def http_port(self, http_port):
        """Sets the http_port of this InventoryDeviceInfo.


        :param http_port: The http_port of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._http_port = http_port

    @property
    def http_secure(self):
        """Gets the http_secure of this InventoryDeviceInfo.  # noqa: E501


        :return: The http_secure of this InventoryDeviceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._http_secure

    @http_secure.setter
    def http_secure(self, http_secure):
        """Sets the http_secure of this InventoryDeviceInfo.


        :param http_secure: The http_secure of this InventoryDeviceInfo.  # noqa: E501
        :type: bool
        """

        self._http_secure = http_secure

    @property
    def http_user_name(self):
        """Gets the http_user_name of this InventoryDeviceInfo.  # noqa: E501


        :return: The http_user_name of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._http_user_name

    @http_user_name.setter
    def http_user_name(self, http_user_name):
        """Sets the http_user_name of this InventoryDeviceInfo.


        :param http_user_name: The http_user_name of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._http_user_name = http_user_name

    @property
    def ip_address(self):
        """Gets the ip_address of this InventoryDeviceInfo.  # noqa: E501


        :return: The ip_address of this InventoryDeviceInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this InventoryDeviceInfo.


        :param ip_address: The ip_address of this InventoryDeviceInfo.  # noqa: E501
        :type: list[str]
        """

        self._ip_address = ip_address

    @property
    def meraki_org_id(self):
        """Gets the meraki_org_id of this InventoryDeviceInfo.  # noqa: E501


        :return: The meraki_org_id of this InventoryDeviceInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._meraki_org_id

    @meraki_org_id.setter
    def meraki_org_id(self, meraki_org_id):
        """Sets the meraki_org_id of this InventoryDeviceInfo.


        :param meraki_org_id: The meraki_org_id of this InventoryDeviceInfo.  # noqa: E501
        :type: list[str]
        """

        self._meraki_org_id = meraki_org_id

    @property
    def netconf_port(self):
        """Gets the netconf_port of this InventoryDeviceInfo.  # noqa: E501


        :return: The netconf_port of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._netconf_port

    @netconf_port.setter
    def netconf_port(self, netconf_port):
        """Sets the netconf_port of this InventoryDeviceInfo.


        :param netconf_port: The netconf_port of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._netconf_port = netconf_port

    @property
    def password(self):
        """Gets the password of this InventoryDeviceInfo.  # noqa: E501


        :return: The password of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this InventoryDeviceInfo.


        :param password: The password of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def serial_number(self):
        """Gets the serial_number of this InventoryDeviceInfo.  # noqa: E501


        :return: The serial_number of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this InventoryDeviceInfo.


        :param serial_number: The serial_number of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def snmp_auth_passphrase(self):
        """Gets the snmp_auth_passphrase of this InventoryDeviceInfo.  # noqa: E501


        :return: The snmp_auth_passphrase of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._snmp_auth_passphrase

    @snmp_auth_passphrase.setter
    def snmp_auth_passphrase(self, snmp_auth_passphrase):
        """Sets the snmp_auth_passphrase of this InventoryDeviceInfo.


        :param snmp_auth_passphrase: The snmp_auth_passphrase of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._snmp_auth_passphrase = snmp_auth_passphrase

    @property
    def snmp_auth_protocol(self):
        """Gets the snmp_auth_protocol of this InventoryDeviceInfo.  # noqa: E501


        :return: The snmp_auth_protocol of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._snmp_auth_protocol

    @snmp_auth_protocol.setter
    def snmp_auth_protocol(self, snmp_auth_protocol):
        """Sets the snmp_auth_protocol of this InventoryDeviceInfo.


        :param snmp_auth_protocol: The snmp_auth_protocol of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._snmp_auth_protocol = snmp_auth_protocol

    @property
    def snmp_mode(self):
        """Gets the snmp_mode of this InventoryDeviceInfo.  # noqa: E501


        :return: The snmp_mode of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._snmp_mode

    @snmp_mode.setter
    def snmp_mode(self, snmp_mode):
        """Sets the snmp_mode of this InventoryDeviceInfo.


        :param snmp_mode: The snmp_mode of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._snmp_mode = snmp_mode

    @property
    def snmp_priv_passphrase(self):
        """Gets the snmp_priv_passphrase of this InventoryDeviceInfo.  # noqa: E501


        :return: The snmp_priv_passphrase of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._snmp_priv_passphrase

    @snmp_priv_passphrase.setter
    def snmp_priv_passphrase(self, snmp_priv_passphrase):
        """Sets the snmp_priv_passphrase of this InventoryDeviceInfo.


        :param snmp_priv_passphrase: The snmp_priv_passphrase of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._snmp_priv_passphrase = snmp_priv_passphrase

    @property
    def snmp_priv_protocol(self):
        """Gets the snmp_priv_protocol of this InventoryDeviceInfo.  # noqa: E501


        :return: The snmp_priv_protocol of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._snmp_priv_protocol

    @snmp_priv_protocol.setter
    def snmp_priv_protocol(self, snmp_priv_protocol):
        """Sets the snmp_priv_protocol of this InventoryDeviceInfo.


        :param snmp_priv_protocol: The snmp_priv_protocol of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._snmp_priv_protocol = snmp_priv_protocol

    @property
    def snmp_ro_community(self):
        """Gets the snmp_ro_community of this InventoryDeviceInfo.  # noqa: E501


        :return: The snmp_ro_community of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._snmp_ro_community

    @snmp_ro_community.setter
    def snmp_ro_community(self, snmp_ro_community):
        """Sets the snmp_ro_community of this InventoryDeviceInfo.


        :param snmp_ro_community: The snmp_ro_community of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._snmp_ro_community = snmp_ro_community

    @property
    def snmp_rw_community(self):
        """Gets the snmp_rw_community of this InventoryDeviceInfo.  # noqa: E501


        :return: The snmp_rw_community of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._snmp_rw_community

    @snmp_rw_community.setter
    def snmp_rw_community(self, snmp_rw_community):
        """Sets the snmp_rw_community of this InventoryDeviceInfo.


        :param snmp_rw_community: The snmp_rw_community of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._snmp_rw_community = snmp_rw_community

    @property
    def snmp_retry(self):
        """Gets the snmp_retry of this InventoryDeviceInfo.  # noqa: E501


        :return: The snmp_retry of this InventoryDeviceInfo.  # noqa: E501
        :rtype: int
        """
        return self._snmp_retry

    @snmp_retry.setter
    def snmp_retry(self, snmp_retry):
        """Sets the snmp_retry of this InventoryDeviceInfo.


        :param snmp_retry: The snmp_retry of this InventoryDeviceInfo.  # noqa: E501
        :type: int
        """

        self._snmp_retry = snmp_retry

    @property
    def snmp_timeout(self):
        """Gets the snmp_timeout of this InventoryDeviceInfo.  # noqa: E501


        :return: The snmp_timeout of this InventoryDeviceInfo.  # noqa: E501
        :rtype: int
        """
        return self._snmp_timeout

    @snmp_timeout.setter
    def snmp_timeout(self, snmp_timeout):
        """Sets the snmp_timeout of this InventoryDeviceInfo.


        :param snmp_timeout: The snmp_timeout of this InventoryDeviceInfo.  # noqa: E501
        :type: int
        """

        self._snmp_timeout = snmp_timeout

    @property
    def snmp_user_name(self):
        """Gets the snmp_user_name of this InventoryDeviceInfo.  # noqa: E501


        :return: The snmp_user_name of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._snmp_user_name

    @snmp_user_name.setter
    def snmp_user_name(self, snmp_user_name):
        """Sets the snmp_user_name of this InventoryDeviceInfo.


        :param snmp_user_name: The snmp_user_name of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._snmp_user_name = snmp_user_name

    @property
    def snmp_version(self):
        """Gets the snmp_version of this InventoryDeviceInfo.  # noqa: E501


        :return: The snmp_version of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._snmp_version

    @snmp_version.setter
    def snmp_version(self, snmp_version):
        """Sets the snmp_version of this InventoryDeviceInfo.


        :param snmp_version: The snmp_version of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._snmp_version = snmp_version

    @property
    def type(self):
        """Gets the type of this InventoryDeviceInfo.  # noqa: E501


        :return: The type of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InventoryDeviceInfo.


        :param type: The type of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMPUTE_DEVICE", "MERAKI_DASHBOARD", "NETWORK_DEVICE", "NODATACHANGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_mgmt_i_paddress_list(self):
        """Gets the update_mgmt_i_paddress_list of this InventoryDeviceInfo.  # noqa: E501


        :return: The update_mgmt_i_paddress_list of this InventoryDeviceInfo.  # noqa: E501
        :rtype: list[InventoryDeviceInfoUpdateMgmtIPaddressList]
        """
        return self._update_mgmt_i_paddress_list

    @update_mgmt_i_paddress_list.setter
    def update_mgmt_i_paddress_list(self, update_mgmt_i_paddress_list):
        """Sets the update_mgmt_i_paddress_list of this InventoryDeviceInfo.


        :param update_mgmt_i_paddress_list: The update_mgmt_i_paddress_list of this InventoryDeviceInfo.  # noqa: E501
        :type: list[InventoryDeviceInfoUpdateMgmtIPaddressList]
        """

        self._update_mgmt_i_paddress_list = update_mgmt_i_paddress_list

    @property
    def user_name(self):
        """Gets the user_name of this InventoryDeviceInfo.  # noqa: E501


        :return: The user_name of this InventoryDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this InventoryDeviceInfo.


        :param user_name: The user_name of this InventoryDeviceInfo.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryDeviceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
