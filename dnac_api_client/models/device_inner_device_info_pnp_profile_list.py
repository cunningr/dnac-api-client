# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dnac_api_client.models.device_inner_device_info_primary_endpoint import DeviceInnerDeviceInfoPrimaryEndpoint  # noqa: F401,E501


class DeviceInnerDeviceInfoPnpProfileList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'discovery_created': 'bool',
        'primary_endpoint': 'DeviceInnerDeviceInfoPrimaryEndpoint',
        'profile_name': 'str',
        'secondary_endpoint': 'DeviceInnerDeviceInfoPrimaryEndpoint'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'discovery_created': 'discoveryCreated',
        'primary_endpoint': 'primaryEndpoint',
        'profile_name': 'profileName',
        'secondary_endpoint': 'secondaryEndpoint'
    }

    def __init__(self, created_by=None, discovery_created=None, primary_endpoint=None, profile_name=None, secondary_endpoint=None):  # noqa: E501
        """DeviceInnerDeviceInfoPnpProfileList - a model defined in Swagger"""  # noqa: E501

        self._created_by = None
        self._discovery_created = None
        self._primary_endpoint = None
        self._profile_name = None
        self._secondary_endpoint = None
        self.discriminator = None

        if created_by is not None:
            self.created_by = created_by
        if discovery_created is not None:
            self.discovery_created = discovery_created
        if primary_endpoint is not None:
            self.primary_endpoint = primary_endpoint
        if profile_name is not None:
            self.profile_name = profile_name
        if secondary_endpoint is not None:
            self.secondary_endpoint = secondary_endpoint

    @property
    def created_by(self):
        """Gets the created_by of this DeviceInnerDeviceInfoPnpProfileList.  # noqa: E501


        :return: The created_by of this DeviceInnerDeviceInfoPnpProfileList.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DeviceInnerDeviceInfoPnpProfileList.


        :param created_by: The created_by of this DeviceInnerDeviceInfoPnpProfileList.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def discovery_created(self):
        """Gets the discovery_created of this DeviceInnerDeviceInfoPnpProfileList.  # noqa: E501


        :return: The discovery_created of this DeviceInnerDeviceInfoPnpProfileList.  # noqa: E501
        :rtype: bool
        """
        return self._discovery_created

    @discovery_created.setter
    def discovery_created(self, discovery_created):
        """Sets the discovery_created of this DeviceInnerDeviceInfoPnpProfileList.


        :param discovery_created: The discovery_created of this DeviceInnerDeviceInfoPnpProfileList.  # noqa: E501
        :type: bool
        """

        self._discovery_created = discovery_created

    @property
    def primary_endpoint(self):
        """Gets the primary_endpoint of this DeviceInnerDeviceInfoPnpProfileList.  # noqa: E501


        :return: The primary_endpoint of this DeviceInnerDeviceInfoPnpProfileList.  # noqa: E501
        :rtype: DeviceInnerDeviceInfoPrimaryEndpoint
        """
        return self._primary_endpoint

    @primary_endpoint.setter
    def primary_endpoint(self, primary_endpoint):
        """Sets the primary_endpoint of this DeviceInnerDeviceInfoPnpProfileList.


        :param primary_endpoint: The primary_endpoint of this DeviceInnerDeviceInfoPnpProfileList.  # noqa: E501
        :type: DeviceInnerDeviceInfoPrimaryEndpoint
        """

        self._primary_endpoint = primary_endpoint

    @property
    def profile_name(self):
        """Gets the profile_name of this DeviceInnerDeviceInfoPnpProfileList.  # noqa: E501


        :return: The profile_name of this DeviceInnerDeviceInfoPnpProfileList.  # noqa: E501
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this DeviceInnerDeviceInfoPnpProfileList.


        :param profile_name: The profile_name of this DeviceInnerDeviceInfoPnpProfileList.  # noqa: E501
        :type: str
        """

        self._profile_name = profile_name

    @property
    def secondary_endpoint(self):
        """Gets the secondary_endpoint of this DeviceInnerDeviceInfoPnpProfileList.  # noqa: E501


        :return: The secondary_endpoint of this DeviceInnerDeviceInfoPnpProfileList.  # noqa: E501
        :rtype: DeviceInnerDeviceInfoPrimaryEndpoint
        """
        return self._secondary_endpoint

    @secondary_endpoint.setter
    def secondary_endpoint(self, secondary_endpoint):
        """Sets the secondary_endpoint of this DeviceInnerDeviceInfoPnpProfileList.


        :param secondary_endpoint: The secondary_endpoint of this DeviceInnerDeviceInfoPnpProfileList.  # noqa: E501
        :type: DeviceInnerDeviceInfoPrimaryEndpoint
        """

        self._secondary_endpoint = secondary_endpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceInnerDeviceInfoPnpProfileList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
