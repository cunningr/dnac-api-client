# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClientDetailResponseResponseTopologyNodes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clients': 'str',
        'connected_device': 'str',
        'count': 'str',
        'description': 'str',
        'device_type': 'str',
        'fabric_group': 'str',
        'family': 'str',
        'health_score': 'str',
        'id': 'str',
        'ip': 'str',
        'level': 'str',
        'name': 'str',
        'node_type': 'str',
        'platform_id': 'str',
        'radio_frequency': 'str',
        'role': 'str',
        'software_version': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'clients': 'clients',
        'connected_device': 'connectedDevice',
        'count': 'count',
        'description': 'description',
        'device_type': 'deviceType',
        'fabric_group': 'fabricGroup',
        'family': 'family',
        'health_score': 'healthScore',
        'id': 'id',
        'ip': 'ip',
        'level': 'level',
        'name': 'name',
        'node_type': 'nodeType',
        'platform_id': 'platformId',
        'radio_frequency': 'radioFrequency',
        'role': 'role',
        'software_version': 'softwareVersion',
        'user_id': 'userId'
    }

    def __init__(self, clients=None, connected_device=None, count=None, description=None, device_type=None, fabric_group=None, family=None, health_score=None, id=None, ip=None, level=None, name=None, node_type=None, platform_id=None, radio_frequency=None, role=None, software_version=None, user_id=None):  # noqa: E501
        """ClientDetailResponseResponseTopologyNodes - a model defined in Swagger"""  # noqa: E501

        self._clients = None
        self._connected_device = None
        self._count = None
        self._description = None
        self._device_type = None
        self._fabric_group = None
        self._family = None
        self._health_score = None
        self._id = None
        self._ip = None
        self._level = None
        self._name = None
        self._node_type = None
        self._platform_id = None
        self._radio_frequency = None
        self._role = None
        self._software_version = None
        self._user_id = None
        self.discriminator = None

        if clients is not None:
            self.clients = clients
        if connected_device is not None:
            self.connected_device = connected_device
        if count is not None:
            self.count = count
        if description is not None:
            self.description = description
        if device_type is not None:
            self.device_type = device_type
        if fabric_group is not None:
            self.fabric_group = fabric_group
        if family is not None:
            self.family = family
        if health_score is not None:
            self.health_score = health_score
        if id is not None:
            self.id = id
        if ip is not None:
            self.ip = ip
        if level is not None:
            self.level = level
        if name is not None:
            self.name = name
        if node_type is not None:
            self.node_type = node_type
        if platform_id is not None:
            self.platform_id = platform_id
        if radio_frequency is not None:
            self.radio_frequency = radio_frequency
        if role is not None:
            self.role = role
        if software_version is not None:
            self.software_version = software_version
        if user_id is not None:
            self.user_id = user_id

    @property
    def clients(self):
        """Gets the clients of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The clients of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this ClientDetailResponseResponseTopologyNodes.


        :param clients: The clients of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._clients = clients

    @property
    def connected_device(self):
        """Gets the connected_device of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The connected_device of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._connected_device

    @connected_device.setter
    def connected_device(self, connected_device):
        """Sets the connected_device of this ClientDetailResponseResponseTopologyNodes.


        :param connected_device: The connected_device of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._connected_device = connected_device

    @property
    def count(self):
        """Gets the count of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The count of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ClientDetailResponseResponseTopologyNodes.


        :param count: The count of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._count = count

    @property
    def description(self):
        """Gets the description of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The description of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClientDetailResponseResponseTopologyNodes.


        :param description: The description of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_type(self):
        """Gets the device_type of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The device_type of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this ClientDetailResponseResponseTopologyNodes.


        :param device_type: The device_type of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def fabric_group(self):
        """Gets the fabric_group of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The fabric_group of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._fabric_group

    @fabric_group.setter
    def fabric_group(self, fabric_group):
        """Sets the fabric_group of this ClientDetailResponseResponseTopologyNodes.


        :param fabric_group: The fabric_group of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._fabric_group = fabric_group

    @property
    def family(self):
        """Gets the family of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The family of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this ClientDetailResponseResponseTopologyNodes.


        :param family: The family of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._family = family

    @property
    def health_score(self):
        """Gets the health_score of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The health_score of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._health_score

    @health_score.setter
    def health_score(self, health_score):
        """Sets the health_score of this ClientDetailResponseResponseTopologyNodes.


        :param health_score: The health_score of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._health_score = health_score

    @property
    def id(self):
        """Gets the id of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The id of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientDetailResponseResponseTopologyNodes.


        :param id: The id of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip(self):
        """Gets the ip of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The ip of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this ClientDetailResponseResponseTopologyNodes.


        :param ip: The ip of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def level(self):
        """Gets the level of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The level of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this ClientDetailResponseResponseTopologyNodes.


        :param level: The level of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def name(self):
        """Gets the name of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The name of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClientDetailResponseResponseTopologyNodes.


        :param name: The name of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def node_type(self):
        """Gets the node_type of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The node_type of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this ClientDetailResponseResponseTopologyNodes.


        :param node_type: The node_type of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._node_type = node_type

    @property
    def platform_id(self):
        """Gets the platform_id of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The platform_id of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this ClientDetailResponseResponseTopologyNodes.


        :param platform_id: The platform_id of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._platform_id = platform_id

    @property
    def radio_frequency(self):
        """Gets the radio_frequency of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The radio_frequency of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._radio_frequency

    @radio_frequency.setter
    def radio_frequency(self, radio_frequency):
        """Sets the radio_frequency of this ClientDetailResponseResponseTopologyNodes.


        :param radio_frequency: The radio_frequency of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._radio_frequency = radio_frequency

    @property
    def role(self):
        """Gets the role of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The role of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ClientDetailResponseResponseTopologyNodes.


        :param role: The role of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def software_version(self):
        """Gets the software_version of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The software_version of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this ClientDetailResponseResponseTopologyNodes.


        :param software_version: The software_version of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def user_id(self):
        """Gets the user_id of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501


        :return: The user_id of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ClientDetailResponseResponseTopologyNodes.


        :param user_id: The user_id of this ClientDetailResponseResponseTopologyNodes.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientDetailResponseResponseTopologyNodes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
