# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DeviceIfResultResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'if_index': 'str',
        'ipv4_mask': 'str',
        'native_vlan_id': 'str',
        'ipv4_address': 'str',
        'description': 'str',
        'duplex': 'str',
        'class_name': 'str',
        'pid': 'str',
        'port_name': 'str',
        'device_id': 'str',
        'speed': 'str',
        'interface_type': 'str',
        'last_updated': 'str',
        'instance_tenant_id': 'str',
        'admin_status': 'str',
        'id': 'str',
        'port_mode': 'str',
        'mapped_physical_interface_name': 'str',
        'vlan_id': 'str',
        'media_type': 'str',
        'ospf_support': 'str',
        'serial_no': 'str',
        'port_type': 'str',
        'mac_address': 'str',
        'isis_support': 'str',
        'series': 'str',
        'voice_vlan': 'str',
        'instance_uuid': 'str',
        'mapped_physical_interface_id': 'str',
        'status': 'str'
    }

    attribute_map = {
        'if_index': 'ifIndex',
        'ipv4_mask': 'ipv4Mask',
        'native_vlan_id': 'nativeVlanId',
        'ipv4_address': 'ipv4Address',
        'description': 'description',
        'duplex': 'duplex',
        'class_name': 'className',
        'pid': 'pid',
        'port_name': 'portName',
        'device_id': 'deviceId',
        'speed': 'speed',
        'interface_type': 'interfaceType',
        'last_updated': 'lastUpdated',
        'instance_tenant_id': 'instanceTenantId',
        'admin_status': 'adminStatus',
        'id': 'id',
        'port_mode': 'portMode',
        'mapped_physical_interface_name': 'mappedPhysicalInterfaceName',
        'vlan_id': 'vlanId',
        'media_type': 'mediaType',
        'ospf_support': 'ospfSupport',
        'serial_no': 'serialNo',
        'port_type': 'portType',
        'mac_address': 'macAddress',
        'isis_support': 'isisSupport',
        'series': 'series',
        'voice_vlan': 'voiceVlan',
        'instance_uuid': 'instanceUuid',
        'mapped_physical_interface_id': 'mappedPhysicalInterfaceId',
        'status': 'status'
    }

    def __init__(self, if_index=None, ipv4_mask=None, native_vlan_id=None, ipv4_address=None, description=None, duplex=None, class_name=None, pid=None, port_name=None, device_id=None, speed=None, interface_type=None, last_updated=None, instance_tenant_id=None, admin_status=None, id=None, port_mode=None, mapped_physical_interface_name=None, vlan_id=None, media_type=None, ospf_support=None, serial_no=None, port_type=None, mac_address=None, isis_support=None, series=None, voice_vlan=None, instance_uuid=None, mapped_physical_interface_id=None, status=None):  # noqa: E501
        """DeviceIfResultResponse - a model defined in OpenAPI"""  # noqa: E501

        self._if_index = None
        self._ipv4_mask = None
        self._native_vlan_id = None
        self._ipv4_address = None
        self._description = None
        self._duplex = None
        self._class_name = None
        self._pid = None
        self._port_name = None
        self._device_id = None
        self._speed = None
        self._interface_type = None
        self._last_updated = None
        self._instance_tenant_id = None
        self._admin_status = None
        self._id = None
        self._port_mode = None
        self._mapped_physical_interface_name = None
        self._vlan_id = None
        self._media_type = None
        self._ospf_support = None
        self._serial_no = None
        self._port_type = None
        self._mac_address = None
        self._isis_support = None
        self._series = None
        self._voice_vlan = None
        self._instance_uuid = None
        self._mapped_physical_interface_id = None
        self._status = None
        self.discriminator = None

        if if_index is not None:
            self.if_index = if_index
        if ipv4_mask is not None:
            self.ipv4_mask = ipv4_mask
        if native_vlan_id is not None:
            self.native_vlan_id = native_vlan_id
        if ipv4_address is not None:
            self.ipv4_address = ipv4_address
        if description is not None:
            self.description = description
        if duplex is not None:
            self.duplex = duplex
        if class_name is not None:
            self.class_name = class_name
        if pid is not None:
            self.pid = pid
        if port_name is not None:
            self.port_name = port_name
        if device_id is not None:
            self.device_id = device_id
        if speed is not None:
            self.speed = speed
        if interface_type is not None:
            self.interface_type = interface_type
        if last_updated is not None:
            self.last_updated = last_updated
        if instance_tenant_id is not None:
            self.instance_tenant_id = instance_tenant_id
        if admin_status is not None:
            self.admin_status = admin_status
        if id is not None:
            self.id = id
        if port_mode is not None:
            self.port_mode = port_mode
        if mapped_physical_interface_name is not None:
            self.mapped_physical_interface_name = mapped_physical_interface_name
        if vlan_id is not None:
            self.vlan_id = vlan_id
        if media_type is not None:
            self.media_type = media_type
        if ospf_support is not None:
            self.ospf_support = ospf_support
        if serial_no is not None:
            self.serial_no = serial_no
        if port_type is not None:
            self.port_type = port_type
        if mac_address is not None:
            self.mac_address = mac_address
        if isis_support is not None:
            self.isis_support = isis_support
        if series is not None:
            self.series = series
        if voice_vlan is not None:
            self.voice_vlan = voice_vlan
        if instance_uuid is not None:
            self.instance_uuid = instance_uuid
        if mapped_physical_interface_id is not None:
            self.mapped_physical_interface_id = mapped_physical_interface_id
        if status is not None:
            self.status = status

    @property
    def if_index(self):
        """Gets the if_index of this DeviceIfResultResponse.  # noqa: E501


        :return: The if_index of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._if_index

    @if_index.setter
    def if_index(self, if_index):
        """Sets the if_index of this DeviceIfResultResponse.


        :param if_index: The if_index of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._if_index = if_index

    @property
    def ipv4_mask(self):
        """Gets the ipv4_mask of this DeviceIfResultResponse.  # noqa: E501


        :return: The ipv4_mask of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._ipv4_mask

    @ipv4_mask.setter
    def ipv4_mask(self, ipv4_mask):
        """Sets the ipv4_mask of this DeviceIfResultResponse.


        :param ipv4_mask: The ipv4_mask of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._ipv4_mask = ipv4_mask

    @property
    def native_vlan_id(self):
        """Gets the native_vlan_id of this DeviceIfResultResponse.  # noqa: E501


        :return: The native_vlan_id of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._native_vlan_id

    @native_vlan_id.setter
    def native_vlan_id(self, native_vlan_id):
        """Sets the native_vlan_id of this DeviceIfResultResponse.


        :param native_vlan_id: The native_vlan_id of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._native_vlan_id = native_vlan_id

    @property
    def ipv4_address(self):
        """Gets the ipv4_address of this DeviceIfResultResponse.  # noqa: E501


        :return: The ipv4_address of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """Sets the ipv4_address of this DeviceIfResultResponse.


        :param ipv4_address: The ipv4_address of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._ipv4_address = ipv4_address

    @property
    def description(self):
        """Gets the description of this DeviceIfResultResponse.  # noqa: E501


        :return: The description of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceIfResultResponse.


        :param description: The description of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def duplex(self):
        """Gets the duplex of this DeviceIfResultResponse.  # noqa: E501


        :return: The duplex of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._duplex

    @duplex.setter
    def duplex(self, duplex):
        """Sets the duplex of this DeviceIfResultResponse.


        :param duplex: The duplex of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._duplex = duplex

    @property
    def class_name(self):
        """Gets the class_name of this DeviceIfResultResponse.  # noqa: E501


        :return: The class_name of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this DeviceIfResultResponse.


        :param class_name: The class_name of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._class_name = class_name

    @property
    def pid(self):
        """Gets the pid of this DeviceIfResultResponse.  # noqa: E501


        :return: The pid of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this DeviceIfResultResponse.


        :param pid: The pid of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def port_name(self):
        """Gets the port_name of this DeviceIfResultResponse.  # noqa: E501


        :return: The port_name of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._port_name

    @port_name.setter
    def port_name(self, port_name):
        """Sets the port_name of this DeviceIfResultResponse.


        :param port_name: The port_name of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._port_name = port_name

    @property
    def device_id(self):
        """Gets the device_id of this DeviceIfResultResponse.  # noqa: E501


        :return: The device_id of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceIfResultResponse.


        :param device_id: The device_id of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def speed(self):
        """Gets the speed of this DeviceIfResultResponse.  # noqa: E501


        :return: The speed of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this DeviceIfResultResponse.


        :param speed: The speed of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._speed = speed

    @property
    def interface_type(self):
        """Gets the interface_type of this DeviceIfResultResponse.  # noqa: E501


        :return: The interface_type of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._interface_type

    @interface_type.setter
    def interface_type(self, interface_type):
        """Sets the interface_type of this DeviceIfResultResponse.


        :param interface_type: The interface_type of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._interface_type = interface_type

    @property
    def last_updated(self):
        """Gets the last_updated of this DeviceIfResultResponse.  # noqa: E501


        :return: The last_updated of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this DeviceIfResultResponse.


        :param last_updated: The last_updated of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def instance_tenant_id(self):
        """Gets the instance_tenant_id of this DeviceIfResultResponse.  # noqa: E501


        :return: The instance_tenant_id of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._instance_tenant_id

    @instance_tenant_id.setter
    def instance_tenant_id(self, instance_tenant_id):
        """Sets the instance_tenant_id of this DeviceIfResultResponse.


        :param instance_tenant_id: The instance_tenant_id of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._instance_tenant_id = instance_tenant_id

    @property
    def admin_status(self):
        """Gets the admin_status of this DeviceIfResultResponse.  # noqa: E501


        :return: The admin_status of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._admin_status

    @admin_status.setter
    def admin_status(self, admin_status):
        """Sets the admin_status of this DeviceIfResultResponse.


        :param admin_status: The admin_status of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._admin_status = admin_status

    @property
    def id(self):
        """Gets the id of this DeviceIfResultResponse.  # noqa: E501


        :return: The id of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceIfResultResponse.


        :param id: The id of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def port_mode(self):
        """Gets the port_mode of this DeviceIfResultResponse.  # noqa: E501


        :return: The port_mode of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._port_mode

    @port_mode.setter
    def port_mode(self, port_mode):
        """Sets the port_mode of this DeviceIfResultResponse.


        :param port_mode: The port_mode of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._port_mode = port_mode

    @property
    def mapped_physical_interface_name(self):
        """Gets the mapped_physical_interface_name of this DeviceIfResultResponse.  # noqa: E501


        :return: The mapped_physical_interface_name of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._mapped_physical_interface_name

    @mapped_physical_interface_name.setter
    def mapped_physical_interface_name(self, mapped_physical_interface_name):
        """Sets the mapped_physical_interface_name of this DeviceIfResultResponse.


        :param mapped_physical_interface_name: The mapped_physical_interface_name of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._mapped_physical_interface_name = mapped_physical_interface_name

    @property
    def vlan_id(self):
        """Gets the vlan_id of this DeviceIfResultResponse.  # noqa: E501


        :return: The vlan_id of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this DeviceIfResultResponse.


        :param vlan_id: The vlan_id of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._vlan_id = vlan_id

    @property
    def media_type(self):
        """Gets the media_type of this DeviceIfResultResponse.  # noqa: E501


        :return: The media_type of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this DeviceIfResultResponse.


        :param media_type: The media_type of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def ospf_support(self):
        """Gets the ospf_support of this DeviceIfResultResponse.  # noqa: E501


        :return: The ospf_support of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._ospf_support

    @ospf_support.setter
    def ospf_support(self, ospf_support):
        """Sets the ospf_support of this DeviceIfResultResponse.


        :param ospf_support: The ospf_support of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._ospf_support = ospf_support

    @property
    def serial_no(self):
        """Gets the serial_no of this DeviceIfResultResponse.  # noqa: E501


        :return: The serial_no of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._serial_no

    @serial_no.setter
    def serial_no(self, serial_no):
        """Sets the serial_no of this DeviceIfResultResponse.


        :param serial_no: The serial_no of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._serial_no = serial_no

    @property
    def port_type(self):
        """Gets the port_type of this DeviceIfResultResponse.  # noqa: E501


        :return: The port_type of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._port_type

    @port_type.setter
    def port_type(self, port_type):
        """Sets the port_type of this DeviceIfResultResponse.


        :param port_type: The port_type of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._port_type = port_type

    @property
    def mac_address(self):
        """Gets the mac_address of this DeviceIfResultResponse.  # noqa: E501


        :return: The mac_address of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this DeviceIfResultResponse.


        :param mac_address: The mac_address of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def isis_support(self):
        """Gets the isis_support of this DeviceIfResultResponse.  # noqa: E501


        :return: The isis_support of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._isis_support

    @isis_support.setter
    def isis_support(self, isis_support):
        """Sets the isis_support of this DeviceIfResultResponse.


        :param isis_support: The isis_support of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._isis_support = isis_support

    @property
    def series(self):
        """Gets the series of this DeviceIfResultResponse.  # noqa: E501


        :return: The series of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this DeviceIfResultResponse.


        :param series: The series of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._series = series

    @property
    def voice_vlan(self):
        """Gets the voice_vlan of this DeviceIfResultResponse.  # noqa: E501


        :return: The voice_vlan of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._voice_vlan

    @voice_vlan.setter
    def voice_vlan(self, voice_vlan):
        """Sets the voice_vlan of this DeviceIfResultResponse.


        :param voice_vlan: The voice_vlan of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._voice_vlan = voice_vlan

    @property
    def instance_uuid(self):
        """Gets the instance_uuid of this DeviceIfResultResponse.  # noqa: E501


        :return: The instance_uuid of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._instance_uuid

    @instance_uuid.setter
    def instance_uuid(self, instance_uuid):
        """Sets the instance_uuid of this DeviceIfResultResponse.


        :param instance_uuid: The instance_uuid of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._instance_uuid = instance_uuid

    @property
    def mapped_physical_interface_id(self):
        """Gets the mapped_physical_interface_id of this DeviceIfResultResponse.  # noqa: E501


        :return: The mapped_physical_interface_id of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._mapped_physical_interface_id

    @mapped_physical_interface_id.setter
    def mapped_physical_interface_id(self, mapped_physical_interface_id):
        """Sets the mapped_physical_interface_id of this DeviceIfResultResponse.


        :param mapped_physical_interface_id: The mapped_physical_interface_id of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._mapped_physical_interface_id = mapped_physical_interface_id

    @property
    def status(self):
        """Gets the status of this DeviceIfResultResponse.  # noqa: E501


        :return: The status of this DeviceIfResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceIfResultResponse.


        :param status: The status of this DeviceIfResultResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceIfResultResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
