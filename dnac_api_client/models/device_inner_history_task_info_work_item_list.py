# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeviceInnerHistoryTaskInfoWorkItemList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'command': 'str',
        'end_time': 'int',
        'output_str': 'str',
        'start_time': 'int',
        'state': 'str',
        'time_taken': 'int'
    }

    attribute_map = {
        'command': 'command',
        'end_time': 'endTime',
        'output_str': 'outputStr',
        'start_time': 'startTime',
        'state': 'state',
        'time_taken': 'timeTaken'
    }

    def __init__(self, command=None, end_time=None, output_str=None, start_time=None, state=None, time_taken=None):  # noqa: E501
        """DeviceInnerHistoryTaskInfoWorkItemList - a model defined in Swagger"""  # noqa: E501

        self._command = None
        self._end_time = None
        self._output_str = None
        self._start_time = None
        self._state = None
        self._time_taken = None
        self.discriminator = None

        if command is not None:
            self.command = command
        if end_time is not None:
            self.end_time = end_time
        if output_str is not None:
            self.output_str = output_str
        if start_time is not None:
            self.start_time = start_time
        if state is not None:
            self.state = state
        if time_taken is not None:
            self.time_taken = time_taken

    @property
    def command(self):
        """Gets the command of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501


        :return: The command of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this DeviceInnerHistoryTaskInfoWorkItemList.


        :param command: The command of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def end_time(self):
        """Gets the end_time of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501


        :return: The end_time of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DeviceInnerHistoryTaskInfoWorkItemList.


        :param end_time: The end_time of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def output_str(self):
        """Gets the output_str of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501


        :return: The output_str of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501
        :rtype: str
        """
        return self._output_str

    @output_str.setter
    def output_str(self, output_str):
        """Sets the output_str of this DeviceInnerHistoryTaskInfoWorkItemList.


        :param output_str: The output_str of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501
        :type: str
        """

        self._output_str = output_str

    @property
    def start_time(self):
        """Gets the start_time of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501


        :return: The start_time of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DeviceInnerHistoryTaskInfoWorkItemList.


        :param start_time: The start_time of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501


        :return: The state of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DeviceInnerHistoryTaskInfoWorkItemList.


        :param state: The state of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def time_taken(self):
        """Gets the time_taken of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501


        :return: The time_taken of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501
        :rtype: int
        """
        return self._time_taken

    @time_taken.setter
    def time_taken(self, time_taken):
        """Sets the time_taken of this DeviceInnerHistoryTaskInfoWorkItemList.


        :param time_taken: The time_taken of this DeviceInnerHistoryTaskInfoWorkItemList.  # noqa: E501
        :type: int
        """

        self._time_taken = time_taken

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceInnerHistoryTaskInfoWorkItemList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
