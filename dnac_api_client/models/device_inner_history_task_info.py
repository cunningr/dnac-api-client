# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dnac_api_client.models.claim_device_request_config_parameters import ClaimDeviceRequestConfigParameters  # noqa: F401,E501
from dnac_api_client.models.device_inner_history_task_info_work_item_list import DeviceInnerHistoryTaskInfoWorkItemList  # noqa: F401,E501


class DeviceInnerHistoryTaskInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addn_details': 'list[ClaimDeviceRequestConfigParameters]',
        'name': 'str',
        'time_taken': 'int',
        'type': 'str',
        'work_item_list': 'list[DeviceInnerHistoryTaskInfoWorkItemList]'
    }

    attribute_map = {
        'addn_details': 'addnDetails',
        'name': 'name',
        'time_taken': 'timeTaken',
        'type': 'type',
        'work_item_list': 'workItemList'
    }

    def __init__(self, addn_details=None, name=None, time_taken=None, type=None, work_item_list=None):  # noqa: E501
        """DeviceInnerHistoryTaskInfo - a model defined in Swagger"""  # noqa: E501

        self._addn_details = None
        self._name = None
        self._time_taken = None
        self._type = None
        self._work_item_list = None
        self.discriminator = None

        if addn_details is not None:
            self.addn_details = addn_details
        if name is not None:
            self.name = name
        if time_taken is not None:
            self.time_taken = time_taken
        if type is not None:
            self.type = type
        if work_item_list is not None:
            self.work_item_list = work_item_list

    @property
    def addn_details(self):
        """Gets the addn_details of this DeviceInnerHistoryTaskInfo.  # noqa: E501


        :return: The addn_details of this DeviceInnerHistoryTaskInfo.  # noqa: E501
        :rtype: list[ClaimDeviceRequestConfigParameters]
        """
        return self._addn_details

    @addn_details.setter
    def addn_details(self, addn_details):
        """Sets the addn_details of this DeviceInnerHistoryTaskInfo.


        :param addn_details: The addn_details of this DeviceInnerHistoryTaskInfo.  # noqa: E501
        :type: list[ClaimDeviceRequestConfigParameters]
        """

        self._addn_details = addn_details

    @property
    def name(self):
        """Gets the name of this DeviceInnerHistoryTaskInfo.  # noqa: E501


        :return: The name of this DeviceInnerHistoryTaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceInnerHistoryTaskInfo.


        :param name: The name of this DeviceInnerHistoryTaskInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def time_taken(self):
        """Gets the time_taken of this DeviceInnerHistoryTaskInfo.  # noqa: E501


        :return: The time_taken of this DeviceInnerHistoryTaskInfo.  # noqa: E501
        :rtype: int
        """
        return self._time_taken

    @time_taken.setter
    def time_taken(self, time_taken):
        """Sets the time_taken of this DeviceInnerHistoryTaskInfo.


        :param time_taken: The time_taken of this DeviceInnerHistoryTaskInfo.  # noqa: E501
        :type: int
        """

        self._time_taken = time_taken

    @property
    def type(self):
        """Gets the type of this DeviceInnerHistoryTaskInfo.  # noqa: E501


        :return: The type of this DeviceInnerHistoryTaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeviceInnerHistoryTaskInfo.


        :param type: The type of this DeviceInnerHistoryTaskInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def work_item_list(self):
        """Gets the work_item_list of this DeviceInnerHistoryTaskInfo.  # noqa: E501


        :return: The work_item_list of this DeviceInnerHistoryTaskInfo.  # noqa: E501
        :rtype: list[DeviceInnerHistoryTaskInfoWorkItemList]
        """
        return self._work_item_list

    @work_item_list.setter
    def work_item_list(self, work_item_list):
        """Sets the work_item_list of this DeviceInnerHistoryTaskInfo.


        :param work_item_list: The work_item_list of this DeviceInnerHistoryTaskInfo.  # noqa: E501
        :type: list[DeviceInnerHistoryTaskInfoWorkItemList]
        """

        self._work_item_list = work_item_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceInnerHistoryTaskInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
