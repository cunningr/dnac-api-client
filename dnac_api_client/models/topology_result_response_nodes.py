# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TopologyResultResponseNodes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'role': 'str',
        'upper_node': 'str',
        'additional_info': 'object',
        'os_type': 'str',
        'data_path_id': 'str',
        'id': 'str',
        'role_source': 'str',
        'network_type': 'str',
        'grey_out': 'bool',
        'order': 'int',
        'device_type': 'str',
        'vlan_id': 'str',
        'ip': 'str',
        'acl_applied': 'bool',
        'label': 'str',
        'platform_id': 'str',
        'node_type': 'str',
        'custom_param': 'TopologyResultResponseCustomParam',
        'user_id': 'str',
        'tags': 'list[str]',
        'x': 'int',
        'y': 'int',
        'fixed': 'bool',
        'family': 'str',
        'software_version': 'str'
    }

    attribute_map = {
        'role': 'role',
        'upper_node': 'upperNode',
        'additional_info': 'additionalInfo',
        'os_type': 'osType',
        'data_path_id': 'dataPathId',
        'id': 'id',
        'role_source': 'roleSource',
        'network_type': 'networkType',
        'grey_out': 'greyOut',
        'order': 'order',
        'device_type': 'deviceType',
        'vlan_id': 'vlanId',
        'ip': 'ip',
        'acl_applied': 'aclApplied',
        'label': 'label',
        'platform_id': 'platformId',
        'node_type': 'nodeType',
        'custom_param': 'customParam',
        'user_id': 'userId',
        'tags': 'tags',
        'x': 'x',
        'y': 'y',
        'fixed': 'fixed',
        'family': 'family',
        'software_version': 'softwareVersion'
    }

    def __init__(self, role=None, upper_node=None, additional_info=None, os_type=None, data_path_id=None, id=None, role_source=None, network_type=None, grey_out=None, order=None, device_type=None, vlan_id=None, ip=None, acl_applied=None, label=None, platform_id=None, node_type=None, custom_param=None, user_id=None, tags=None, x=None, y=None, fixed=None, family=None, software_version=None):  # noqa: E501
        """TopologyResultResponseNodes - a model defined in OpenAPI"""  # noqa: E501

        self._role = None
        self._upper_node = None
        self._additional_info = None
        self._os_type = None
        self._data_path_id = None
        self._id = None
        self._role_source = None
        self._network_type = None
        self._grey_out = None
        self._order = None
        self._device_type = None
        self._vlan_id = None
        self._ip = None
        self._acl_applied = None
        self._label = None
        self._platform_id = None
        self._node_type = None
        self._custom_param = None
        self._user_id = None
        self._tags = None
        self._x = None
        self._y = None
        self._fixed = None
        self._family = None
        self._software_version = None
        self.discriminator = None

        if role is not None:
            self.role = role
        if upper_node is not None:
            self.upper_node = upper_node
        if additional_info is not None:
            self.additional_info = additional_info
        if os_type is not None:
            self.os_type = os_type
        if data_path_id is not None:
            self.data_path_id = data_path_id
        if id is not None:
            self.id = id
        if role_source is not None:
            self.role_source = role_source
        if network_type is not None:
            self.network_type = network_type
        if grey_out is not None:
            self.grey_out = grey_out
        if order is not None:
            self.order = order
        if device_type is not None:
            self.device_type = device_type
        if vlan_id is not None:
            self.vlan_id = vlan_id
        if ip is not None:
            self.ip = ip
        if acl_applied is not None:
            self.acl_applied = acl_applied
        if label is not None:
            self.label = label
        if platform_id is not None:
            self.platform_id = platform_id
        if node_type is not None:
            self.node_type = node_type
        if custom_param is not None:
            self.custom_param = custom_param
        if user_id is not None:
            self.user_id = user_id
        if tags is not None:
            self.tags = tags
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if fixed is not None:
            self.fixed = fixed
        if family is not None:
            self.family = family
        if software_version is not None:
            self.software_version = software_version

    @property
    def role(self):
        """Gets the role of this TopologyResultResponseNodes.  # noqa: E501


        :return: The role of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this TopologyResultResponseNodes.


        :param role: The role of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def upper_node(self):
        """Gets the upper_node of this TopologyResultResponseNodes.  # noqa: E501


        :return: The upper_node of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._upper_node

    @upper_node.setter
    def upper_node(self, upper_node):
        """Sets the upper_node of this TopologyResultResponseNodes.


        :param upper_node: The upper_node of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._upper_node = upper_node

    @property
    def additional_info(self):
        """Gets the additional_info of this TopologyResultResponseNodes.  # noqa: E501


        :return: The additional_info of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: object
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this TopologyResultResponseNodes.


        :param additional_info: The additional_info of this TopologyResultResponseNodes.  # noqa: E501
        :type: object
        """

        self._additional_info = additional_info

    @property
    def os_type(self):
        """Gets the os_type of this TopologyResultResponseNodes.  # noqa: E501


        :return: The os_type of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this TopologyResultResponseNodes.


        :param os_type: The os_type of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._os_type = os_type

    @property
    def data_path_id(self):
        """Gets the data_path_id of this TopologyResultResponseNodes.  # noqa: E501


        :return: The data_path_id of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._data_path_id

    @data_path_id.setter
    def data_path_id(self, data_path_id):
        """Sets the data_path_id of this TopologyResultResponseNodes.


        :param data_path_id: The data_path_id of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._data_path_id = data_path_id

    @property
    def id(self):
        """Gets the id of this TopologyResultResponseNodes.  # noqa: E501


        :return: The id of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TopologyResultResponseNodes.


        :param id: The id of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def role_source(self):
        """Gets the role_source of this TopologyResultResponseNodes.  # noqa: E501


        :return: The role_source of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._role_source

    @role_source.setter
    def role_source(self, role_source):
        """Sets the role_source of this TopologyResultResponseNodes.


        :param role_source: The role_source of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._role_source = role_source

    @property
    def network_type(self):
        """Gets the network_type of this TopologyResultResponseNodes.  # noqa: E501


        :return: The network_type of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this TopologyResultResponseNodes.


        :param network_type: The network_type of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._network_type = network_type

    @property
    def grey_out(self):
        """Gets the grey_out of this TopologyResultResponseNodes.  # noqa: E501


        :return: The grey_out of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: bool
        """
        return self._grey_out

    @grey_out.setter
    def grey_out(self, grey_out):
        """Sets the grey_out of this TopologyResultResponseNodes.


        :param grey_out: The grey_out of this TopologyResultResponseNodes.  # noqa: E501
        :type: bool
        """

        self._grey_out = grey_out

    @property
    def order(self):
        """Gets the order of this TopologyResultResponseNodes.  # noqa: E501


        :return: The order of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this TopologyResultResponseNodes.


        :param order: The order of this TopologyResultResponseNodes.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def device_type(self):
        """Gets the device_type of this TopologyResultResponseNodes.  # noqa: E501


        :return: The device_type of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this TopologyResultResponseNodes.


        :param device_type: The device_type of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def vlan_id(self):
        """Gets the vlan_id of this TopologyResultResponseNodes.  # noqa: E501


        :return: The vlan_id of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this TopologyResultResponseNodes.


        :param vlan_id: The vlan_id of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._vlan_id = vlan_id

    @property
    def ip(self):
        """Gets the ip of this TopologyResultResponseNodes.  # noqa: E501


        :return: The ip of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this TopologyResultResponseNodes.


        :param ip: The ip of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def acl_applied(self):
        """Gets the acl_applied of this TopologyResultResponseNodes.  # noqa: E501


        :return: The acl_applied of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: bool
        """
        return self._acl_applied

    @acl_applied.setter
    def acl_applied(self, acl_applied):
        """Sets the acl_applied of this TopologyResultResponseNodes.


        :param acl_applied: The acl_applied of this TopologyResultResponseNodes.  # noqa: E501
        :type: bool
        """

        self._acl_applied = acl_applied

    @property
    def label(self):
        """Gets the label of this TopologyResultResponseNodes.  # noqa: E501


        :return: The label of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TopologyResultResponseNodes.


        :param label: The label of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def platform_id(self):
        """Gets the platform_id of this TopologyResultResponseNodes.  # noqa: E501


        :return: The platform_id of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this TopologyResultResponseNodes.


        :param platform_id: The platform_id of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._platform_id = platform_id

    @property
    def node_type(self):
        """Gets the node_type of this TopologyResultResponseNodes.  # noqa: E501


        :return: The node_type of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this TopologyResultResponseNodes.


        :param node_type: The node_type of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._node_type = node_type

    @property
    def custom_param(self):
        """Gets the custom_param of this TopologyResultResponseNodes.  # noqa: E501


        :return: The custom_param of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: TopologyResultResponseCustomParam
        """
        return self._custom_param

    @custom_param.setter
    def custom_param(self, custom_param):
        """Sets the custom_param of this TopologyResultResponseNodes.


        :param custom_param: The custom_param of this TopologyResultResponseNodes.  # noqa: E501
        :type: TopologyResultResponseCustomParam
        """

        self._custom_param = custom_param

    @property
    def user_id(self):
        """Gets the user_id of this TopologyResultResponseNodes.  # noqa: E501


        :return: The user_id of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TopologyResultResponseNodes.


        :param user_id: The user_id of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def tags(self):
        """Gets the tags of this TopologyResultResponseNodes.  # noqa: E501


        :return: The tags of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TopologyResultResponseNodes.


        :param tags: The tags of this TopologyResultResponseNodes.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def x(self):
        """Gets the x of this TopologyResultResponseNodes.  # noqa: E501


        :return: The x of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: int
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this TopologyResultResponseNodes.


        :param x: The x of this TopologyResultResponseNodes.  # noqa: E501
        :type: int
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this TopologyResultResponseNodes.  # noqa: E501


        :return: The y of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: int
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this TopologyResultResponseNodes.


        :param y: The y of this TopologyResultResponseNodes.  # noqa: E501
        :type: int
        """

        self._y = y

    @property
    def fixed(self):
        """Gets the fixed of this TopologyResultResponseNodes.  # noqa: E501


        :return: The fixed of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: bool
        """
        return self._fixed

    @fixed.setter
    def fixed(self, fixed):
        """Sets the fixed of this TopologyResultResponseNodes.


        :param fixed: The fixed of this TopologyResultResponseNodes.  # noqa: E501
        :type: bool
        """

        self._fixed = fixed

    @property
    def family(self):
        """Gets the family of this TopologyResultResponseNodes.  # noqa: E501


        :return: The family of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this TopologyResultResponseNodes.


        :param family: The family of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._family = family

    @property
    def software_version(self):
        """Gets the software_version of this TopologyResultResponseNodes.  # noqa: E501


        :return: The software_version of this TopologyResultResponseNodes.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this TopologyResultResponseNodes.


        :param software_version: The software_version of this TopologyResultResponseNodes.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopologyResultResponseNodes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
