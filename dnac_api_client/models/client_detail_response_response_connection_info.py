# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClientDetailResponseResponseConnectionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'band': 'str',
        'channel': 'str',
        'channel_width': 'str',
        'host_type': 'str',
        'nw_device_mac': 'str',
        'nw_device_name': 'str',
        'protocol': 'str',
        'spatial_stream': 'str',
        'timestamp': 'str',
        'uapsd': 'str',
        'wmm': 'str'
    }

    attribute_map = {
        'band': 'band',
        'channel': 'channel',
        'channel_width': 'channelWidth',
        'host_type': 'hostType',
        'nw_device_mac': 'nwDeviceMac',
        'nw_device_name': 'nwDeviceName',
        'protocol': 'protocol',
        'spatial_stream': 'spatialStream',
        'timestamp': 'timestamp',
        'uapsd': 'uapsd',
        'wmm': 'wmm'
    }

    def __init__(self, band=None, channel=None, channel_width=None, host_type=None, nw_device_mac=None, nw_device_name=None, protocol=None, spatial_stream=None, timestamp=None, uapsd=None, wmm=None):  # noqa: E501
        """ClientDetailResponseResponseConnectionInfo - a model defined in Swagger"""  # noqa: E501

        self._band = None
        self._channel = None
        self._channel_width = None
        self._host_type = None
        self._nw_device_mac = None
        self._nw_device_name = None
        self._protocol = None
        self._spatial_stream = None
        self._timestamp = None
        self._uapsd = None
        self._wmm = None
        self.discriminator = None

        if band is not None:
            self.band = band
        if channel is not None:
            self.channel = channel
        if channel_width is not None:
            self.channel_width = channel_width
        if host_type is not None:
            self.host_type = host_type
        if nw_device_mac is not None:
            self.nw_device_mac = nw_device_mac
        if nw_device_name is not None:
            self.nw_device_name = nw_device_name
        if protocol is not None:
            self.protocol = protocol
        if spatial_stream is not None:
            self.spatial_stream = spatial_stream
        if timestamp is not None:
            self.timestamp = timestamp
        if uapsd is not None:
            self.uapsd = uapsd
        if wmm is not None:
            self.wmm = wmm

    @property
    def band(self):
        """Gets the band of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501


        :return: The band of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._band

    @band.setter
    def band(self, band):
        """Sets the band of this ClientDetailResponseResponseConnectionInfo.


        :param band: The band of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :type: str
        """

        self._band = band

    @property
    def channel(self):
        """Gets the channel of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501


        :return: The channel of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ClientDetailResponseResponseConnectionInfo.


        :param channel: The channel of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :type: str
        """

        self._channel = channel

    @property
    def channel_width(self):
        """Gets the channel_width of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501


        :return: The channel_width of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._channel_width

    @channel_width.setter
    def channel_width(self, channel_width):
        """Sets the channel_width of this ClientDetailResponseResponseConnectionInfo.


        :param channel_width: The channel_width of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :type: str
        """

        self._channel_width = channel_width

    @property
    def host_type(self):
        """Gets the host_type of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501


        :return: The host_type of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._host_type

    @host_type.setter
    def host_type(self, host_type):
        """Sets the host_type of this ClientDetailResponseResponseConnectionInfo.


        :param host_type: The host_type of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :type: str
        """

        self._host_type = host_type

    @property
    def nw_device_mac(self):
        """Gets the nw_device_mac of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501


        :return: The nw_device_mac of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._nw_device_mac

    @nw_device_mac.setter
    def nw_device_mac(self, nw_device_mac):
        """Sets the nw_device_mac of this ClientDetailResponseResponseConnectionInfo.


        :param nw_device_mac: The nw_device_mac of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :type: str
        """

        self._nw_device_mac = nw_device_mac

    @property
    def nw_device_name(self):
        """Gets the nw_device_name of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501


        :return: The nw_device_name of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._nw_device_name

    @nw_device_name.setter
    def nw_device_name(self, nw_device_name):
        """Sets the nw_device_name of this ClientDetailResponseResponseConnectionInfo.


        :param nw_device_name: The nw_device_name of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :type: str
        """

        self._nw_device_name = nw_device_name

    @property
    def protocol(self):
        """Gets the protocol of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501


        :return: The protocol of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ClientDetailResponseResponseConnectionInfo.


        :param protocol: The protocol of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def spatial_stream(self):
        """Gets the spatial_stream of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501


        :return: The spatial_stream of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._spatial_stream

    @spatial_stream.setter
    def spatial_stream(self, spatial_stream):
        """Sets the spatial_stream of this ClientDetailResponseResponseConnectionInfo.


        :param spatial_stream: The spatial_stream of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :type: str
        """

        self._spatial_stream = spatial_stream

    @property
    def timestamp(self):
        """Gets the timestamp of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501


        :return: The timestamp of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ClientDetailResponseResponseConnectionInfo.


        :param timestamp: The timestamp of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def uapsd(self):
        """Gets the uapsd of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501


        :return: The uapsd of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._uapsd

    @uapsd.setter
    def uapsd(self, uapsd):
        """Sets the uapsd of this ClientDetailResponseResponseConnectionInfo.


        :param uapsd: The uapsd of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :type: str
        """

        self._uapsd = uapsd

    @property
    def wmm(self):
        """Gets the wmm of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501


        :return: The wmm of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._wmm

    @wmm.setter
    def wmm(self, wmm):
        """Sets the wmm of this ClientDetailResponseResponseConnectionInfo.


        :param wmm: The wmm of this ClientDetailResponseResponseConnectionInfo.  # noqa: E501
        :type: str
        """

        self._wmm = wmm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientDetailResponseResponseConnectionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
