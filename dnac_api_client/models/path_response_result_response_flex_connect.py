# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dnac_api_client.models.path_response_result_response_egress_physical_interface_acl_analysis import PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis  # noqa: F401,E501


class PathResponseResultResponseFlexConnect(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication': 'str',
        'data_switching': 'str',
        'egress_acl_analysis': 'PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis',
        'ingress_acl_analysis': 'PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis',
        'wireless_lan_controller_id': 'str',
        'wireless_lan_controller_name': 'str'
    }

    attribute_map = {
        'authentication': 'authentication',
        'data_switching': 'dataSwitching',
        'egress_acl_analysis': 'egressAclAnalysis',
        'ingress_acl_analysis': 'ingressAclAnalysis',
        'wireless_lan_controller_id': 'wirelessLanControllerId',
        'wireless_lan_controller_name': 'wirelessLanControllerName'
    }

    def __init__(self, authentication=None, data_switching=None, egress_acl_analysis=None, ingress_acl_analysis=None, wireless_lan_controller_id=None, wireless_lan_controller_name=None):  # noqa: E501
        """PathResponseResultResponseFlexConnect - a model defined in Swagger"""  # noqa: E501

        self._authentication = None
        self._data_switching = None
        self._egress_acl_analysis = None
        self._ingress_acl_analysis = None
        self._wireless_lan_controller_id = None
        self._wireless_lan_controller_name = None
        self.discriminator = None

        if authentication is not None:
            self.authentication = authentication
        if data_switching is not None:
            self.data_switching = data_switching
        if egress_acl_analysis is not None:
            self.egress_acl_analysis = egress_acl_analysis
        if ingress_acl_analysis is not None:
            self.ingress_acl_analysis = ingress_acl_analysis
        if wireless_lan_controller_id is not None:
            self.wireless_lan_controller_id = wireless_lan_controller_id
        if wireless_lan_controller_name is not None:
            self.wireless_lan_controller_name = wireless_lan_controller_name

    @property
    def authentication(self):
        """Gets the authentication of this PathResponseResultResponseFlexConnect.  # noqa: E501


        :return: The authentication of this PathResponseResultResponseFlexConnect.  # noqa: E501
        :rtype: str
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this PathResponseResultResponseFlexConnect.


        :param authentication: The authentication of this PathResponseResultResponseFlexConnect.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOCAL", "CENTRAL"]  # noqa: E501
        if authentication not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication` ({0}), must be one of {1}"  # noqa: E501
                .format(authentication, allowed_values)
            )

        self._authentication = authentication

    @property
    def data_switching(self):
        """Gets the data_switching of this PathResponseResultResponseFlexConnect.  # noqa: E501


        :return: The data_switching of this PathResponseResultResponseFlexConnect.  # noqa: E501
        :rtype: str
        """
        return self._data_switching

    @data_switching.setter
    def data_switching(self, data_switching):
        """Sets the data_switching of this PathResponseResultResponseFlexConnect.


        :param data_switching: The data_switching of this PathResponseResultResponseFlexConnect.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOCAL", "CENTRAL"]  # noqa: E501
        if data_switching not in allowed_values:
            raise ValueError(
                "Invalid value for `data_switching` ({0}), must be one of {1}"  # noqa: E501
                .format(data_switching, allowed_values)
            )

        self._data_switching = data_switching

    @property
    def egress_acl_analysis(self):
        """Gets the egress_acl_analysis of this PathResponseResultResponseFlexConnect.  # noqa: E501


        :return: The egress_acl_analysis of this PathResponseResultResponseFlexConnect.  # noqa: E501
        :rtype: PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis
        """
        return self._egress_acl_analysis

    @egress_acl_analysis.setter
    def egress_acl_analysis(self, egress_acl_analysis):
        """Sets the egress_acl_analysis of this PathResponseResultResponseFlexConnect.


        :param egress_acl_analysis: The egress_acl_analysis of this PathResponseResultResponseFlexConnect.  # noqa: E501
        :type: PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis
        """

        self._egress_acl_analysis = egress_acl_analysis

    @property
    def ingress_acl_analysis(self):
        """Gets the ingress_acl_analysis of this PathResponseResultResponseFlexConnect.  # noqa: E501


        :return: The ingress_acl_analysis of this PathResponseResultResponseFlexConnect.  # noqa: E501
        :rtype: PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis
        """
        return self._ingress_acl_analysis

    @ingress_acl_analysis.setter
    def ingress_acl_analysis(self, ingress_acl_analysis):
        """Sets the ingress_acl_analysis of this PathResponseResultResponseFlexConnect.


        :param ingress_acl_analysis: The ingress_acl_analysis of this PathResponseResultResponseFlexConnect.  # noqa: E501
        :type: PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis
        """

        self._ingress_acl_analysis = ingress_acl_analysis

    @property
    def wireless_lan_controller_id(self):
        """Gets the wireless_lan_controller_id of this PathResponseResultResponseFlexConnect.  # noqa: E501


        :return: The wireless_lan_controller_id of this PathResponseResultResponseFlexConnect.  # noqa: E501
        :rtype: str
        """
        return self._wireless_lan_controller_id

    @wireless_lan_controller_id.setter
    def wireless_lan_controller_id(self, wireless_lan_controller_id):
        """Sets the wireless_lan_controller_id of this PathResponseResultResponseFlexConnect.


        :param wireless_lan_controller_id: The wireless_lan_controller_id of this PathResponseResultResponseFlexConnect.  # noqa: E501
        :type: str
        """

        self._wireless_lan_controller_id = wireless_lan_controller_id

    @property
    def wireless_lan_controller_name(self):
        """Gets the wireless_lan_controller_name of this PathResponseResultResponseFlexConnect.  # noqa: E501


        :return: The wireless_lan_controller_name of this PathResponseResultResponseFlexConnect.  # noqa: E501
        :rtype: str
        """
        return self._wireless_lan_controller_name

    @wireless_lan_controller_name.setter
    def wireless_lan_controller_name(self, wireless_lan_controller_name):
        """Sets the wireless_lan_controller_name of this PathResponseResultResponseFlexConnect.


        :param wireless_lan_controller_name: The wireless_lan_controller_name of this PathResponseResultResponseFlexConnect.  # noqa: E501
        :type: str
        """

        self._wireless_lan_controller_name = wireless_lan_controller_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PathResponseResultResponseFlexConnect):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
