# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FunctionalCapabilityListResultResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attribute_info': 'object',
        'functional_capability': 'list[FunctionalCapabilityListResultFunctionalCapability]',
        'id': 'str',
        'device_id': 'str'
    }

    attribute_map = {
        'attribute_info': 'attributeInfo',
        'functional_capability': 'functionalCapability',
        'id': 'id',
        'device_id': 'deviceId'
    }

    def __init__(self, attribute_info=None, functional_capability=None, id=None, device_id=None):  # noqa: E501
        """FunctionalCapabilityListResultResponse - a model defined in OpenAPI"""  # noqa: E501

        self._attribute_info = None
        self._functional_capability = None
        self._id = None
        self._device_id = None
        self.discriminator = None

        if attribute_info is not None:
            self.attribute_info = attribute_info
        if functional_capability is not None:
            self.functional_capability = functional_capability
        if id is not None:
            self.id = id
        if device_id is not None:
            self.device_id = device_id

    @property
    def attribute_info(self):
        """Gets the attribute_info of this FunctionalCapabilityListResultResponse.  # noqa: E501


        :return: The attribute_info of this FunctionalCapabilityListResultResponse.  # noqa: E501
        :rtype: object
        """
        return self._attribute_info

    @attribute_info.setter
    def attribute_info(self, attribute_info):
        """Sets the attribute_info of this FunctionalCapabilityListResultResponse.


        :param attribute_info: The attribute_info of this FunctionalCapabilityListResultResponse.  # noqa: E501
        :type: object
        """

        self._attribute_info = attribute_info

    @property
    def functional_capability(self):
        """Gets the functional_capability of this FunctionalCapabilityListResultResponse.  # noqa: E501


        :return: The functional_capability of this FunctionalCapabilityListResultResponse.  # noqa: E501
        :rtype: list[FunctionalCapabilityListResultFunctionalCapability]
        """
        return self._functional_capability

    @functional_capability.setter
    def functional_capability(self, functional_capability):
        """Sets the functional_capability of this FunctionalCapabilityListResultResponse.


        :param functional_capability: The functional_capability of this FunctionalCapabilityListResultResponse.  # noqa: E501
        :type: list[FunctionalCapabilityListResultFunctionalCapability]
        """

        self._functional_capability = functional_capability

    @property
    def id(self):
        """Gets the id of this FunctionalCapabilityListResultResponse.  # noqa: E501


        :return: The id of this FunctionalCapabilityListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FunctionalCapabilityListResultResponse.


        :param id: The id of this FunctionalCapabilityListResultResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def device_id(self):
        """Gets the device_id of this FunctionalCapabilityListResultResponse.  # noqa: E501


        :return: The device_id of this FunctionalCapabilityListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this FunctionalCapabilityListResultResponse.


        :param device_id: The device_id of this FunctionalCapabilityListResultResponse.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FunctionalCapabilityListResultResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
