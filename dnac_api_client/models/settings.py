# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dnac_api_client.models.device_inner_device_info_aaa_credentials import DeviceInnerDeviceInfoAaaCredentials  # noqa: F401,E501
from dnac_api_client.models.settings_default_profile import SettingsDefaultProfile  # noqa: F401,E501
from dnac_api_client.models.settings_sava_mapping_list import SettingsSavaMappingList  # noqa: F401,E501
from dnac_api_client.models.settings_task_time_outs import SettingsTaskTimeOuts  # noqa: F401,E501


class Settings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'aaa_credentials': 'DeviceInnerDeviceInfoAaaCredentials',
        'accept_eula': 'bool',
        'default_profile': 'SettingsDefaultProfile',
        'sava_mapping_list': 'list[SettingsSavaMappingList]',
        'task_time_outs': 'SettingsTaskTimeOuts',
        'tenant_id': 'str',
        'version': 'int'
    }

    attribute_map = {
        'id': '_id',
        'aaa_credentials': 'aaaCredentials',
        'accept_eula': 'acceptEula',
        'default_profile': 'defaultProfile',
        'sava_mapping_list': 'savaMappingList',
        'task_time_outs': 'taskTimeOuts',
        'tenant_id': 'tenantId',
        'version': 'version'
    }

    def __init__(self, id=None, aaa_credentials=None, accept_eula=None, default_profile=None, sava_mapping_list=None, task_time_outs=None, tenant_id=None, version=None):  # noqa: E501
        """Settings - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._aaa_credentials = None
        self._accept_eula = None
        self._default_profile = None
        self._sava_mapping_list = None
        self._task_time_outs = None
        self._tenant_id = None
        self._version = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if aaa_credentials is not None:
            self.aaa_credentials = aaa_credentials
        if accept_eula is not None:
            self.accept_eula = accept_eula
        if default_profile is not None:
            self.default_profile = default_profile
        if sava_mapping_list is not None:
            self.sava_mapping_list = sava_mapping_list
        if task_time_outs is not None:
            self.task_time_outs = task_time_outs
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if version is not None:
            self.version = version

    @property
    def id(self):
        """Gets the id of this Settings.  # noqa: E501


        :return: The id of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Settings.


        :param id: The id of this Settings.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def aaa_credentials(self):
        """Gets the aaa_credentials of this Settings.  # noqa: E501


        :return: The aaa_credentials of this Settings.  # noqa: E501
        :rtype: DeviceInnerDeviceInfoAaaCredentials
        """
        return self._aaa_credentials

    @aaa_credentials.setter
    def aaa_credentials(self, aaa_credentials):
        """Sets the aaa_credentials of this Settings.


        :param aaa_credentials: The aaa_credentials of this Settings.  # noqa: E501
        :type: DeviceInnerDeviceInfoAaaCredentials
        """

        self._aaa_credentials = aaa_credentials

    @property
    def accept_eula(self):
        """Gets the accept_eula of this Settings.  # noqa: E501


        :return: The accept_eula of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._accept_eula

    @accept_eula.setter
    def accept_eula(self, accept_eula):
        """Sets the accept_eula of this Settings.


        :param accept_eula: The accept_eula of this Settings.  # noqa: E501
        :type: bool
        """

        self._accept_eula = accept_eula

    @property
    def default_profile(self):
        """Gets the default_profile of this Settings.  # noqa: E501


        :return: The default_profile of this Settings.  # noqa: E501
        :rtype: SettingsDefaultProfile
        """
        return self._default_profile

    @default_profile.setter
    def default_profile(self, default_profile):
        """Sets the default_profile of this Settings.


        :param default_profile: The default_profile of this Settings.  # noqa: E501
        :type: SettingsDefaultProfile
        """

        self._default_profile = default_profile

    @property
    def sava_mapping_list(self):
        """Gets the sava_mapping_list of this Settings.  # noqa: E501


        :return: The sava_mapping_list of this Settings.  # noqa: E501
        :rtype: list[SettingsSavaMappingList]
        """
        return self._sava_mapping_list

    @sava_mapping_list.setter
    def sava_mapping_list(self, sava_mapping_list):
        """Sets the sava_mapping_list of this Settings.


        :param sava_mapping_list: The sava_mapping_list of this Settings.  # noqa: E501
        :type: list[SettingsSavaMappingList]
        """

        self._sava_mapping_list = sava_mapping_list

    @property
    def task_time_outs(self):
        """Gets the task_time_outs of this Settings.  # noqa: E501


        :return: The task_time_outs of this Settings.  # noqa: E501
        :rtype: SettingsTaskTimeOuts
        """
        return self._task_time_outs

    @task_time_outs.setter
    def task_time_outs(self, task_time_outs):
        """Sets the task_time_outs of this Settings.


        :param task_time_outs: The task_time_outs of this Settings.  # noqa: E501
        :type: SettingsTaskTimeOuts
        """

        self._task_time_outs = task_time_outs

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Settings.  # noqa: E501


        :return: The tenant_id of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Settings.


        :param tenant_id: The tenant_id of this Settings.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def version(self):
        """Gets the version of this Settings.  # noqa: E501


        :return: The version of this Settings.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Settings.


        :param version: The version of this Settings.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Settings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
