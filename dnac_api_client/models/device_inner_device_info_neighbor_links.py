# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeviceInnerDeviceInfoNeighborLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'local_interface_name': 'str',
        'local_mac_address': 'str',
        'local_short_interface_name': 'str',
        'remote_device_name': 'str',
        'remote_interface_name': 'str',
        'remote_mac_address': 'str',
        'remote_platform': 'str',
        'remote_short_interface_name': 'str',
        'remote_version': 'str'
    }

    attribute_map = {
        'local_interface_name': 'localInterfaceName',
        'local_mac_address': 'localMacAddress',
        'local_short_interface_name': 'localShortInterfaceName',
        'remote_device_name': 'remoteDeviceName',
        'remote_interface_name': 'remoteInterfaceName',
        'remote_mac_address': 'remoteMacAddress',
        'remote_platform': 'remotePlatform',
        'remote_short_interface_name': 'remoteShortInterfaceName',
        'remote_version': 'remoteVersion'
    }

    def __init__(self, local_interface_name=None, local_mac_address=None, local_short_interface_name=None, remote_device_name=None, remote_interface_name=None, remote_mac_address=None, remote_platform=None, remote_short_interface_name=None, remote_version=None):  # noqa: E501
        """DeviceInnerDeviceInfoNeighborLinks - a model defined in Swagger"""  # noqa: E501

        self._local_interface_name = None
        self._local_mac_address = None
        self._local_short_interface_name = None
        self._remote_device_name = None
        self._remote_interface_name = None
        self._remote_mac_address = None
        self._remote_platform = None
        self._remote_short_interface_name = None
        self._remote_version = None
        self.discriminator = None

        if local_interface_name is not None:
            self.local_interface_name = local_interface_name
        if local_mac_address is not None:
            self.local_mac_address = local_mac_address
        if local_short_interface_name is not None:
            self.local_short_interface_name = local_short_interface_name
        if remote_device_name is not None:
            self.remote_device_name = remote_device_name
        if remote_interface_name is not None:
            self.remote_interface_name = remote_interface_name
        if remote_mac_address is not None:
            self.remote_mac_address = remote_mac_address
        if remote_platform is not None:
            self.remote_platform = remote_platform
        if remote_short_interface_name is not None:
            self.remote_short_interface_name = remote_short_interface_name
        if remote_version is not None:
            self.remote_version = remote_version

    @property
    def local_interface_name(self):
        """Gets the local_interface_name of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501


        :return: The local_interface_name of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :rtype: str
        """
        return self._local_interface_name

    @local_interface_name.setter
    def local_interface_name(self, local_interface_name):
        """Sets the local_interface_name of this DeviceInnerDeviceInfoNeighborLinks.


        :param local_interface_name: The local_interface_name of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :type: str
        """

        self._local_interface_name = local_interface_name

    @property
    def local_mac_address(self):
        """Gets the local_mac_address of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501


        :return: The local_mac_address of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :rtype: str
        """
        return self._local_mac_address

    @local_mac_address.setter
    def local_mac_address(self, local_mac_address):
        """Sets the local_mac_address of this DeviceInnerDeviceInfoNeighborLinks.


        :param local_mac_address: The local_mac_address of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :type: str
        """

        self._local_mac_address = local_mac_address

    @property
    def local_short_interface_name(self):
        """Gets the local_short_interface_name of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501


        :return: The local_short_interface_name of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :rtype: str
        """
        return self._local_short_interface_name

    @local_short_interface_name.setter
    def local_short_interface_name(self, local_short_interface_name):
        """Sets the local_short_interface_name of this DeviceInnerDeviceInfoNeighborLinks.


        :param local_short_interface_name: The local_short_interface_name of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :type: str
        """

        self._local_short_interface_name = local_short_interface_name

    @property
    def remote_device_name(self):
        """Gets the remote_device_name of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501


        :return: The remote_device_name of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :rtype: str
        """
        return self._remote_device_name

    @remote_device_name.setter
    def remote_device_name(self, remote_device_name):
        """Sets the remote_device_name of this DeviceInnerDeviceInfoNeighborLinks.


        :param remote_device_name: The remote_device_name of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :type: str
        """

        self._remote_device_name = remote_device_name

    @property
    def remote_interface_name(self):
        """Gets the remote_interface_name of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501


        :return: The remote_interface_name of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :rtype: str
        """
        return self._remote_interface_name

    @remote_interface_name.setter
    def remote_interface_name(self, remote_interface_name):
        """Sets the remote_interface_name of this DeviceInnerDeviceInfoNeighborLinks.


        :param remote_interface_name: The remote_interface_name of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :type: str
        """

        self._remote_interface_name = remote_interface_name

    @property
    def remote_mac_address(self):
        """Gets the remote_mac_address of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501


        :return: The remote_mac_address of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :rtype: str
        """
        return self._remote_mac_address

    @remote_mac_address.setter
    def remote_mac_address(self, remote_mac_address):
        """Sets the remote_mac_address of this DeviceInnerDeviceInfoNeighborLinks.


        :param remote_mac_address: The remote_mac_address of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :type: str
        """

        self._remote_mac_address = remote_mac_address

    @property
    def remote_platform(self):
        """Gets the remote_platform of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501


        :return: The remote_platform of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :rtype: str
        """
        return self._remote_platform

    @remote_platform.setter
    def remote_platform(self, remote_platform):
        """Sets the remote_platform of this DeviceInnerDeviceInfoNeighborLinks.


        :param remote_platform: The remote_platform of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :type: str
        """

        self._remote_platform = remote_platform

    @property
    def remote_short_interface_name(self):
        """Gets the remote_short_interface_name of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501


        :return: The remote_short_interface_name of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :rtype: str
        """
        return self._remote_short_interface_name

    @remote_short_interface_name.setter
    def remote_short_interface_name(self, remote_short_interface_name):
        """Sets the remote_short_interface_name of this DeviceInnerDeviceInfoNeighborLinks.


        :param remote_short_interface_name: The remote_short_interface_name of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :type: str
        """

        self._remote_short_interface_name = remote_short_interface_name

    @property
    def remote_version(self):
        """Gets the remote_version of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501


        :return: The remote_version of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :rtype: str
        """
        return self._remote_version

    @remote_version.setter
    def remote_version(self, remote_version):
        """Sets the remote_version of this DeviceInnerDeviceInfoNeighborLinks.


        :param remote_version: The remote_version of this DeviceInnerDeviceInfoNeighborLinks.  # noqa: E501
        :type: str
        """

        self._remote_version = remote_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceInnerDeviceInfoNeighborLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
