# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TemplateDeploymentStatusDTODevices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'str',
        'duration': 'str',
        'end_time': 'str',
        'ip_address': 'str',
        'name': 'str',
        'start_time': 'str',
        'status': 'str'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'duration': 'duration',
        'end_time': 'endTime',
        'ip_address': 'ipAddress',
        'name': 'name',
        'start_time': 'startTime',
        'status': 'status'
    }

    def __init__(self, device_id=None, duration=None, end_time=None, ip_address=None, name=None, start_time=None, status=None):  # noqa: E501
        """TemplateDeploymentStatusDTODevices - a model defined in Swagger"""  # noqa: E501

        self._device_id = None
        self._duration = None
        self._end_time = None
        self._ip_address = None
        self._name = None
        self._start_time = None
        self._status = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if duration is not None:
            self.duration = duration
        if end_time is not None:
            self.end_time = end_time
        if ip_address is not None:
            self.ip_address = ip_address
        if name is not None:
            self.name = name
        if start_time is not None:
            self.start_time = start_time
        if status is not None:
            self.status = status

    @property
    def device_id(self):
        """Gets the device_id of this TemplateDeploymentStatusDTODevices.  # noqa: E501


        :return: The device_id of this TemplateDeploymentStatusDTODevices.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this TemplateDeploymentStatusDTODevices.


        :param device_id: The device_id of this TemplateDeploymentStatusDTODevices.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def duration(self):
        """Gets the duration of this TemplateDeploymentStatusDTODevices.  # noqa: E501


        :return: The duration of this TemplateDeploymentStatusDTODevices.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TemplateDeploymentStatusDTODevices.


        :param duration: The duration of this TemplateDeploymentStatusDTODevices.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def end_time(self):
        """Gets the end_time of this TemplateDeploymentStatusDTODevices.  # noqa: E501


        :return: The end_time of this TemplateDeploymentStatusDTODevices.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TemplateDeploymentStatusDTODevices.


        :param end_time: The end_time of this TemplateDeploymentStatusDTODevices.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def ip_address(self):
        """Gets the ip_address of this TemplateDeploymentStatusDTODevices.  # noqa: E501


        :return: The ip_address of this TemplateDeploymentStatusDTODevices.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this TemplateDeploymentStatusDTODevices.


        :param ip_address: The ip_address of this TemplateDeploymentStatusDTODevices.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def name(self):
        """Gets the name of this TemplateDeploymentStatusDTODevices.  # noqa: E501


        :return: The name of this TemplateDeploymentStatusDTODevices.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplateDeploymentStatusDTODevices.


        :param name: The name of this TemplateDeploymentStatusDTODevices.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_time(self):
        """Gets the start_time of this TemplateDeploymentStatusDTODevices.  # noqa: E501


        :return: The start_time of this TemplateDeploymentStatusDTODevices.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TemplateDeploymentStatusDTODevices.


        :param start_time: The start_time of this TemplateDeploymentStatusDTODevices.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this TemplateDeploymentStatusDTODevices.  # noqa: E501


        :return: The status of this TemplateDeploymentStatusDTODevices.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TemplateDeploymentStatusDTODevices.


        :param status: The status of this TemplateDeploymentStatusDTODevices.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateDeploymentStatusDTODevices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
