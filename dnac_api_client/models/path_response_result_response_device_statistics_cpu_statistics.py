# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PathResponseResultResponseDeviceStatisticsCpuStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'five_secs_usage_in_percentage': 'float',
        'refreshed_at': 'int',
        'five_min_usage_in_percentage': 'float',
        'one_min_usage_in_percentage': 'float'
    }

    attribute_map = {
        'five_secs_usage_in_percentage': 'fiveSecsUsageInPercentage',
        'refreshed_at': 'refreshedAt',
        'five_min_usage_in_percentage': 'fiveMinUsageInPercentage',
        'one_min_usage_in_percentage': 'oneMinUsageInPercentage'
    }

    def __init__(self, five_secs_usage_in_percentage=None, refreshed_at=None, five_min_usage_in_percentage=None, one_min_usage_in_percentage=None):  # noqa: E501
        """PathResponseResultResponseDeviceStatisticsCpuStatistics - a model defined in OpenAPI"""  # noqa: E501

        self._five_secs_usage_in_percentage = None
        self._refreshed_at = None
        self._five_min_usage_in_percentage = None
        self._one_min_usage_in_percentage = None
        self.discriminator = None

        if five_secs_usage_in_percentage is not None:
            self.five_secs_usage_in_percentage = five_secs_usage_in_percentage
        if refreshed_at is not None:
            self.refreshed_at = refreshed_at
        if five_min_usage_in_percentage is not None:
            self.five_min_usage_in_percentage = five_min_usage_in_percentage
        if one_min_usage_in_percentage is not None:
            self.one_min_usage_in_percentage = one_min_usage_in_percentage

    @property
    def five_secs_usage_in_percentage(self):
        """Gets the five_secs_usage_in_percentage of this PathResponseResultResponseDeviceStatisticsCpuStatistics.  # noqa: E501


        :return: The five_secs_usage_in_percentage of this PathResponseResultResponseDeviceStatisticsCpuStatistics.  # noqa: E501
        :rtype: float
        """
        return self._five_secs_usage_in_percentage

    @five_secs_usage_in_percentage.setter
    def five_secs_usage_in_percentage(self, five_secs_usage_in_percentage):
        """Sets the five_secs_usage_in_percentage of this PathResponseResultResponseDeviceStatisticsCpuStatistics.


        :param five_secs_usage_in_percentage: The five_secs_usage_in_percentage of this PathResponseResultResponseDeviceStatisticsCpuStatistics.  # noqa: E501
        :type: float
        """

        self._five_secs_usage_in_percentage = five_secs_usage_in_percentage

    @property
    def refreshed_at(self):
        """Gets the refreshed_at of this PathResponseResultResponseDeviceStatisticsCpuStatistics.  # noqa: E501


        :return: The refreshed_at of this PathResponseResultResponseDeviceStatisticsCpuStatistics.  # noqa: E501
        :rtype: int
        """
        return self._refreshed_at

    @refreshed_at.setter
    def refreshed_at(self, refreshed_at):
        """Sets the refreshed_at of this PathResponseResultResponseDeviceStatisticsCpuStatistics.


        :param refreshed_at: The refreshed_at of this PathResponseResultResponseDeviceStatisticsCpuStatistics.  # noqa: E501
        :type: int
        """

        self._refreshed_at = refreshed_at

    @property
    def five_min_usage_in_percentage(self):
        """Gets the five_min_usage_in_percentage of this PathResponseResultResponseDeviceStatisticsCpuStatistics.  # noqa: E501


        :return: The five_min_usage_in_percentage of this PathResponseResultResponseDeviceStatisticsCpuStatistics.  # noqa: E501
        :rtype: float
        """
        return self._five_min_usage_in_percentage

    @five_min_usage_in_percentage.setter
    def five_min_usage_in_percentage(self, five_min_usage_in_percentage):
        """Sets the five_min_usage_in_percentage of this PathResponseResultResponseDeviceStatisticsCpuStatistics.


        :param five_min_usage_in_percentage: The five_min_usage_in_percentage of this PathResponseResultResponseDeviceStatisticsCpuStatistics.  # noqa: E501
        :type: float
        """

        self._five_min_usage_in_percentage = five_min_usage_in_percentage

    @property
    def one_min_usage_in_percentage(self):
        """Gets the one_min_usage_in_percentage of this PathResponseResultResponseDeviceStatisticsCpuStatistics.  # noqa: E501


        :return: The one_min_usage_in_percentage of this PathResponseResultResponseDeviceStatisticsCpuStatistics.  # noqa: E501
        :rtype: float
        """
        return self._one_min_usage_in_percentage

    @one_min_usage_in_percentage.setter
    def one_min_usage_in_percentage(self, one_min_usage_in_percentage):
        """Sets the one_min_usage_in_percentage of this PathResponseResultResponseDeviceStatisticsCpuStatistics.


        :param one_min_usage_in_percentage: The one_min_usage_in_percentage of this PathResponseResultResponseDeviceStatisticsCpuStatistics.  # noqa: E501
        :type: float
        """

        self._one_min_usage_in_percentage = one_min_usage_in_percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PathResponseResultResponseDeviceStatisticsCpuStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
