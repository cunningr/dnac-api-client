# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeviceInnerDeviceInfoStackInfoStackMemberList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hardware_version': 'str',
        'license_level': 'str',
        'license_type': 'str',
        'mac_address': 'str',
        'pid': 'str',
        'priority': 'int',
        'role': 'str',
        'serial_number': 'str',
        'software_version': 'str',
        'stack_number': 'int',
        'state': 'str',
        'sudi_serial_number': 'str'
    }

    attribute_map = {
        'hardware_version': 'hardwareVersion',
        'license_level': 'licenseLevel',
        'license_type': 'licenseType',
        'mac_address': 'macAddress',
        'pid': 'pid',
        'priority': 'priority',
        'role': 'role',
        'serial_number': 'serialNumber',
        'software_version': 'softwareVersion',
        'stack_number': 'stackNumber',
        'state': 'state',
        'sudi_serial_number': 'sudiSerialNumber'
    }

    def __init__(self, hardware_version=None, license_level=None, license_type=None, mac_address=None, pid=None, priority=None, role=None, serial_number=None, software_version=None, stack_number=None, state=None, sudi_serial_number=None):  # noqa: E501
        """DeviceInnerDeviceInfoStackInfoStackMemberList - a model defined in Swagger"""  # noqa: E501

        self._hardware_version = None
        self._license_level = None
        self._license_type = None
        self._mac_address = None
        self._pid = None
        self._priority = None
        self._role = None
        self._serial_number = None
        self._software_version = None
        self._stack_number = None
        self._state = None
        self._sudi_serial_number = None
        self.discriminator = None

        if hardware_version is not None:
            self.hardware_version = hardware_version
        if license_level is not None:
            self.license_level = license_level
        if license_type is not None:
            self.license_type = license_type
        if mac_address is not None:
            self.mac_address = mac_address
        if pid is not None:
            self.pid = pid
        if priority is not None:
            self.priority = priority
        if role is not None:
            self.role = role
        if serial_number is not None:
            self.serial_number = serial_number
        if software_version is not None:
            self.software_version = software_version
        if stack_number is not None:
            self.stack_number = stack_number
        if state is not None:
            self.state = state
        if sudi_serial_number is not None:
            self.sudi_serial_number = sudi_serial_number

    @property
    def hardware_version(self):
        """Gets the hardware_version of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501


        :return: The hardware_version of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :rtype: str
        """
        return self._hardware_version

    @hardware_version.setter
    def hardware_version(self, hardware_version):
        """Sets the hardware_version of this DeviceInnerDeviceInfoStackInfoStackMemberList.


        :param hardware_version: The hardware_version of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :type: str
        """

        self._hardware_version = hardware_version

    @property
    def license_level(self):
        """Gets the license_level of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501


        :return: The license_level of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :rtype: str
        """
        return self._license_level

    @license_level.setter
    def license_level(self, license_level):
        """Sets the license_level of this DeviceInnerDeviceInfoStackInfoStackMemberList.


        :param license_level: The license_level of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :type: str
        """

        self._license_level = license_level

    @property
    def license_type(self):
        """Gets the license_type of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501


        :return: The license_type of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this DeviceInnerDeviceInfoStackInfoStackMemberList.


        :param license_type: The license_type of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :type: str
        """

        self._license_type = license_type

    @property
    def mac_address(self):
        """Gets the mac_address of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501


        :return: The mac_address of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this DeviceInnerDeviceInfoStackInfoStackMemberList.


        :param mac_address: The mac_address of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def pid(self):
        """Gets the pid of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501


        :return: The pid of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this DeviceInnerDeviceInfoStackInfoStackMemberList.


        :param pid: The pid of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def priority(self):
        """Gets the priority of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501


        :return: The priority of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this DeviceInnerDeviceInfoStackInfoStackMemberList.


        :param priority: The priority of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def role(self):
        """Gets the role of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501


        :return: The role of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this DeviceInnerDeviceInfoStackInfoStackMemberList.


        :param role: The role of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def serial_number(self):
        """Gets the serial_number of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501


        :return: The serial_number of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DeviceInnerDeviceInfoStackInfoStackMemberList.


        :param serial_number: The serial_number of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def software_version(self):
        """Gets the software_version of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501


        :return: The software_version of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this DeviceInnerDeviceInfoStackInfoStackMemberList.


        :param software_version: The software_version of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def stack_number(self):
        """Gets the stack_number of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501


        :return: The stack_number of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :rtype: int
        """
        return self._stack_number

    @stack_number.setter
    def stack_number(self, stack_number):
        """Sets the stack_number of this DeviceInnerDeviceInfoStackInfoStackMemberList.


        :param stack_number: The stack_number of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :type: int
        """

        self._stack_number = stack_number

    @property
    def state(self):
        """Gets the state of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501


        :return: The state of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DeviceInnerDeviceInfoStackInfoStackMemberList.


        :param state: The state of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def sudi_serial_number(self):
        """Gets the sudi_serial_number of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501


        :return: The sudi_serial_number of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :rtype: str
        """
        return self._sudi_serial_number

    @sudi_serial_number.setter
    def sudi_serial_number(self, sudi_serial_number):
        """Sets the sudi_serial_number of this DeviceInnerDeviceInfoStackInfoStackMemberList.


        :param sudi_serial_number: The sudi_serial_number of this DeviceInnerDeviceInfoStackInfoStackMemberList.  # noqa: E501
        :type: str
        """

        self._sudi_serial_number = sudi_serial_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceInnerDeviceInfoStackInfoStackMemberList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
