# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NetworkDeviceNIOListResultResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'port_range': 'str',
        'role': 'str',
        'error_description': 'str',
        'error_code': 'str',
        'reachability_failure_reason': 'str',
        'ingress_queue_config': 'str',
        'ping_status': 'str',
        'type': 'str',
        'num_updates': 'int',
        'last_updated': 'str',
        'qos_status': 'str',
        'hostname': 'str',
        'auth_model_id': 'str',
        'netconf_status': 'str',
        'vendor': 'str',
        'boot_date_time': 'str',
        'duplicate_device_id': 'str',
        'http_status': 'str',
        'interface_count': 'str',
        'id': 'str',
        'line_card_id': 'str',
        'role_source': 'str',
        'tag': 'str',
        'snmp_location': 'str',
        'snmp_status': 'str',
        'image_name': 'str',
        'location_name': 'str',
        'serial_number': 'str',
        'snmp_contact': 'str',
        'cli_status': 'str',
        'avg_update_frequency': 'int',
        'line_card_count': 'str',
        'management_ip_address': 'str',
        'wlc_ap_device_status': 'str',
        'platform_id': 'str',
        'reachability_status': 'str',
        'up_time': 'str',
        'mac_address': 'str',
        'memory_size': 'str',
        'anchor_wlc_for_ap': 'str',
        'inventory_collection_status': 'str',
        'inventory_reachability_status': 'str',
        'tag_count': 'int',
        'location': 'str',
        'family': 'str',
        'software_version': 'str'
    }

    attribute_map = {
        'port_range': 'portRange',
        'role': 'role',
        'error_description': 'errorDescription',
        'error_code': 'errorCode',
        'reachability_failure_reason': 'reachabilityFailureReason',
        'ingress_queue_config': 'ingressQueueConfig',
        'ping_status': 'pingStatus',
        'type': 'type',
        'num_updates': 'numUpdates',
        'last_updated': 'lastUpdated',
        'qos_status': 'qosStatus',
        'hostname': 'hostname',
        'auth_model_id': 'authModelId',
        'netconf_status': 'netconfStatus',
        'vendor': 'vendor',
        'boot_date_time': 'bootDateTime',
        'duplicate_device_id': 'duplicateDeviceId',
        'http_status': 'httpStatus',
        'interface_count': 'interfaceCount',
        'id': 'id',
        'line_card_id': 'lineCardId',
        'role_source': 'roleSource',
        'tag': 'tag',
        'snmp_location': 'snmpLocation',
        'snmp_status': 'snmpStatus',
        'image_name': 'imageName',
        'location_name': 'locationName',
        'serial_number': 'serialNumber',
        'snmp_contact': 'snmpContact',
        'cli_status': 'cliStatus',
        'avg_update_frequency': 'avgUpdateFrequency',
        'line_card_count': 'lineCardCount',
        'management_ip_address': 'managementIpAddress',
        'wlc_ap_device_status': 'wlcApDeviceStatus',
        'platform_id': 'platformId',
        'reachability_status': 'reachabilityStatus',
        'up_time': 'upTime',
        'mac_address': 'macAddress',
        'memory_size': 'memorySize',
        'anchor_wlc_for_ap': 'anchorWlcForAp',
        'inventory_collection_status': 'inventoryCollectionStatus',
        'inventory_reachability_status': 'inventoryReachabilityStatus',
        'tag_count': 'tagCount',
        'location': 'location',
        'family': 'family',
        'software_version': 'softwareVersion'
    }

    def __init__(self, port_range=None, role=None, error_description=None, error_code=None, reachability_failure_reason=None, ingress_queue_config=None, ping_status=None, type=None, num_updates=None, last_updated=None, qos_status=None, hostname=None, auth_model_id=None, netconf_status=None, vendor=None, boot_date_time=None, duplicate_device_id=None, http_status=None, interface_count=None, id=None, line_card_id=None, role_source=None, tag=None, snmp_location=None, snmp_status=None, image_name=None, location_name=None, serial_number=None, snmp_contact=None, cli_status=None, avg_update_frequency=None, line_card_count=None, management_ip_address=None, wlc_ap_device_status=None, platform_id=None, reachability_status=None, up_time=None, mac_address=None, memory_size=None, anchor_wlc_for_ap=None, inventory_collection_status=None, inventory_reachability_status=None, tag_count=None, location=None, family=None, software_version=None):  # noqa: E501
        """NetworkDeviceNIOListResultResponse - a model defined in OpenAPI"""  # noqa: E501

        self._port_range = None
        self._role = None
        self._error_description = None
        self._error_code = None
        self._reachability_failure_reason = None
        self._ingress_queue_config = None
        self._ping_status = None
        self._type = None
        self._num_updates = None
        self._last_updated = None
        self._qos_status = None
        self._hostname = None
        self._auth_model_id = None
        self._netconf_status = None
        self._vendor = None
        self._boot_date_time = None
        self._duplicate_device_id = None
        self._http_status = None
        self._interface_count = None
        self._id = None
        self._line_card_id = None
        self._role_source = None
        self._tag = None
        self._snmp_location = None
        self._snmp_status = None
        self._image_name = None
        self._location_name = None
        self._serial_number = None
        self._snmp_contact = None
        self._cli_status = None
        self._avg_update_frequency = None
        self._line_card_count = None
        self._management_ip_address = None
        self._wlc_ap_device_status = None
        self._platform_id = None
        self._reachability_status = None
        self._up_time = None
        self._mac_address = None
        self._memory_size = None
        self._anchor_wlc_for_ap = None
        self._inventory_collection_status = None
        self._inventory_reachability_status = None
        self._tag_count = None
        self._location = None
        self._family = None
        self._software_version = None
        self.discriminator = None

        if port_range is not None:
            self.port_range = port_range
        if role is not None:
            self.role = role
        if error_description is not None:
            self.error_description = error_description
        if error_code is not None:
            self.error_code = error_code
        if reachability_failure_reason is not None:
            self.reachability_failure_reason = reachability_failure_reason
        if ingress_queue_config is not None:
            self.ingress_queue_config = ingress_queue_config
        if ping_status is not None:
            self.ping_status = ping_status
        if type is not None:
            self.type = type
        if num_updates is not None:
            self.num_updates = num_updates
        if last_updated is not None:
            self.last_updated = last_updated
        if qos_status is not None:
            self.qos_status = qos_status
        if hostname is not None:
            self.hostname = hostname
        if auth_model_id is not None:
            self.auth_model_id = auth_model_id
        if netconf_status is not None:
            self.netconf_status = netconf_status
        if vendor is not None:
            self.vendor = vendor
        if boot_date_time is not None:
            self.boot_date_time = boot_date_time
        if duplicate_device_id is not None:
            self.duplicate_device_id = duplicate_device_id
        if http_status is not None:
            self.http_status = http_status
        if interface_count is not None:
            self.interface_count = interface_count
        if id is not None:
            self.id = id
        if line_card_id is not None:
            self.line_card_id = line_card_id
        if role_source is not None:
            self.role_source = role_source
        if tag is not None:
            self.tag = tag
        if snmp_location is not None:
            self.snmp_location = snmp_location
        if snmp_status is not None:
            self.snmp_status = snmp_status
        if image_name is not None:
            self.image_name = image_name
        if location_name is not None:
            self.location_name = location_name
        if serial_number is not None:
            self.serial_number = serial_number
        if snmp_contact is not None:
            self.snmp_contact = snmp_contact
        if cli_status is not None:
            self.cli_status = cli_status
        if avg_update_frequency is not None:
            self.avg_update_frequency = avg_update_frequency
        if line_card_count is not None:
            self.line_card_count = line_card_count
        if management_ip_address is not None:
            self.management_ip_address = management_ip_address
        if wlc_ap_device_status is not None:
            self.wlc_ap_device_status = wlc_ap_device_status
        if platform_id is not None:
            self.platform_id = platform_id
        if reachability_status is not None:
            self.reachability_status = reachability_status
        if up_time is not None:
            self.up_time = up_time
        if mac_address is not None:
            self.mac_address = mac_address
        if memory_size is not None:
            self.memory_size = memory_size
        if anchor_wlc_for_ap is not None:
            self.anchor_wlc_for_ap = anchor_wlc_for_ap
        if inventory_collection_status is not None:
            self.inventory_collection_status = inventory_collection_status
        if inventory_reachability_status is not None:
            self.inventory_reachability_status = inventory_reachability_status
        if tag_count is not None:
            self.tag_count = tag_count
        if location is not None:
            self.location = location
        if family is not None:
            self.family = family
        if software_version is not None:
            self.software_version = software_version

    @property
    def port_range(self):
        """Gets the port_range of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The port_range of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._port_range

    @port_range.setter
    def port_range(self, port_range):
        """Sets the port_range of this NetworkDeviceNIOListResultResponse.


        :param port_range: The port_range of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._port_range = port_range

    @property
    def role(self):
        """Gets the role of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The role of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this NetworkDeviceNIOListResultResponse.


        :param role: The role of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def error_description(self):
        """Gets the error_description of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The error_description of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this NetworkDeviceNIOListResultResponse.


        :param error_description: The error_description of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._error_description = error_description

    @property
    def error_code(self):
        """Gets the error_code of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The error_code of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this NetworkDeviceNIOListResultResponse.


        :param error_code: The error_code of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def reachability_failure_reason(self):
        """Gets the reachability_failure_reason of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The reachability_failure_reason of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._reachability_failure_reason

    @reachability_failure_reason.setter
    def reachability_failure_reason(self, reachability_failure_reason):
        """Sets the reachability_failure_reason of this NetworkDeviceNIOListResultResponse.


        :param reachability_failure_reason: The reachability_failure_reason of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._reachability_failure_reason = reachability_failure_reason

    @property
    def ingress_queue_config(self):
        """Gets the ingress_queue_config of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The ingress_queue_config of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._ingress_queue_config

    @ingress_queue_config.setter
    def ingress_queue_config(self, ingress_queue_config):
        """Sets the ingress_queue_config of this NetworkDeviceNIOListResultResponse.


        :param ingress_queue_config: The ingress_queue_config of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._ingress_queue_config = ingress_queue_config

    @property
    def ping_status(self):
        """Gets the ping_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The ping_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._ping_status

    @ping_status.setter
    def ping_status(self, ping_status):
        """Sets the ping_status of this NetworkDeviceNIOListResultResponse.


        :param ping_status: The ping_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._ping_status = ping_status

    @property
    def type(self):
        """Gets the type of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The type of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NetworkDeviceNIOListResultResponse.


        :param type: The type of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def num_updates(self):
        """Gets the num_updates of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The num_updates of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_updates

    @num_updates.setter
    def num_updates(self, num_updates):
        """Sets the num_updates of this NetworkDeviceNIOListResultResponse.


        :param num_updates: The num_updates of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: int
        """

        self._num_updates = num_updates

    @property
    def last_updated(self):
        """Gets the last_updated of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The last_updated of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this NetworkDeviceNIOListResultResponse.


        :param last_updated: The last_updated of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def qos_status(self):
        """Gets the qos_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The qos_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._qos_status

    @qos_status.setter
    def qos_status(self, qos_status):
        """Sets the qos_status of this NetworkDeviceNIOListResultResponse.


        :param qos_status: The qos_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._qos_status = qos_status

    @property
    def hostname(self):
        """Gets the hostname of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The hostname of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this NetworkDeviceNIOListResultResponse.


        :param hostname: The hostname of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def auth_model_id(self):
        """Gets the auth_model_id of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The auth_model_id of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._auth_model_id

    @auth_model_id.setter
    def auth_model_id(self, auth_model_id):
        """Sets the auth_model_id of this NetworkDeviceNIOListResultResponse.


        :param auth_model_id: The auth_model_id of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._auth_model_id = auth_model_id

    @property
    def netconf_status(self):
        """Gets the netconf_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The netconf_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._netconf_status

    @netconf_status.setter
    def netconf_status(self, netconf_status):
        """Sets the netconf_status of this NetworkDeviceNIOListResultResponse.


        :param netconf_status: The netconf_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._netconf_status = netconf_status

    @property
    def vendor(self):
        """Gets the vendor of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The vendor of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this NetworkDeviceNIOListResultResponse.


        :param vendor: The vendor of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def boot_date_time(self):
        """Gets the boot_date_time of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The boot_date_time of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._boot_date_time

    @boot_date_time.setter
    def boot_date_time(self, boot_date_time):
        """Sets the boot_date_time of this NetworkDeviceNIOListResultResponse.


        :param boot_date_time: The boot_date_time of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._boot_date_time = boot_date_time

    @property
    def duplicate_device_id(self):
        """Gets the duplicate_device_id of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The duplicate_device_id of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._duplicate_device_id

    @duplicate_device_id.setter
    def duplicate_device_id(self, duplicate_device_id):
        """Sets the duplicate_device_id of this NetworkDeviceNIOListResultResponse.


        :param duplicate_device_id: The duplicate_device_id of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._duplicate_device_id = duplicate_device_id

    @property
    def http_status(self):
        """Gets the http_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The http_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._http_status

    @http_status.setter
    def http_status(self, http_status):
        """Sets the http_status of this NetworkDeviceNIOListResultResponse.


        :param http_status: The http_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._http_status = http_status

    @property
    def interface_count(self):
        """Gets the interface_count of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The interface_count of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._interface_count

    @interface_count.setter
    def interface_count(self, interface_count):
        """Sets the interface_count of this NetworkDeviceNIOListResultResponse.


        :param interface_count: The interface_count of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._interface_count = interface_count

    @property
    def id(self):
        """Gets the id of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The id of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetworkDeviceNIOListResultResponse.


        :param id: The id of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def line_card_id(self):
        """Gets the line_card_id of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The line_card_id of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._line_card_id

    @line_card_id.setter
    def line_card_id(self, line_card_id):
        """Sets the line_card_id of this NetworkDeviceNIOListResultResponse.


        :param line_card_id: The line_card_id of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._line_card_id = line_card_id

    @property
    def role_source(self):
        """Gets the role_source of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The role_source of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._role_source

    @role_source.setter
    def role_source(self, role_source):
        """Sets the role_source of this NetworkDeviceNIOListResultResponse.


        :param role_source: The role_source of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._role_source = role_source

    @property
    def tag(self):
        """Gets the tag of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The tag of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this NetworkDeviceNIOListResultResponse.


        :param tag: The tag of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def snmp_location(self):
        """Gets the snmp_location of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The snmp_location of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._snmp_location

    @snmp_location.setter
    def snmp_location(self, snmp_location):
        """Sets the snmp_location of this NetworkDeviceNIOListResultResponse.


        :param snmp_location: The snmp_location of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._snmp_location = snmp_location

    @property
    def snmp_status(self):
        """Gets the snmp_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The snmp_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._snmp_status

    @snmp_status.setter
    def snmp_status(self, snmp_status):
        """Sets the snmp_status of this NetworkDeviceNIOListResultResponse.


        :param snmp_status: The snmp_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._snmp_status = snmp_status

    @property
    def image_name(self):
        """Gets the image_name of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The image_name of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this NetworkDeviceNIOListResultResponse.


        :param image_name: The image_name of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._image_name = image_name

    @property
    def location_name(self):
        """Gets the location_name of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The location_name of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this NetworkDeviceNIOListResultResponse.


        :param location_name: The location_name of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._location_name = location_name

    @property
    def serial_number(self):
        """Gets the serial_number of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The serial_number of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this NetworkDeviceNIOListResultResponse.


        :param serial_number: The serial_number of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def snmp_contact(self):
        """Gets the snmp_contact of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The snmp_contact of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._snmp_contact

    @snmp_contact.setter
    def snmp_contact(self, snmp_contact):
        """Sets the snmp_contact of this NetworkDeviceNIOListResultResponse.


        :param snmp_contact: The snmp_contact of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._snmp_contact = snmp_contact

    @property
    def cli_status(self):
        """Gets the cli_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The cli_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._cli_status

    @cli_status.setter
    def cli_status(self, cli_status):
        """Sets the cli_status of this NetworkDeviceNIOListResultResponse.


        :param cli_status: The cli_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._cli_status = cli_status

    @property
    def avg_update_frequency(self):
        """Gets the avg_update_frequency of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The avg_update_frequency of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._avg_update_frequency

    @avg_update_frequency.setter
    def avg_update_frequency(self, avg_update_frequency):
        """Sets the avg_update_frequency of this NetworkDeviceNIOListResultResponse.


        :param avg_update_frequency: The avg_update_frequency of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: int
        """

        self._avg_update_frequency = avg_update_frequency

    @property
    def line_card_count(self):
        """Gets the line_card_count of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The line_card_count of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._line_card_count

    @line_card_count.setter
    def line_card_count(self, line_card_count):
        """Sets the line_card_count of this NetworkDeviceNIOListResultResponse.


        :param line_card_count: The line_card_count of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._line_card_count = line_card_count

    @property
    def management_ip_address(self):
        """Gets the management_ip_address of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The management_ip_address of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._management_ip_address

    @management_ip_address.setter
    def management_ip_address(self, management_ip_address):
        """Sets the management_ip_address of this NetworkDeviceNIOListResultResponse.


        :param management_ip_address: The management_ip_address of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._management_ip_address = management_ip_address

    @property
    def wlc_ap_device_status(self):
        """Gets the wlc_ap_device_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The wlc_ap_device_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._wlc_ap_device_status

    @wlc_ap_device_status.setter
    def wlc_ap_device_status(self, wlc_ap_device_status):
        """Sets the wlc_ap_device_status of this NetworkDeviceNIOListResultResponse.


        :param wlc_ap_device_status: The wlc_ap_device_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._wlc_ap_device_status = wlc_ap_device_status

    @property
    def platform_id(self):
        """Gets the platform_id of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The platform_id of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this NetworkDeviceNIOListResultResponse.


        :param platform_id: The platform_id of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._platform_id = platform_id

    @property
    def reachability_status(self):
        """Gets the reachability_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The reachability_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._reachability_status

    @reachability_status.setter
    def reachability_status(self, reachability_status):
        """Sets the reachability_status of this NetworkDeviceNIOListResultResponse.


        :param reachability_status: The reachability_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._reachability_status = reachability_status

    @property
    def up_time(self):
        """Gets the up_time of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The up_time of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._up_time

    @up_time.setter
    def up_time(self, up_time):
        """Sets the up_time of this NetworkDeviceNIOListResultResponse.


        :param up_time: The up_time of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._up_time = up_time

    @property
    def mac_address(self):
        """Gets the mac_address of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The mac_address of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this NetworkDeviceNIOListResultResponse.


        :param mac_address: The mac_address of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def memory_size(self):
        """Gets the memory_size of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The memory_size of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._memory_size

    @memory_size.setter
    def memory_size(self, memory_size):
        """Sets the memory_size of this NetworkDeviceNIOListResultResponse.


        :param memory_size: The memory_size of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._memory_size = memory_size

    @property
    def anchor_wlc_for_ap(self):
        """Gets the anchor_wlc_for_ap of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The anchor_wlc_for_ap of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._anchor_wlc_for_ap

    @anchor_wlc_for_ap.setter
    def anchor_wlc_for_ap(self, anchor_wlc_for_ap):
        """Sets the anchor_wlc_for_ap of this NetworkDeviceNIOListResultResponse.


        :param anchor_wlc_for_ap: The anchor_wlc_for_ap of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._anchor_wlc_for_ap = anchor_wlc_for_ap

    @property
    def inventory_collection_status(self):
        """Gets the inventory_collection_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The inventory_collection_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._inventory_collection_status

    @inventory_collection_status.setter
    def inventory_collection_status(self, inventory_collection_status):
        """Sets the inventory_collection_status of this NetworkDeviceNIOListResultResponse.


        :param inventory_collection_status: The inventory_collection_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._inventory_collection_status = inventory_collection_status

    @property
    def inventory_reachability_status(self):
        """Gets the inventory_reachability_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The inventory_reachability_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._inventory_reachability_status

    @inventory_reachability_status.setter
    def inventory_reachability_status(self, inventory_reachability_status):
        """Sets the inventory_reachability_status of this NetworkDeviceNIOListResultResponse.


        :param inventory_reachability_status: The inventory_reachability_status of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._inventory_reachability_status = inventory_reachability_status

    @property
    def tag_count(self):
        """Gets the tag_count of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The tag_count of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._tag_count

    @tag_count.setter
    def tag_count(self, tag_count):
        """Sets the tag_count of this NetworkDeviceNIOListResultResponse.


        :param tag_count: The tag_count of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: int
        """

        self._tag_count = tag_count

    @property
    def location(self):
        """Gets the location of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The location of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this NetworkDeviceNIOListResultResponse.


        :param location: The location of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def family(self):
        """Gets the family of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The family of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this NetworkDeviceNIOListResultResponse.


        :param family: The family of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._family = family

    @property
    def software_version(self):
        """Gets the software_version of this NetworkDeviceNIOListResultResponse.  # noqa: E501


        :return: The software_version of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this NetworkDeviceNIOListResultResponse.


        :param software_version: The software_version of this NetworkDeviceNIOListResultResponse.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkDeviceNIOListResultResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
