# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ExportDeviceDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device_uuids': 'list[str]',
        'id': 'str',
        'operation_enum': 'str',
        'parameters': 'list[str]',
        'password': 'str'
    }

    attribute_map = {
        'device_uuids': 'deviceUuids',
        'id': 'id',
        'operation_enum': 'operationEnum',
        'parameters': 'parameters',
        'password': 'password'
    }

    def __init__(self, device_uuids=None, id=None, operation_enum=None, parameters=None, password=None):  # noqa: E501
        """ExportDeviceDTO - a model defined in OpenAPI"""  # noqa: E501

        self._device_uuids = None
        self._id = None
        self._operation_enum = None
        self._parameters = None
        self._password = None
        self.discriminator = None

        if device_uuids is not None:
            self.device_uuids = device_uuids
        if id is not None:
            self.id = id
        if operation_enum is not None:
            self.operation_enum = operation_enum
        if parameters is not None:
            self.parameters = parameters
        if password is not None:
            self.password = password

    @property
    def device_uuids(self):
        """Gets the device_uuids of this ExportDeviceDTO.  # noqa: E501


        :return: The device_uuids of this ExportDeviceDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._device_uuids

    @device_uuids.setter
    def device_uuids(self, device_uuids):
        """Sets the device_uuids of this ExportDeviceDTO.


        :param device_uuids: The device_uuids of this ExportDeviceDTO.  # noqa: E501
        :type: list[str]
        """

        self._device_uuids = device_uuids

    @property
    def id(self):
        """Gets the id of this ExportDeviceDTO.  # noqa: E501


        :return: The id of this ExportDeviceDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExportDeviceDTO.


        :param id: The id of this ExportDeviceDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def operation_enum(self):
        """Gets the operation_enum of this ExportDeviceDTO.  # noqa: E501


        :return: The operation_enum of this ExportDeviceDTO.  # noqa: E501
        :rtype: str
        """
        return self._operation_enum

    @operation_enum.setter
    def operation_enum(self, operation_enum):
        """Sets the operation_enum of this ExportDeviceDTO.


        :param operation_enum: The operation_enum of this ExportDeviceDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREDENTIALDETAILS", "DEVICEDETAILS"]  # noqa: E501
        if operation_enum not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_enum` ({0}), must be one of {1}"  # noqa: E501
                .format(operation_enum, allowed_values)
            )

        self._operation_enum = operation_enum

    @property
    def parameters(self):
        """Gets the parameters of this ExportDeviceDTO.  # noqa: E501


        :return: The parameters of this ExportDeviceDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ExportDeviceDTO.


        :param parameters: The parameters of this ExportDeviceDTO.  # noqa: E501
        :type: list[str]
        """

        self._parameters = parameters

    @property
    def password(self):
        """Gets the password of this ExportDeviceDTO.  # noqa: E501


        :return: The password of this ExportDeviceDTO.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ExportDeviceDTO.


        :param password: The password of this ExportDeviceDTO.  # noqa: E501
        :type: str
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportDeviceDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
