# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClientDetailResponseResponseTopologyLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'label': 'list[str]',
        'link_status': 'str',
        'port_utilization': 'str',
        'source': 'str',
        'target': 'str'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'link_status': 'linkStatus',
        'port_utilization': 'portUtilization',
        'source': 'source',
        'target': 'target'
    }

    def __init__(self, id=None, label=None, link_status=None, port_utilization=None, source=None, target=None):  # noqa: E501
        """ClientDetailResponseResponseTopologyLinks - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._label = None
        self._link_status = None
        self._port_utilization = None
        self._source = None
        self._target = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if link_status is not None:
            self.link_status = link_status
        if port_utilization is not None:
            self.port_utilization = port_utilization
        if source is not None:
            self.source = source
        if target is not None:
            self.target = target

    @property
    def id(self):
        """Gets the id of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501


        :return: The id of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientDetailResponseResponseTopologyLinks.


        :param id: The id of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501


        :return: The label of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ClientDetailResponseResponseTopologyLinks.


        :param label: The label of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def link_status(self):
        """Gets the link_status of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501


        :return: The link_status of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501
        :rtype: str
        """
        return self._link_status

    @link_status.setter
    def link_status(self, link_status):
        """Sets the link_status of this ClientDetailResponseResponseTopologyLinks.


        :param link_status: The link_status of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501
        :type: str
        """

        self._link_status = link_status

    @property
    def port_utilization(self):
        """Gets the port_utilization of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501


        :return: The port_utilization of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501
        :rtype: str
        """
        return self._port_utilization

    @port_utilization.setter
    def port_utilization(self, port_utilization):
        """Sets the port_utilization of this ClientDetailResponseResponseTopologyLinks.


        :param port_utilization: The port_utilization of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501
        :type: str
        """

        self._port_utilization = port_utilization

    @property
    def source(self):
        """Gets the source of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501


        :return: The source of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ClientDetailResponseResponseTopologyLinks.


        :param source: The source of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501


        :return: The target of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ClientDetailResponseResponseTopologyLinks.


        :param target: The target of this ClientDetailResponseResponseTopologyLinks.  # noqa: E501
        :type: str
        """

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientDetailResponseResponseTopologyLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
