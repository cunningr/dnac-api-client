# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ModuleListResultResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'serial_number': 'str',
        'description': 'str',
        'module_index': 'int',
        'containment_entity': 'str',
        'manufacturer': 'str',
        'is_reporting_alarms_allowed': 'str',
        'attribute_info': 'object',
        'entity_physical_index': 'str',
        'name': 'str',
        'part_number': 'str',
        'id': 'str',
        'is_field_replaceable': 'str',
        'vendor_equipment_type': 'str',
        'assembly_number': 'str',
        'assembly_revision': 'str',
        'operational_state_code': 'str'
    }

    attribute_map = {
        'serial_number': 'serialNumber',
        'description': 'description',
        'module_index': 'moduleIndex',
        'containment_entity': 'containmentEntity',
        'manufacturer': 'manufacturer',
        'is_reporting_alarms_allowed': 'isReportingAlarmsAllowed',
        'attribute_info': 'attributeInfo',
        'entity_physical_index': 'entityPhysicalIndex',
        'name': 'name',
        'part_number': 'partNumber',
        'id': 'id',
        'is_field_replaceable': 'isFieldReplaceable',
        'vendor_equipment_type': 'vendorEquipmentType',
        'assembly_number': 'assemblyNumber',
        'assembly_revision': 'assemblyRevision',
        'operational_state_code': 'operationalStateCode'
    }

    def __init__(self, serial_number=None, description=None, module_index=None, containment_entity=None, manufacturer=None, is_reporting_alarms_allowed=None, attribute_info=None, entity_physical_index=None, name=None, part_number=None, id=None, is_field_replaceable=None, vendor_equipment_type=None, assembly_number=None, assembly_revision=None, operational_state_code=None):  # noqa: E501
        """ModuleListResultResponse - a model defined in OpenAPI"""  # noqa: E501

        self._serial_number = None
        self._description = None
        self._module_index = None
        self._containment_entity = None
        self._manufacturer = None
        self._is_reporting_alarms_allowed = None
        self._attribute_info = None
        self._entity_physical_index = None
        self._name = None
        self._part_number = None
        self._id = None
        self._is_field_replaceable = None
        self._vendor_equipment_type = None
        self._assembly_number = None
        self._assembly_revision = None
        self._operational_state_code = None
        self.discriminator = None

        if serial_number is not None:
            self.serial_number = serial_number
        if description is not None:
            self.description = description
        if module_index is not None:
            self.module_index = module_index
        if containment_entity is not None:
            self.containment_entity = containment_entity
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if is_reporting_alarms_allowed is not None:
            self.is_reporting_alarms_allowed = is_reporting_alarms_allowed
        if attribute_info is not None:
            self.attribute_info = attribute_info
        if entity_physical_index is not None:
            self.entity_physical_index = entity_physical_index
        if name is not None:
            self.name = name
        if part_number is not None:
            self.part_number = part_number
        if id is not None:
            self.id = id
        if is_field_replaceable is not None:
            self.is_field_replaceable = is_field_replaceable
        if vendor_equipment_type is not None:
            self.vendor_equipment_type = vendor_equipment_type
        if assembly_number is not None:
            self.assembly_number = assembly_number
        if assembly_revision is not None:
            self.assembly_revision = assembly_revision
        if operational_state_code is not None:
            self.operational_state_code = operational_state_code

    @property
    def serial_number(self):
        """Gets the serial_number of this ModuleListResultResponse.  # noqa: E501


        :return: The serial_number of this ModuleListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ModuleListResultResponse.


        :param serial_number: The serial_number of this ModuleListResultResponse.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def description(self):
        """Gets the description of this ModuleListResultResponse.  # noqa: E501


        :return: The description of this ModuleListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModuleListResultResponse.


        :param description: The description of this ModuleListResultResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def module_index(self):
        """Gets the module_index of this ModuleListResultResponse.  # noqa: E501


        :return: The module_index of this ModuleListResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._module_index

    @module_index.setter
    def module_index(self, module_index):
        """Sets the module_index of this ModuleListResultResponse.


        :param module_index: The module_index of this ModuleListResultResponse.  # noqa: E501
        :type: int
        """

        self._module_index = module_index

    @property
    def containment_entity(self):
        """Gets the containment_entity of this ModuleListResultResponse.  # noqa: E501


        :return: The containment_entity of this ModuleListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._containment_entity

    @containment_entity.setter
    def containment_entity(self, containment_entity):
        """Sets the containment_entity of this ModuleListResultResponse.


        :param containment_entity: The containment_entity of this ModuleListResultResponse.  # noqa: E501
        :type: str
        """

        self._containment_entity = containment_entity

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ModuleListResultResponse.  # noqa: E501


        :return: The manufacturer of this ModuleListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ModuleListResultResponse.


        :param manufacturer: The manufacturer of this ModuleListResultResponse.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def is_reporting_alarms_allowed(self):
        """Gets the is_reporting_alarms_allowed of this ModuleListResultResponse.  # noqa: E501


        :return: The is_reporting_alarms_allowed of this ModuleListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._is_reporting_alarms_allowed

    @is_reporting_alarms_allowed.setter
    def is_reporting_alarms_allowed(self, is_reporting_alarms_allowed):
        """Sets the is_reporting_alarms_allowed of this ModuleListResultResponse.


        :param is_reporting_alarms_allowed: The is_reporting_alarms_allowed of this ModuleListResultResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "TRUE", "FALSE", "NOT_APPLICABLE"]  # noqa: E501
        if is_reporting_alarms_allowed not in allowed_values:
            raise ValueError(
                "Invalid value for `is_reporting_alarms_allowed` ({0}), must be one of {1}"  # noqa: E501
                .format(is_reporting_alarms_allowed, allowed_values)
            )

        self._is_reporting_alarms_allowed = is_reporting_alarms_allowed

    @property
    def attribute_info(self):
        """Gets the attribute_info of this ModuleListResultResponse.  # noqa: E501


        :return: The attribute_info of this ModuleListResultResponse.  # noqa: E501
        :rtype: object
        """
        return self._attribute_info

    @attribute_info.setter
    def attribute_info(self, attribute_info):
        """Sets the attribute_info of this ModuleListResultResponse.


        :param attribute_info: The attribute_info of this ModuleListResultResponse.  # noqa: E501
        :type: object
        """

        self._attribute_info = attribute_info

    @property
    def entity_physical_index(self):
        """Gets the entity_physical_index of this ModuleListResultResponse.  # noqa: E501


        :return: The entity_physical_index of this ModuleListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity_physical_index

    @entity_physical_index.setter
    def entity_physical_index(self, entity_physical_index):
        """Sets the entity_physical_index of this ModuleListResultResponse.


        :param entity_physical_index: The entity_physical_index of this ModuleListResultResponse.  # noqa: E501
        :type: str
        """

        self._entity_physical_index = entity_physical_index

    @property
    def name(self):
        """Gets the name of this ModuleListResultResponse.  # noqa: E501


        :return: The name of this ModuleListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModuleListResultResponse.


        :param name: The name of this ModuleListResultResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def part_number(self):
        """Gets the part_number of this ModuleListResultResponse.  # noqa: E501


        :return: The part_number of this ModuleListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this ModuleListResultResponse.


        :param part_number: The part_number of this ModuleListResultResponse.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def id(self):
        """Gets the id of this ModuleListResultResponse.  # noqa: E501


        :return: The id of this ModuleListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModuleListResultResponse.


        :param id: The id of this ModuleListResultResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_field_replaceable(self):
        """Gets the is_field_replaceable of this ModuleListResultResponse.  # noqa: E501


        :return: The is_field_replaceable of this ModuleListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._is_field_replaceable

    @is_field_replaceable.setter
    def is_field_replaceable(self, is_field_replaceable):
        """Sets the is_field_replaceable of this ModuleListResultResponse.


        :param is_field_replaceable: The is_field_replaceable of this ModuleListResultResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "TRUE", "FALSE", "NOT_APPLICABLE"]  # noqa: E501
        if is_field_replaceable not in allowed_values:
            raise ValueError(
                "Invalid value for `is_field_replaceable` ({0}), must be one of {1}"  # noqa: E501
                .format(is_field_replaceable, allowed_values)
            )

        self._is_field_replaceable = is_field_replaceable

    @property
    def vendor_equipment_type(self):
        """Gets the vendor_equipment_type of this ModuleListResultResponse.  # noqa: E501


        :return: The vendor_equipment_type of this ModuleListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._vendor_equipment_type

    @vendor_equipment_type.setter
    def vendor_equipment_type(self, vendor_equipment_type):
        """Sets the vendor_equipment_type of this ModuleListResultResponse.


        :param vendor_equipment_type: The vendor_equipment_type of this ModuleListResultResponse.  # noqa: E501
        :type: str
        """

        self._vendor_equipment_type = vendor_equipment_type

    @property
    def assembly_number(self):
        """Gets the assembly_number of this ModuleListResultResponse.  # noqa: E501


        :return: The assembly_number of this ModuleListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._assembly_number

    @assembly_number.setter
    def assembly_number(self, assembly_number):
        """Sets the assembly_number of this ModuleListResultResponse.


        :param assembly_number: The assembly_number of this ModuleListResultResponse.  # noqa: E501
        :type: str
        """

        self._assembly_number = assembly_number

    @property
    def assembly_revision(self):
        """Gets the assembly_revision of this ModuleListResultResponse.  # noqa: E501


        :return: The assembly_revision of this ModuleListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._assembly_revision

    @assembly_revision.setter
    def assembly_revision(self, assembly_revision):
        """Sets the assembly_revision of this ModuleListResultResponse.


        :param assembly_revision: The assembly_revision of this ModuleListResultResponse.  # noqa: E501
        :type: str
        """

        self._assembly_revision = assembly_revision

    @property
    def operational_state_code(self):
        """Gets the operational_state_code of this ModuleListResultResponse.  # noqa: E501


        :return: The operational_state_code of this ModuleListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._operational_state_code

    @operational_state_code.setter
    def operational_state_code(self, operational_state_code):
        """Sets the operational_state_code of this ModuleListResultResponse.


        :param operational_state_code: The operational_state_code of this ModuleListResultResponse.  # noqa: E501
        :type: str
        """

        self._operational_state_code = operational_state_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModuleListResultResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
