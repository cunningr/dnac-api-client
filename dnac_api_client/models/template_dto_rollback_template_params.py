# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TemplateDTORollbackTemplateParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instruction_text': 'str',
        'default_value': 'str',
        'display_name': 'str',
        'data_type': 'str',
        'description': 'str',
        'range': 'list[TemplateDTORange]',
        'parameter_name': 'str',
        'required': 'bool',
        'selection': 'object',
        'provider': 'str',
        'id': 'str',
        'key': 'str',
        'group': 'str',
        'order': 'int'
    }

    attribute_map = {
        'instruction_text': 'instructionText',
        'default_value': 'defaultValue',
        'display_name': 'displayName',
        'data_type': 'dataType',
        'description': 'description',
        'range': 'range',
        'parameter_name': 'parameterName',
        'required': 'required',
        'selection': 'selection',
        'provider': 'provider',
        'id': 'id',
        'key': 'key',
        'group': 'group',
        'order': 'order'
    }

    def __init__(self, instruction_text=None, default_value=None, display_name=None, data_type=None, description=None, range=None, parameter_name=None, required=None, selection=None, provider=None, id=None, key=None, group=None, order=None):  # noqa: E501
        """TemplateDTORollbackTemplateParams - a model defined in OpenAPI"""  # noqa: E501

        self._instruction_text = None
        self._default_value = None
        self._display_name = None
        self._data_type = None
        self._description = None
        self._range = None
        self._parameter_name = None
        self._required = None
        self._selection = None
        self._provider = None
        self._id = None
        self._key = None
        self._group = None
        self._order = None
        self.discriminator = None

        if instruction_text is not None:
            self.instruction_text = instruction_text
        if default_value is not None:
            self.default_value = default_value
        if display_name is not None:
            self.display_name = display_name
        if data_type is not None:
            self.data_type = data_type
        if description is not None:
            self.description = description
        if range is not None:
            self.range = range
        if parameter_name is not None:
            self.parameter_name = parameter_name
        if required is not None:
            self.required = required
        if selection is not None:
            self.selection = selection
        if provider is not None:
            self.provider = provider
        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if group is not None:
            self.group = group
        if order is not None:
            self.order = order

    @property
    def instruction_text(self):
        """Gets the instruction_text of this TemplateDTORollbackTemplateParams.  # noqa: E501


        :return: The instruction_text of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :rtype: str
        """
        return self._instruction_text

    @instruction_text.setter
    def instruction_text(self, instruction_text):
        """Sets the instruction_text of this TemplateDTORollbackTemplateParams.


        :param instruction_text: The instruction_text of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :type: str
        """

        self._instruction_text = instruction_text

    @property
    def default_value(self):
        """Gets the default_value of this TemplateDTORollbackTemplateParams.  # noqa: E501


        :return: The default_value of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this TemplateDTORollbackTemplateParams.


        :param default_value: The default_value of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def display_name(self):
        """Gets the display_name of this TemplateDTORollbackTemplateParams.  # noqa: E501


        :return: The display_name of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TemplateDTORollbackTemplateParams.


        :param display_name: The display_name of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def data_type(self):
        """Gets the data_type of this TemplateDTORollbackTemplateParams.  # noqa: E501


        :return: The data_type of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this TemplateDTORollbackTemplateParams.


        :param data_type: The data_type of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["STRING", "INTEGER", "IPADDRESS", "MACADDRESS", "SECTIONDIVIDER"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def description(self):
        """Gets the description of this TemplateDTORollbackTemplateParams.  # noqa: E501


        :return: The description of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TemplateDTORollbackTemplateParams.


        :param description: The description of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def range(self):
        """Gets the range of this TemplateDTORollbackTemplateParams.  # noqa: E501


        :return: The range of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :rtype: list[TemplateDTORange]
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this TemplateDTORollbackTemplateParams.


        :param range: The range of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :type: list[TemplateDTORange]
        """

        self._range = range

    @property
    def parameter_name(self):
        """Gets the parameter_name of this TemplateDTORollbackTemplateParams.  # noqa: E501


        :return: The parameter_name of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :rtype: str
        """
        return self._parameter_name

    @parameter_name.setter
    def parameter_name(self, parameter_name):
        """Sets the parameter_name of this TemplateDTORollbackTemplateParams.


        :param parameter_name: The parameter_name of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :type: str
        """

        self._parameter_name = parameter_name

    @property
    def required(self):
        """Gets the required of this TemplateDTORollbackTemplateParams.  # noqa: E501


        :return: The required of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this TemplateDTORollbackTemplateParams.


        :param required: The required of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def selection(self):
        """Gets the selection of this TemplateDTORollbackTemplateParams.  # noqa: E501


        :return: The selection of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :rtype: object
        """
        return self._selection

    @selection.setter
    def selection(self, selection):
        """Sets the selection of this TemplateDTORollbackTemplateParams.


        :param selection: The selection of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :type: object
        """

        self._selection = selection

    @property
    def provider(self):
        """Gets the provider of this TemplateDTORollbackTemplateParams.  # noqa: E501


        :return: The provider of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this TemplateDTORollbackTemplateParams.


        :param provider: The provider of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def id(self):
        """Gets the id of this TemplateDTORollbackTemplateParams.  # noqa: E501


        :return: The id of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TemplateDTORollbackTemplateParams.


        :param id: The id of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this TemplateDTORollbackTemplateParams.  # noqa: E501


        :return: The key of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TemplateDTORollbackTemplateParams.


        :param key: The key of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def group(self):
        """Gets the group of this TemplateDTORollbackTemplateParams.  # noqa: E501


        :return: The group of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this TemplateDTORollbackTemplateParams.


        :param group: The group of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def order(self):
        """Gets the order of this TemplateDTORollbackTemplateParams.  # noqa: E501


        :return: The order of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this TemplateDTORollbackTemplateParams.


        :param order: The order of this TemplateDTORollbackTemplateParams.  # noqa: E501
        :type: int
        """

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateDTORollbackTemplateParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
