# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProjectDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_time': 'int',
        'description': 'str',
        'id': 'str',
        'last_update_time': 'int',
        'name': 'str',
        'tags': 'list[str]',
        'templates': 'object'
    }

    attribute_map = {
        'create_time': 'createTime',
        'description': 'description',
        'id': 'id',
        'last_update_time': 'lastUpdateTime',
        'name': 'name',
        'tags': 'tags',
        'templates': 'templates'
    }

    def __init__(self, create_time=None, description=None, id=None, last_update_time=None, name=None, tags=None, templates=None):  # noqa: E501
        """ProjectDTO - a model defined in Swagger"""  # noqa: E501

        self._create_time = None
        self._description = None
        self._id = None
        self._last_update_time = None
        self._name = None
        self._tags = None
        self._templates = None
        self.discriminator = None

        if create_time is not None:
            self.create_time = create_time
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if last_update_time is not None:
            self.last_update_time = last_update_time
        if name is not None:
            self.name = name
        if tags is not None:
            self.tags = tags
        if templates is not None:
            self.templates = templates

    @property
    def create_time(self):
        """Gets the create_time of this ProjectDTO.  # noqa: E501


        :return: The create_time of this ProjectDTO.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ProjectDTO.


        :param create_time: The create_time of this ProjectDTO.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ProjectDTO.  # noqa: E501


        :return: The description of this ProjectDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectDTO.


        :param description: The description of this ProjectDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ProjectDTO.  # noqa: E501


        :return: The id of this ProjectDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectDTO.


        :param id: The id of this ProjectDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_update_time(self):
        """Gets the last_update_time of this ProjectDTO.  # noqa: E501


        :return: The last_update_time of this ProjectDTO.  # noqa: E501
        :rtype: int
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this ProjectDTO.


        :param last_update_time: The last_update_time of this ProjectDTO.  # noqa: E501
        :type: int
        """

        self._last_update_time = last_update_time

    @property
    def name(self):
        """Gets the name of this ProjectDTO.  # noqa: E501


        :return: The name of this ProjectDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectDTO.


        :param name: The name of this ProjectDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this ProjectDTO.  # noqa: E501


        :return: The tags of this ProjectDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ProjectDTO.


        :param tags: The tags of this ProjectDTO.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def templates(self):
        """Gets the templates of this ProjectDTO.  # noqa: E501


        :return: The templates of this ProjectDTO.  # noqa: E501
        :rtype: object
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this ProjectDTO.


        :param templates: The templates of this ProjectDTO.  # noqa: E501
        :type: object
        """

        self._templates = templates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
