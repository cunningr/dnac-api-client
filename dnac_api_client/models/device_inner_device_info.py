# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dnac_api_client.models.claim_device_request_config_parameters import ClaimDeviceRequestConfigParameters  # noqa: F401,E501
from dnac_api_client.models.device_inner_device_info_aaa_credentials import DeviceInnerDeviceInfoAaaCredentials  # noqa: F401,E501
from dnac_api_client.models.device_inner_device_info_file_system_list import DeviceInnerDeviceInfoFileSystemList  # noqa: F401,E501
from dnac_api_client.models.device_inner_device_info_ip_interfaces import DeviceInnerDeviceInfoIpInterfaces  # noqa: F401,E501
from dnac_api_client.models.device_inner_device_info_location import DeviceInnerDeviceInfoLocation  # noqa: F401,E501
from dnac_api_client.models.device_inner_device_info_neighbor_links import DeviceInnerDeviceInfoNeighborLinks  # noqa: F401,E501
from dnac_api_client.models.device_inner_device_info_pnp_profile_list import DeviceInnerDeviceInfoPnpProfileList  # noqa: F401,E501
from dnac_api_client.models.device_inner_device_info_pre_workflow_cli_ouputs import DeviceInnerDeviceInfoPreWorkflowCliOuputs  # noqa: F401,E501
from dnac_api_client.models.device_inner_device_info_stack_info import DeviceInnerDeviceInfoStackInfo  # noqa: F401,E501


class DeviceInnerDeviceInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aaa_credentials': 'DeviceInnerDeviceInfoAaaCredentials',
        'added_on': 'int',
        'addn_mac_addrs': 'list[str]',
        'agent_type': 'str',
        'auth_status': 'str',
        'authenticated_sudi_serial_no': 'str',
        'capabilities_supported': 'list[str]',
        'cm_state': 'str',
        'description': 'str',
        'device_sudi_serial_nos': 'list[str]',
        'device_type': 'str',
        'features_supported': 'list[str]',
        'file_system_list': 'list[DeviceInnerDeviceInfoFileSystemList]',
        'first_contact': 'int',
        'hostname': 'str',
        'http_headers': 'list[ClaimDeviceRequestConfigParameters]',
        'image_file': 'str',
        'image_version': 'str',
        'ip_interfaces': 'list[DeviceInnerDeviceInfoIpInterfaces]',
        'last_contact': 'int',
        'last_sync_time': 'int',
        'last_update_on': 'int',
        'location': 'DeviceInnerDeviceInfoLocation',
        'mac_address': 'str',
        'mode': 'str',
        'name': 'str',
        'neighbor_links': 'list[DeviceInnerDeviceInfoNeighborLinks]',
        'onb_state': 'str',
        'pid': 'str',
        'pnp_profile_list': 'list[DeviceInnerDeviceInfoPnpProfileList]',
        'pre_workflow_cli_ouputs': 'list[DeviceInnerDeviceInfoPreWorkflowCliOuputs]',
        'project_id': 'str',
        'project_name': 'str',
        'reload_requested': 'bool',
        'serial_number': 'str',
        'smart_account_id': 'str',
        'source': 'str',
        'stack': 'bool',
        'stack_info': 'DeviceInnerDeviceInfoStackInfo',
        'state': 'str',
        'sudi_required': 'bool',
        'tags': 'object',
        'user_sudi_serial_nos': 'list[str]',
        'virtual_account_id': 'str',
        'workflow_id': 'str',
        'workflow_name': 'str'
    }

    attribute_map = {
        'aaa_credentials': 'aaaCredentials',
        'added_on': 'addedOn',
        'addn_mac_addrs': 'addnMacAddrs',
        'agent_type': 'agentType',
        'auth_status': 'authStatus',
        'authenticated_sudi_serial_no': 'authenticatedSudiSerialNo',
        'capabilities_supported': 'capabilitiesSupported',
        'cm_state': 'cmState',
        'description': 'description',
        'device_sudi_serial_nos': 'deviceSudiSerialNos',
        'device_type': 'deviceType',
        'features_supported': 'featuresSupported',
        'file_system_list': 'fileSystemList',
        'first_contact': 'firstContact',
        'hostname': 'hostname',
        'http_headers': 'httpHeaders',
        'image_file': 'imageFile',
        'image_version': 'imageVersion',
        'ip_interfaces': 'ipInterfaces',
        'last_contact': 'lastContact',
        'last_sync_time': 'lastSyncTime',
        'last_update_on': 'lastUpdateOn',
        'location': 'location',
        'mac_address': 'macAddress',
        'mode': 'mode',
        'name': 'name',
        'neighbor_links': 'neighborLinks',
        'onb_state': 'onbState',
        'pid': 'pid',
        'pnp_profile_list': 'pnpProfileList',
        'pre_workflow_cli_ouputs': 'preWorkflowCliOuputs',
        'project_id': 'projectId',
        'project_name': 'projectName',
        'reload_requested': 'reloadRequested',
        'serial_number': 'serialNumber',
        'smart_account_id': 'smartAccountId',
        'source': 'source',
        'stack': 'stack',
        'stack_info': 'stackInfo',
        'state': 'state',
        'sudi_required': 'sudiRequired',
        'tags': 'tags',
        'user_sudi_serial_nos': 'userSudiSerialNos',
        'virtual_account_id': 'virtualAccountId',
        'workflow_id': 'workflowId',
        'workflow_name': 'workflowName'
    }

    def __init__(self, aaa_credentials=None, added_on=None, addn_mac_addrs=None, agent_type=None, auth_status=None, authenticated_sudi_serial_no=None, capabilities_supported=None, cm_state=None, description=None, device_sudi_serial_nos=None, device_type=None, features_supported=None, file_system_list=None, first_contact=None, hostname=None, http_headers=None, image_file=None, image_version=None, ip_interfaces=None, last_contact=None, last_sync_time=None, last_update_on=None, location=None, mac_address=None, mode=None, name=None, neighbor_links=None, onb_state=None, pid=None, pnp_profile_list=None, pre_workflow_cli_ouputs=None, project_id=None, project_name=None, reload_requested=None, serial_number=None, smart_account_id=None, source=None, stack=None, stack_info=None, state=None, sudi_required=None, tags=None, user_sudi_serial_nos=None, virtual_account_id=None, workflow_id=None, workflow_name=None):  # noqa: E501
        """DeviceInnerDeviceInfo - a model defined in Swagger"""  # noqa: E501

        self._aaa_credentials = None
        self._added_on = None
        self._addn_mac_addrs = None
        self._agent_type = None
        self._auth_status = None
        self._authenticated_sudi_serial_no = None
        self._capabilities_supported = None
        self._cm_state = None
        self._description = None
        self._device_sudi_serial_nos = None
        self._device_type = None
        self._features_supported = None
        self._file_system_list = None
        self._first_contact = None
        self._hostname = None
        self._http_headers = None
        self._image_file = None
        self._image_version = None
        self._ip_interfaces = None
        self._last_contact = None
        self._last_sync_time = None
        self._last_update_on = None
        self._location = None
        self._mac_address = None
        self._mode = None
        self._name = None
        self._neighbor_links = None
        self._onb_state = None
        self._pid = None
        self._pnp_profile_list = None
        self._pre_workflow_cli_ouputs = None
        self._project_id = None
        self._project_name = None
        self._reload_requested = None
        self._serial_number = None
        self._smart_account_id = None
        self._source = None
        self._stack = None
        self._stack_info = None
        self._state = None
        self._sudi_required = None
        self._tags = None
        self._user_sudi_serial_nos = None
        self._virtual_account_id = None
        self._workflow_id = None
        self._workflow_name = None
        self.discriminator = None

        if aaa_credentials is not None:
            self.aaa_credentials = aaa_credentials
        if added_on is not None:
            self.added_on = added_on
        if addn_mac_addrs is not None:
            self.addn_mac_addrs = addn_mac_addrs
        if agent_type is not None:
            self.agent_type = agent_type
        if auth_status is not None:
            self.auth_status = auth_status
        if authenticated_sudi_serial_no is not None:
            self.authenticated_sudi_serial_no = authenticated_sudi_serial_no
        if capabilities_supported is not None:
            self.capabilities_supported = capabilities_supported
        if cm_state is not None:
            self.cm_state = cm_state
        if description is not None:
            self.description = description
        if device_sudi_serial_nos is not None:
            self.device_sudi_serial_nos = device_sudi_serial_nos
        if device_type is not None:
            self.device_type = device_type
        if features_supported is not None:
            self.features_supported = features_supported
        if file_system_list is not None:
            self.file_system_list = file_system_list
        if first_contact is not None:
            self.first_contact = first_contact
        if hostname is not None:
            self.hostname = hostname
        if http_headers is not None:
            self.http_headers = http_headers
        if image_file is not None:
            self.image_file = image_file
        if image_version is not None:
            self.image_version = image_version
        if ip_interfaces is not None:
            self.ip_interfaces = ip_interfaces
        if last_contact is not None:
            self.last_contact = last_contact
        if last_sync_time is not None:
            self.last_sync_time = last_sync_time
        if last_update_on is not None:
            self.last_update_on = last_update_on
        if location is not None:
            self.location = location
        if mac_address is not None:
            self.mac_address = mac_address
        if mode is not None:
            self.mode = mode
        if name is not None:
            self.name = name
        if neighbor_links is not None:
            self.neighbor_links = neighbor_links
        if onb_state is not None:
            self.onb_state = onb_state
        if pid is not None:
            self.pid = pid
        if pnp_profile_list is not None:
            self.pnp_profile_list = pnp_profile_list
        if pre_workflow_cli_ouputs is not None:
            self.pre_workflow_cli_ouputs = pre_workflow_cli_ouputs
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if reload_requested is not None:
            self.reload_requested = reload_requested
        if serial_number is not None:
            self.serial_number = serial_number
        if smart_account_id is not None:
            self.smart_account_id = smart_account_id
        if source is not None:
            self.source = source
        if stack is not None:
            self.stack = stack
        if stack_info is not None:
            self.stack_info = stack_info
        if state is not None:
            self.state = state
        if sudi_required is not None:
            self.sudi_required = sudi_required
        if tags is not None:
            self.tags = tags
        if user_sudi_serial_nos is not None:
            self.user_sudi_serial_nos = user_sudi_serial_nos
        if virtual_account_id is not None:
            self.virtual_account_id = virtual_account_id
        if workflow_id is not None:
            self.workflow_id = workflow_id
        if workflow_name is not None:
            self.workflow_name = workflow_name

    @property
    def aaa_credentials(self):
        """Gets the aaa_credentials of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The aaa_credentials of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: DeviceInnerDeviceInfoAaaCredentials
        """
        return self._aaa_credentials

    @aaa_credentials.setter
    def aaa_credentials(self, aaa_credentials):
        """Sets the aaa_credentials of this DeviceInnerDeviceInfo.


        :param aaa_credentials: The aaa_credentials of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: DeviceInnerDeviceInfoAaaCredentials
        """

        self._aaa_credentials = aaa_credentials

    @property
    def added_on(self):
        """Gets the added_on of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The added_on of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: int
        """
        return self._added_on

    @added_on.setter
    def added_on(self, added_on):
        """Sets the added_on of this DeviceInnerDeviceInfo.


        :param added_on: The added_on of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: int
        """

        self._added_on = added_on

    @property
    def addn_mac_addrs(self):
        """Gets the addn_mac_addrs of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The addn_mac_addrs of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._addn_mac_addrs

    @addn_mac_addrs.setter
    def addn_mac_addrs(self, addn_mac_addrs):
        """Sets the addn_mac_addrs of this DeviceInnerDeviceInfo.


        :param addn_mac_addrs: The addn_mac_addrs of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: list[str]
        """

        self._addn_mac_addrs = addn_mac_addrs

    @property
    def agent_type(self):
        """Gets the agent_type of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The agent_type of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._agent_type

    @agent_type.setter
    def agent_type(self, agent_type):
        """Sets the agent_type of this DeviceInnerDeviceInfo.


        :param agent_type: The agent_type of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["POSIX", "IOS"]  # noqa: E501
        if agent_type not in allowed_values:
            raise ValueError(
                "Invalid value for `agent_type` ({0}), must be one of {1}"  # noqa: E501
                .format(agent_type, allowed_values)
            )

        self._agent_type = agent_type

    @property
    def auth_status(self):
        """Gets the auth_status of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The auth_status of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._auth_status

    @auth_status.setter
    def auth_status(self, auth_status):
        """Sets the auth_status of this DeviceInnerDeviceInfo.


        :param auth_status: The auth_status of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._auth_status = auth_status

    @property
    def authenticated_sudi_serial_no(self):
        """Gets the authenticated_sudi_serial_no of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The authenticated_sudi_serial_no of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._authenticated_sudi_serial_no

    @authenticated_sudi_serial_no.setter
    def authenticated_sudi_serial_no(self, authenticated_sudi_serial_no):
        """Sets the authenticated_sudi_serial_no of this DeviceInnerDeviceInfo.


        :param authenticated_sudi_serial_no: The authenticated_sudi_serial_no of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._authenticated_sudi_serial_no = authenticated_sudi_serial_no

    @property
    def capabilities_supported(self):
        """Gets the capabilities_supported of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The capabilities_supported of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._capabilities_supported

    @capabilities_supported.setter
    def capabilities_supported(self, capabilities_supported):
        """Sets the capabilities_supported of this DeviceInnerDeviceInfo.


        :param capabilities_supported: The capabilities_supported of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: list[str]
        """

        self._capabilities_supported = capabilities_supported

    @property
    def cm_state(self):
        """Gets the cm_state of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The cm_state of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._cm_state

    @cm_state.setter
    def cm_state(self, cm_state):
        """Sets the cm_state of this DeviceInnerDeviceInfo.


        :param cm_state: The cm_state of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotContacted", "Contacted", "Disconnected", "SecuringConnection", "SecuredConnection", "Authenticated", "ErrorSecuringConnection", "ErrorAuthenticating"]  # noqa: E501
        if cm_state not in allowed_values:
            raise ValueError(
                "Invalid value for `cm_state` ({0}), must be one of {1}"  # noqa: E501
                .format(cm_state, allowed_values)
            )

        self._cm_state = cm_state

    @property
    def description(self):
        """Gets the description of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The description of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceInnerDeviceInfo.


        :param description: The description of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_sudi_serial_nos(self):
        """Gets the device_sudi_serial_nos of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The device_sudi_serial_nos of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._device_sudi_serial_nos

    @device_sudi_serial_nos.setter
    def device_sudi_serial_nos(self, device_sudi_serial_nos):
        """Sets the device_sudi_serial_nos of this DeviceInnerDeviceInfo.


        :param device_sudi_serial_nos: The device_sudi_serial_nos of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: list[str]
        """

        self._device_sudi_serial_nos = device_sudi_serial_nos

    @property
    def device_type(self):
        """Gets the device_type of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The device_type of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceInnerDeviceInfo.


        :param device_type: The device_type of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def features_supported(self):
        """Gets the features_supported of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The features_supported of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._features_supported

    @features_supported.setter
    def features_supported(self, features_supported):
        """Sets the features_supported of this DeviceInnerDeviceInfo.


        :param features_supported: The features_supported of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: list[str]
        """

        self._features_supported = features_supported

    @property
    def file_system_list(self):
        """Gets the file_system_list of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The file_system_list of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: list[DeviceInnerDeviceInfoFileSystemList]
        """
        return self._file_system_list

    @file_system_list.setter
    def file_system_list(self, file_system_list):
        """Sets the file_system_list of this DeviceInnerDeviceInfo.


        :param file_system_list: The file_system_list of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: list[DeviceInnerDeviceInfoFileSystemList]
        """

        self._file_system_list = file_system_list

    @property
    def first_contact(self):
        """Gets the first_contact of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The first_contact of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: int
        """
        return self._first_contact

    @first_contact.setter
    def first_contact(self, first_contact):
        """Sets the first_contact of this DeviceInnerDeviceInfo.


        :param first_contact: The first_contact of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: int
        """

        self._first_contact = first_contact

    @property
    def hostname(self):
        """Gets the hostname of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The hostname of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this DeviceInnerDeviceInfo.


        :param hostname: The hostname of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def http_headers(self):
        """Gets the http_headers of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The http_headers of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: list[ClaimDeviceRequestConfigParameters]
        """
        return self._http_headers

    @http_headers.setter
    def http_headers(self, http_headers):
        """Sets the http_headers of this DeviceInnerDeviceInfo.


        :param http_headers: The http_headers of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: list[ClaimDeviceRequestConfigParameters]
        """

        self._http_headers = http_headers

    @property
    def image_file(self):
        """Gets the image_file of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The image_file of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._image_file

    @image_file.setter
    def image_file(self, image_file):
        """Sets the image_file of this DeviceInnerDeviceInfo.


        :param image_file: The image_file of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._image_file = image_file

    @property
    def image_version(self):
        """Gets the image_version of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The image_version of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._image_version

    @image_version.setter
    def image_version(self, image_version):
        """Sets the image_version of this DeviceInnerDeviceInfo.


        :param image_version: The image_version of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._image_version = image_version

    @property
    def ip_interfaces(self):
        """Gets the ip_interfaces of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The ip_interfaces of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: list[DeviceInnerDeviceInfoIpInterfaces]
        """
        return self._ip_interfaces

    @ip_interfaces.setter
    def ip_interfaces(self, ip_interfaces):
        """Sets the ip_interfaces of this DeviceInnerDeviceInfo.


        :param ip_interfaces: The ip_interfaces of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: list[DeviceInnerDeviceInfoIpInterfaces]
        """

        self._ip_interfaces = ip_interfaces

    @property
    def last_contact(self):
        """Gets the last_contact of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The last_contact of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: int
        """
        return self._last_contact

    @last_contact.setter
    def last_contact(self, last_contact):
        """Sets the last_contact of this DeviceInnerDeviceInfo.


        :param last_contact: The last_contact of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: int
        """

        self._last_contact = last_contact

    @property
    def last_sync_time(self):
        """Gets the last_sync_time of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The last_sync_time of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: int
        """
        return self._last_sync_time

    @last_sync_time.setter
    def last_sync_time(self, last_sync_time):
        """Sets the last_sync_time of this DeviceInnerDeviceInfo.


        :param last_sync_time: The last_sync_time of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: int
        """

        self._last_sync_time = last_sync_time

    @property
    def last_update_on(self):
        """Gets the last_update_on of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The last_update_on of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: int
        """
        return self._last_update_on

    @last_update_on.setter
    def last_update_on(self, last_update_on):
        """Sets the last_update_on of this DeviceInnerDeviceInfo.


        :param last_update_on: The last_update_on of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: int
        """

        self._last_update_on = last_update_on

    @property
    def location(self):
        """Gets the location of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The location of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: DeviceInnerDeviceInfoLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DeviceInnerDeviceInfo.


        :param location: The location of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: DeviceInnerDeviceInfoLocation
        """

        self._location = location

    @property
    def mac_address(self):
        """Gets the mac_address of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The mac_address of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this DeviceInnerDeviceInfo.


        :param mac_address: The mac_address of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def mode(self):
        """Gets the mode of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The mode of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this DeviceInnerDeviceInfo.


        :param mode: The mode of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The name of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceInnerDeviceInfo.


        :param name: The name of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def neighbor_links(self):
        """Gets the neighbor_links of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The neighbor_links of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: list[DeviceInnerDeviceInfoNeighborLinks]
        """
        return self._neighbor_links

    @neighbor_links.setter
    def neighbor_links(self, neighbor_links):
        """Sets the neighbor_links of this DeviceInnerDeviceInfo.


        :param neighbor_links: The neighbor_links of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: list[DeviceInnerDeviceInfoNeighborLinks]
        """

        self._neighbor_links = neighbor_links

    @property
    def onb_state(self):
        """Gets the onb_state of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The onb_state of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._onb_state

    @onb_state.setter
    def onb_state(self, onb_state):
        """Sets the onb_state of this DeviceInnerDeviceInfo.


        :param onb_state: The onb_state of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotContacted", "Connecting", "ErrorSecuringConnection", "ErrorAuthenticating", "Initializing", "Initialized", "ErrorInitializing", "ErrorSudiAuthorizing", "ExecutingWorkflow", "ExecutedWorkflow", "ErrorExecutingWorkflow", "ExecutingReset", "ErrorExecutingReset", "Provisioned"]  # noqa: E501
        if onb_state not in allowed_values:
            raise ValueError(
                "Invalid value for `onb_state` ({0}), must be one of {1}"  # noqa: E501
                .format(onb_state, allowed_values)
            )

        self._onb_state = onb_state

    @property
    def pid(self):
        """Gets the pid of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The pid of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this DeviceInnerDeviceInfo.


        :param pid: The pid of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def pnp_profile_list(self):
        """Gets the pnp_profile_list of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The pnp_profile_list of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: list[DeviceInnerDeviceInfoPnpProfileList]
        """
        return self._pnp_profile_list

    @pnp_profile_list.setter
    def pnp_profile_list(self, pnp_profile_list):
        """Sets the pnp_profile_list of this DeviceInnerDeviceInfo.


        :param pnp_profile_list: The pnp_profile_list of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: list[DeviceInnerDeviceInfoPnpProfileList]
        """

        self._pnp_profile_list = pnp_profile_list

    @property
    def pre_workflow_cli_ouputs(self):
        """Gets the pre_workflow_cli_ouputs of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The pre_workflow_cli_ouputs of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: list[DeviceInnerDeviceInfoPreWorkflowCliOuputs]
        """
        return self._pre_workflow_cli_ouputs

    @pre_workflow_cli_ouputs.setter
    def pre_workflow_cli_ouputs(self, pre_workflow_cli_ouputs):
        """Sets the pre_workflow_cli_ouputs of this DeviceInnerDeviceInfo.


        :param pre_workflow_cli_ouputs: The pre_workflow_cli_ouputs of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: list[DeviceInnerDeviceInfoPreWorkflowCliOuputs]
        """

        self._pre_workflow_cli_ouputs = pre_workflow_cli_ouputs

    @property
    def project_id(self):
        """Gets the project_id of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The project_id of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DeviceInnerDeviceInfo.


        :param project_id: The project_id of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The project_name of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this DeviceInnerDeviceInfo.


        :param project_name: The project_name of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def reload_requested(self):
        """Gets the reload_requested of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The reload_requested of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._reload_requested

    @reload_requested.setter
    def reload_requested(self, reload_requested):
        """Sets the reload_requested of this DeviceInnerDeviceInfo.


        :param reload_requested: The reload_requested of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: bool
        """

        self._reload_requested = reload_requested

    @property
    def serial_number(self):
        """Gets the serial_number of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The serial_number of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DeviceInnerDeviceInfo.


        :param serial_number: The serial_number of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def smart_account_id(self):
        """Gets the smart_account_id of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The smart_account_id of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._smart_account_id

    @smart_account_id.setter
    def smart_account_id(self, smart_account_id):
        """Sets the smart_account_id of this DeviceInnerDeviceInfo.


        :param smart_account_id: The smart_account_id of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._smart_account_id = smart_account_id

    @property
    def source(self):
        """Gets the source of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The source of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DeviceInnerDeviceInfo.


        :param source: The source of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def stack(self):
        """Gets the stack of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The stack of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._stack

    @stack.setter
    def stack(self, stack):
        """Sets the stack of this DeviceInnerDeviceInfo.


        :param stack: The stack of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: bool
        """

        self._stack = stack

    @property
    def stack_info(self):
        """Gets the stack_info of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The stack_info of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: DeviceInnerDeviceInfoStackInfo
        """
        return self._stack_info

    @stack_info.setter
    def stack_info(self, stack_info):
        """Sets the stack_info of this DeviceInnerDeviceInfo.


        :param stack_info: The stack_info of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: DeviceInnerDeviceInfoStackInfo
        """

        self._stack_info = stack_info

    @property
    def state(self):
        """Gets the state of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The state of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DeviceInnerDeviceInfo.


        :param state: The state of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unclaimed", "Planned", "Onboarding", "Provisioned", "Error", "Deleted"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def sudi_required(self):
        """Gets the sudi_required of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The sudi_required of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._sudi_required

    @sudi_required.setter
    def sudi_required(self, sudi_required):
        """Sets the sudi_required of this DeviceInnerDeviceInfo.


        :param sudi_required: The sudi_required of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: bool
        """

        self._sudi_required = sudi_required

    @property
    def tags(self):
        """Gets the tags of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The tags of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DeviceInnerDeviceInfo.


        :param tags: The tags of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: object
        """

        self._tags = tags

    @property
    def user_sudi_serial_nos(self):
        """Gets the user_sudi_serial_nos of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The user_sudi_serial_nos of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_sudi_serial_nos

    @user_sudi_serial_nos.setter
    def user_sudi_serial_nos(self, user_sudi_serial_nos):
        """Sets the user_sudi_serial_nos of this DeviceInnerDeviceInfo.


        :param user_sudi_serial_nos: The user_sudi_serial_nos of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: list[str]
        """

        self._user_sudi_serial_nos = user_sudi_serial_nos

    @property
    def virtual_account_id(self):
        """Gets the virtual_account_id of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The virtual_account_id of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._virtual_account_id

    @virtual_account_id.setter
    def virtual_account_id(self, virtual_account_id):
        """Sets the virtual_account_id of this DeviceInnerDeviceInfo.


        :param virtual_account_id: The virtual_account_id of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._virtual_account_id = virtual_account_id

    @property
    def workflow_id(self):
        """Gets the workflow_id of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The workflow_id of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this DeviceInnerDeviceInfo.


        :param workflow_id: The workflow_id of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._workflow_id = workflow_id

    @property
    def workflow_name(self):
        """Gets the workflow_name of this DeviceInnerDeviceInfo.  # noqa: E501


        :return: The workflow_name of this DeviceInnerDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._workflow_name

    @workflow_name.setter
    def workflow_name(self, workflow_name):
        """Sets the workflow_name of this DeviceInnerDeviceInfo.


        :param workflow_name: The workflow_name of this DeviceInnerDeviceInfo.  # noqa: E501
        :type: str
        """

        self._workflow_name = workflow_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceInnerDeviceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
