# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClientHealthResponseScoreDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'score_list': 'list[str]',
        'client_unique_count': 'str',
        'score_category': 'ClientHealthResponseScoreCategory',
        'endtime': 'str',
        'starttime': 'str',
        'client_count': 'str',
        'score_value': 'str'
    }

    attribute_map = {
        'score_list': 'scoreList',
        'client_unique_count': 'clientUniqueCount',
        'score_category': 'scoreCategory',
        'endtime': 'endtime',
        'starttime': 'starttime',
        'client_count': 'clientCount',
        'score_value': 'scoreValue'
    }

    def __init__(self, score_list=None, client_unique_count=None, score_category=None, endtime=None, starttime=None, client_count=None, score_value=None):  # noqa: E501
        """ClientHealthResponseScoreDetail - a model defined in OpenAPI"""  # noqa: E501

        self._score_list = None
        self._client_unique_count = None
        self._score_category = None
        self._endtime = None
        self._starttime = None
        self._client_count = None
        self._score_value = None
        self.discriminator = None

        if score_list is not None:
            self.score_list = score_list
        if client_unique_count is not None:
            self.client_unique_count = client_unique_count
        if score_category is not None:
            self.score_category = score_category
        if endtime is not None:
            self.endtime = endtime
        if starttime is not None:
            self.starttime = starttime
        if client_count is not None:
            self.client_count = client_count
        if score_value is not None:
            self.score_value = score_value

    @property
    def score_list(self):
        """Gets the score_list of this ClientHealthResponseScoreDetail.  # noqa: E501


        :return: The score_list of this ClientHealthResponseScoreDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._score_list

    @score_list.setter
    def score_list(self, score_list):
        """Sets the score_list of this ClientHealthResponseScoreDetail.


        :param score_list: The score_list of this ClientHealthResponseScoreDetail.  # noqa: E501
        :type: list[str]
        """

        self._score_list = score_list

    @property
    def client_unique_count(self):
        """Gets the client_unique_count of this ClientHealthResponseScoreDetail.  # noqa: E501


        :return: The client_unique_count of this ClientHealthResponseScoreDetail.  # noqa: E501
        :rtype: str
        """
        return self._client_unique_count

    @client_unique_count.setter
    def client_unique_count(self, client_unique_count):
        """Sets the client_unique_count of this ClientHealthResponseScoreDetail.


        :param client_unique_count: The client_unique_count of this ClientHealthResponseScoreDetail.  # noqa: E501
        :type: str
        """

        self._client_unique_count = client_unique_count

    @property
    def score_category(self):
        """Gets the score_category of this ClientHealthResponseScoreDetail.  # noqa: E501


        :return: The score_category of this ClientHealthResponseScoreDetail.  # noqa: E501
        :rtype: ClientHealthResponseScoreCategory
        """
        return self._score_category

    @score_category.setter
    def score_category(self, score_category):
        """Sets the score_category of this ClientHealthResponseScoreDetail.


        :param score_category: The score_category of this ClientHealthResponseScoreDetail.  # noqa: E501
        :type: ClientHealthResponseScoreCategory
        """

        self._score_category = score_category

    @property
    def endtime(self):
        """Gets the endtime of this ClientHealthResponseScoreDetail.  # noqa: E501


        :return: The endtime of this ClientHealthResponseScoreDetail.  # noqa: E501
        :rtype: str
        """
        return self._endtime

    @endtime.setter
    def endtime(self, endtime):
        """Sets the endtime of this ClientHealthResponseScoreDetail.


        :param endtime: The endtime of this ClientHealthResponseScoreDetail.  # noqa: E501
        :type: str
        """

        self._endtime = endtime

    @property
    def starttime(self):
        """Gets the starttime of this ClientHealthResponseScoreDetail.  # noqa: E501


        :return: The starttime of this ClientHealthResponseScoreDetail.  # noqa: E501
        :rtype: str
        """
        return self._starttime

    @starttime.setter
    def starttime(self, starttime):
        """Sets the starttime of this ClientHealthResponseScoreDetail.


        :param starttime: The starttime of this ClientHealthResponseScoreDetail.  # noqa: E501
        :type: str
        """

        self._starttime = starttime

    @property
    def client_count(self):
        """Gets the client_count of this ClientHealthResponseScoreDetail.  # noqa: E501


        :return: The client_count of this ClientHealthResponseScoreDetail.  # noqa: E501
        :rtype: str
        """
        return self._client_count

    @client_count.setter
    def client_count(self, client_count):
        """Sets the client_count of this ClientHealthResponseScoreDetail.


        :param client_count: The client_count of this ClientHealthResponseScoreDetail.  # noqa: E501
        :type: str
        """

        self._client_count = client_count

    @property
    def score_value(self):
        """Gets the score_value of this ClientHealthResponseScoreDetail.  # noqa: E501


        :return: The score_value of this ClientHealthResponseScoreDetail.  # noqa: E501
        :rtype: str
        """
        return self._score_value

    @score_value.setter
    def score_value(self, score_value):
        """Sets the score_value of this ClientHealthResponseScoreDetail.


        :param score_value: The score_value of this ClientHealthResponseScoreDetail.  # noqa: E501
        :type: str
        """

        self._score_value = score_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientHealthResponseScoreDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
