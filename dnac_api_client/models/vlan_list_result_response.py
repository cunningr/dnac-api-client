# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class VlanListResultResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'prefix': 'str',
        'ip_address': 'str',
        'vlan_number': 'int',
        'vlan_type': 'str',
        'interface_name': 'str',
        'network_address': 'str',
        'number_of_i_ps': 'int',
        'mask': 'int'
    }

    attribute_map = {
        'prefix': 'prefix',
        'ip_address': 'ipAddress',
        'vlan_number': 'vlanNumber',
        'vlan_type': 'vlanType',
        'interface_name': 'interfaceName',
        'network_address': 'networkAddress',
        'number_of_i_ps': 'numberOfIPs',
        'mask': 'mask'
    }

    def __init__(self, prefix=None, ip_address=None, vlan_number=None, vlan_type=None, interface_name=None, network_address=None, number_of_i_ps=None, mask=None):  # noqa: E501
        """VlanListResultResponse - a model defined in OpenAPI"""  # noqa: E501

        self._prefix = None
        self._ip_address = None
        self._vlan_number = None
        self._vlan_type = None
        self._interface_name = None
        self._network_address = None
        self._number_of_i_ps = None
        self._mask = None
        self.discriminator = None

        if prefix is not None:
            self.prefix = prefix
        if ip_address is not None:
            self.ip_address = ip_address
        if vlan_number is not None:
            self.vlan_number = vlan_number
        if vlan_type is not None:
            self.vlan_type = vlan_type
        if interface_name is not None:
            self.interface_name = interface_name
        if network_address is not None:
            self.network_address = network_address
        if number_of_i_ps is not None:
            self.number_of_i_ps = number_of_i_ps
        if mask is not None:
            self.mask = mask

    @property
    def prefix(self):
        """Gets the prefix of this VlanListResultResponse.  # noqa: E501


        :return: The prefix of this VlanListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this VlanListResultResponse.


        :param prefix: The prefix of this VlanListResultResponse.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def ip_address(self):
        """Gets the ip_address of this VlanListResultResponse.  # noqa: E501


        :return: The ip_address of this VlanListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this VlanListResultResponse.


        :param ip_address: The ip_address of this VlanListResultResponse.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def vlan_number(self):
        """Gets the vlan_number of this VlanListResultResponse.  # noqa: E501


        :return: The vlan_number of this VlanListResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._vlan_number

    @vlan_number.setter
    def vlan_number(self, vlan_number):
        """Sets the vlan_number of this VlanListResultResponse.


        :param vlan_number: The vlan_number of this VlanListResultResponse.  # noqa: E501
        :type: int
        """

        self._vlan_number = vlan_number

    @property
    def vlan_type(self):
        """Gets the vlan_type of this VlanListResultResponse.  # noqa: E501


        :return: The vlan_type of this VlanListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._vlan_type

    @vlan_type.setter
    def vlan_type(self, vlan_type):
        """Sets the vlan_type of this VlanListResultResponse.


        :param vlan_type: The vlan_type of this VlanListResultResponse.  # noqa: E501
        :type: str
        """

        self._vlan_type = vlan_type

    @property
    def interface_name(self):
        """Gets the interface_name of this VlanListResultResponse.  # noqa: E501


        :return: The interface_name of this VlanListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Sets the interface_name of this VlanListResultResponse.


        :param interface_name: The interface_name of this VlanListResultResponse.  # noqa: E501
        :type: str
        """

        self._interface_name = interface_name

    @property
    def network_address(self):
        """Gets the network_address of this VlanListResultResponse.  # noqa: E501


        :return: The network_address of this VlanListResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._network_address

    @network_address.setter
    def network_address(self, network_address):
        """Sets the network_address of this VlanListResultResponse.


        :param network_address: The network_address of this VlanListResultResponse.  # noqa: E501
        :type: str
        """

        self._network_address = network_address

    @property
    def number_of_i_ps(self):
        """Gets the number_of_i_ps of this VlanListResultResponse.  # noqa: E501


        :return: The number_of_i_ps of this VlanListResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_i_ps

    @number_of_i_ps.setter
    def number_of_i_ps(self, number_of_i_ps):
        """Sets the number_of_i_ps of this VlanListResultResponse.


        :param number_of_i_ps: The number_of_i_ps of this VlanListResultResponse.  # noqa: E501
        :type: int
        """

        self._number_of_i_ps = number_of_i_ps

    @property
    def mask(self):
        """Gets the mask of this VlanListResultResponse.  # noqa: E501


        :return: The mask of this VlanListResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this VlanListResultResponse.


        :param mask: The mask of this VlanListResultResponse.  # noqa: E501
        :type: int
        """

        self._mask = mask

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VlanListResultResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
