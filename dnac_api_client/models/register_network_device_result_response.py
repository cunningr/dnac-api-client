# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RegisterNetworkDeviceResultResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mac_address': 'str',
        'model_number': 'str',
        'name': 'str',
        'serial_number': 'str',
        'tenant_id': 'str'
    }

    attribute_map = {
        'mac_address': 'macAddress',
        'model_number': 'modelNumber',
        'name': 'name',
        'serial_number': 'serialNumber',
        'tenant_id': 'tenantId'
    }

    def __init__(self, mac_address=None, model_number=None, name=None, serial_number=None, tenant_id=None):  # noqa: E501
        """RegisterNetworkDeviceResultResponse - a model defined in Swagger"""  # noqa: E501

        self._mac_address = None
        self._model_number = None
        self._name = None
        self._serial_number = None
        self._tenant_id = None
        self.discriminator = None

        if mac_address is not None:
            self.mac_address = mac_address
        if model_number is not None:
            self.model_number = model_number
        if name is not None:
            self.name = name
        if serial_number is not None:
            self.serial_number = serial_number
        if tenant_id is not None:
            self.tenant_id = tenant_id

    @property
    def mac_address(self):
        """Gets the mac_address of this RegisterNetworkDeviceResultResponse.  # noqa: E501


        :return: The mac_address of this RegisterNetworkDeviceResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this RegisterNetworkDeviceResultResponse.


        :param mac_address: The mac_address of this RegisterNetworkDeviceResultResponse.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def model_number(self):
        """Gets the model_number of this RegisterNetworkDeviceResultResponse.  # noqa: E501


        :return: The model_number of this RegisterNetworkDeviceResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._model_number

    @model_number.setter
    def model_number(self, model_number):
        """Sets the model_number of this RegisterNetworkDeviceResultResponse.


        :param model_number: The model_number of this RegisterNetworkDeviceResultResponse.  # noqa: E501
        :type: str
        """

        self._model_number = model_number

    @property
    def name(self):
        """Gets the name of this RegisterNetworkDeviceResultResponse.  # noqa: E501


        :return: The name of this RegisterNetworkDeviceResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RegisterNetworkDeviceResultResponse.


        :param name: The name of this RegisterNetworkDeviceResultResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def serial_number(self):
        """Gets the serial_number of this RegisterNetworkDeviceResultResponse.  # noqa: E501


        :return: The serial_number of this RegisterNetworkDeviceResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this RegisterNetworkDeviceResultResponse.


        :param serial_number: The serial_number of this RegisterNetworkDeviceResultResponse.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def tenant_id(self):
        """Gets the tenant_id of this RegisterNetworkDeviceResultResponse.  # noqa: E501


        :return: The tenant_id of this RegisterNetworkDeviceResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this RegisterNetworkDeviceResultResponse.


        :param tenant_id: The tenant_id of this RegisterNetworkDeviceResultResponse.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegisterNetworkDeviceResultResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
