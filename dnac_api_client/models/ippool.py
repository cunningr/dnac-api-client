# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Ippool(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ip_pool_name': 'str',
        'ip_pool_cidr': 'str',
        'gateways': 'list[str]',
        'dhcp_server_ips': 'str',
        'dns_server_ips': 'str',
        'overlapping': 'str'
    }

    attribute_map = {
        'ip_pool_name': 'ipPoolName',
        'ip_pool_cidr': 'ipPoolCidr',
        'gateways': 'gateways',
        'dhcp_server_ips': 'dhcpServerIps',
        'dns_server_ips': 'dnsServerIps',
        'overlapping': 'overlapping'
    }

    def __init__(self, ip_pool_name=None, ip_pool_cidr=None, gateways=None, dhcp_server_ips=None, dns_server_ips=None, overlapping=None):  # noqa: E501
        """Ippool - a model defined in OpenAPI"""  # noqa: E501

        self._ip_pool_name = None
        self._ip_pool_cidr = None
        self._gateways = None
        self._dhcp_server_ips = None
        self._dns_server_ips = None
        self._overlapping = None
        self.discriminator = None

        self.ip_pool_name = ip_pool_name
        self.ip_pool_cidr = ip_pool_cidr
        self.gateways = gateways
        if dhcp_server_ips is not None:
            self.dhcp_server_ips = dhcp_server_ips
        if dns_server_ips is not None:
            self.dns_server_ips = dns_server_ips
        if overlapping is not None:
            self.overlapping = overlapping

    @property
    def ip_pool_name(self):
        """Gets the ip_pool_name of this Ippool.  # noqa: E501


        :return: The ip_pool_name of this Ippool.  # noqa: E501
        :rtype: str
        """
        return self._ip_pool_name

    @ip_pool_name.setter
    def ip_pool_name(self, ip_pool_name):
        """Sets the ip_pool_name of this Ippool.


        :param ip_pool_name: The ip_pool_name of this Ippool.  # noqa: E501
        :type: str
        """
        if ip_pool_name is None:
            raise ValueError("Invalid value for `ip_pool_name`, must not be `None`")  # noqa: E501

        self._ip_pool_name = ip_pool_name

    @property
    def ip_pool_cidr(self):
        """Gets the ip_pool_cidr of this Ippool.  # noqa: E501


        :return: The ip_pool_cidr of this Ippool.  # noqa: E501
        :rtype: str
        """
        return self._ip_pool_cidr

    @ip_pool_cidr.setter
    def ip_pool_cidr(self, ip_pool_cidr):
        """Sets the ip_pool_cidr of this Ippool.


        :param ip_pool_cidr: The ip_pool_cidr of this Ippool.  # noqa: E501
        :type: str
        """
        if ip_pool_cidr is None:
            raise ValueError("Invalid value for `ip_pool_cidr`, must not be `None`")  # noqa: E501

        self._ip_pool_cidr = ip_pool_cidr

    @property
    def gateways(self):
        """Gets the gateways of this Ippool.  # noqa: E501


        :return: The gateways of this Ippool.  # noqa: E501
        :rtype: list[str]
        """
        return self._gateways

    @gateways.setter
    def gateways(self, gateways):
        """Sets the gateways of this Ippool.


        :param gateways: The gateways of this Ippool.  # noqa: E501
        :type: list[str]
        """
        if gateways is None:
            raise ValueError("Invalid value for `gateways`, must not be `None`")  # noqa: E501

        self._gateways = gateways

    @property
    def dhcp_server_ips(self):
        """Gets the dhcp_server_ips of this Ippool.  # noqa: E501


        :return: The dhcp_server_ips of this Ippool.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_server_ips

    @dhcp_server_ips.setter
    def dhcp_server_ips(self, dhcp_server_ips):
        """Sets the dhcp_server_ips of this Ippool.


        :param dhcp_server_ips: The dhcp_server_ips of this Ippool.  # noqa: E501
        :type: str
        """

        self._dhcp_server_ips = dhcp_server_ips

    @property
    def dns_server_ips(self):
        """Gets the dns_server_ips of this Ippool.  # noqa: E501


        :return: The dns_server_ips of this Ippool.  # noqa: E501
        :rtype: str
        """
        return self._dns_server_ips

    @dns_server_ips.setter
    def dns_server_ips(self, dns_server_ips):
        """Sets the dns_server_ips of this Ippool.


        :param dns_server_ips: The dns_server_ips of this Ippool.  # noqa: E501
        :type: str
        """

        self._dns_server_ips = dns_server_ips

    @property
    def overlapping(self):
        """Gets the overlapping of this Ippool.  # noqa: E501


        :return: The overlapping of this Ippool.  # noqa: E501
        :rtype: str
        """
        return self._overlapping

    @overlapping.setter
    def overlapping(self, overlapping):
        """Sets the overlapping of this Ippool.


        :param overlapping: The overlapping of this Ippool.  # noqa: E501
        :type: str
        """

        self._overlapping = overlapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ippool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
