# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClaimDeviceRequestDeviceClaimList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'license_type': 'str',
        'top_of_stack_serial_number': 'str',
        'license_level': 'str',
        'config_list': 'list[ClaimDeviceRequestConfigList]',
        'device_id': 'str'
    }

    attribute_map = {
        'license_type': 'licenseType',
        'top_of_stack_serial_number': 'topOfStackSerialNumber',
        'license_level': 'licenseLevel',
        'config_list': 'configList',
        'device_id': 'deviceId'
    }

    def __init__(self, license_type=None, top_of_stack_serial_number=None, license_level=None, config_list=None, device_id=None):  # noqa: E501
        """ClaimDeviceRequestDeviceClaimList - a model defined in OpenAPI"""  # noqa: E501

        self._license_type = None
        self._top_of_stack_serial_number = None
        self._license_level = None
        self._config_list = None
        self._device_id = None
        self.discriminator = None

        if license_type is not None:
            self.license_type = license_type
        if top_of_stack_serial_number is not None:
            self.top_of_stack_serial_number = top_of_stack_serial_number
        if license_level is not None:
            self.license_level = license_level
        if config_list is not None:
            self.config_list = config_list
        if device_id is not None:
            self.device_id = device_id

    @property
    def license_type(self):
        """Gets the license_type of this ClaimDeviceRequestDeviceClaimList.  # noqa: E501


        :return: The license_type of this ClaimDeviceRequestDeviceClaimList.  # noqa: E501
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this ClaimDeviceRequestDeviceClaimList.


        :param license_type: The license_type of this ClaimDeviceRequestDeviceClaimList.  # noqa: E501
        :type: str
        """

        self._license_type = license_type

    @property
    def top_of_stack_serial_number(self):
        """Gets the top_of_stack_serial_number of this ClaimDeviceRequestDeviceClaimList.  # noqa: E501


        :return: The top_of_stack_serial_number of this ClaimDeviceRequestDeviceClaimList.  # noqa: E501
        :rtype: str
        """
        return self._top_of_stack_serial_number

    @top_of_stack_serial_number.setter
    def top_of_stack_serial_number(self, top_of_stack_serial_number):
        """Sets the top_of_stack_serial_number of this ClaimDeviceRequestDeviceClaimList.


        :param top_of_stack_serial_number: The top_of_stack_serial_number of this ClaimDeviceRequestDeviceClaimList.  # noqa: E501
        :type: str
        """

        self._top_of_stack_serial_number = top_of_stack_serial_number

    @property
    def license_level(self):
        """Gets the license_level of this ClaimDeviceRequestDeviceClaimList.  # noqa: E501


        :return: The license_level of this ClaimDeviceRequestDeviceClaimList.  # noqa: E501
        :rtype: str
        """
        return self._license_level

    @license_level.setter
    def license_level(self, license_level):
        """Sets the license_level of this ClaimDeviceRequestDeviceClaimList.


        :param license_level: The license_level of this ClaimDeviceRequestDeviceClaimList.  # noqa: E501
        :type: str
        """

        self._license_level = license_level

    @property
    def config_list(self):
        """Gets the config_list of this ClaimDeviceRequestDeviceClaimList.  # noqa: E501


        :return: The config_list of this ClaimDeviceRequestDeviceClaimList.  # noqa: E501
        :rtype: list[ClaimDeviceRequestConfigList]
        """
        return self._config_list

    @config_list.setter
    def config_list(self, config_list):
        """Sets the config_list of this ClaimDeviceRequestDeviceClaimList.


        :param config_list: The config_list of this ClaimDeviceRequestDeviceClaimList.  # noqa: E501
        :type: list[ClaimDeviceRequestConfigList]
        """

        self._config_list = config_list

    @property
    def device_id(self):
        """Gets the device_id of this ClaimDeviceRequestDeviceClaimList.  # noqa: E501


        :return: The device_id of this ClaimDeviceRequestDeviceClaimList.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ClaimDeviceRequestDeviceClaimList.


        :param device_id: The device_id of this ClaimDeviceRequestDeviceClaimList.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClaimDeviceRequestDeviceClaimList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
