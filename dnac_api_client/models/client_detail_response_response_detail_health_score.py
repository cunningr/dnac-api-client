# coding: utf-8

"""
    Cisco DNA Center Platform v. 1.2.x (EFT)

    REST API (EFT)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClientDetailResponseResponseDetailHealthScore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'health_type': 'str',
        'reason': 'str',
        'score': 'str'
    }

    attribute_map = {
        'health_type': 'healthType',
        'reason': 'reason',
        'score': 'score'
    }

    def __init__(self, health_type=None, reason=None, score=None):  # noqa: E501
        """ClientDetailResponseResponseDetailHealthScore - a model defined in Swagger"""  # noqa: E501

        self._health_type = None
        self._reason = None
        self._score = None
        self.discriminator = None

        if health_type is not None:
            self.health_type = health_type
        if reason is not None:
            self.reason = reason
        if score is not None:
            self.score = score

    @property
    def health_type(self):
        """Gets the health_type of this ClientDetailResponseResponseDetailHealthScore.  # noqa: E501


        :return: The health_type of this ClientDetailResponseResponseDetailHealthScore.  # noqa: E501
        :rtype: str
        """
        return self._health_type

    @health_type.setter
    def health_type(self, health_type):
        """Sets the health_type of this ClientDetailResponseResponseDetailHealthScore.


        :param health_type: The health_type of this ClientDetailResponseResponseDetailHealthScore.  # noqa: E501
        :type: str
        """

        self._health_type = health_type

    @property
    def reason(self):
        """Gets the reason of this ClientDetailResponseResponseDetailHealthScore.  # noqa: E501


        :return: The reason of this ClientDetailResponseResponseDetailHealthScore.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ClientDetailResponseResponseDetailHealthScore.


        :param reason: The reason of this ClientDetailResponseResponseDetailHealthScore.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def score(self):
        """Gets the score of this ClientDetailResponseResponseDetailHealthScore.  # noqa: E501


        :return: The score of this ClientDetailResponseResponseDetailHealthScore.  # noqa: E501
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ClientDetailResponseResponseDetailHealthScore.


        :param score: The score of this ClientDetailResponseResponseDetailHealthScore.  # noqa: E501
        :type: str
        """

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientDetailResponseResponseDetailHealthScore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
